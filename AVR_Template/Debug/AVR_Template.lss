
AVR_Template.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000001ba  00800100  00002cb6  00002d4a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00002cb6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001a3  008002ba  008002ba  00002f04  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00002f04  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002f60  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000550  00000000  00000000  00002fa0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000ac64  00000000  00000000  000034f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002ac0  00000000  00000000  0000e154  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00009c5d  00000000  00000000  00010c14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00001670  00000000  00000000  0001a874  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00014f37  00000000  00000000  0001bee4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000084e1  00000000  00000000  00030e1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000530  00000000  00000000  000392fc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00006d18  00000000  00000000  0003982c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	4a c0       	rjmp	.+148    	; 0x96 <__ctors_end>
       2:	00 00       	nop
       4:	65 c0       	rjmp	.+202    	; 0xd0 <__bad_interrupt>
       6:	00 00       	nop
       8:	63 c0       	rjmp	.+198    	; 0xd0 <__bad_interrupt>
       a:	00 00       	nop
       c:	61 c0       	rjmp	.+194    	; 0xd0 <__bad_interrupt>
       e:	00 00       	nop
      10:	5f c0       	rjmp	.+190    	; 0xd0 <__bad_interrupt>
      12:	00 00       	nop
      14:	5d c0       	rjmp	.+186    	; 0xd0 <__bad_interrupt>
      16:	00 00       	nop
      18:	5b c0       	rjmp	.+182    	; 0xd0 <__bad_interrupt>
      1a:	00 00       	nop
      1c:	59 c0       	rjmp	.+178    	; 0xd0 <__bad_interrupt>
      1e:	00 00       	nop
      20:	57 c0       	rjmp	.+174    	; 0xd0 <__bad_interrupt>
      22:	00 00       	nop
      24:	55 c0       	rjmp	.+170    	; 0xd0 <__bad_interrupt>
      26:	00 00       	nop
      28:	53 c0       	rjmp	.+166    	; 0xd0 <__bad_interrupt>
      2a:	00 00       	nop
      2c:	51 c0       	rjmp	.+162    	; 0xd0 <__bad_interrupt>
      2e:	00 00       	nop
      30:	4f c0       	rjmp	.+158    	; 0xd0 <__bad_interrupt>
      32:	00 00       	nop
      34:	0c 94 91 0d 	jmp	0x1b22	; 0x1b22 <__vector_13>
      38:	4b c0       	rjmp	.+150    	; 0xd0 <__bad_interrupt>
      3a:	00 00       	nop
      3c:	49 c0       	rjmp	.+146    	; 0xd0 <__bad_interrupt>
      3e:	00 00       	nop
      40:	0c 94 6c 0d 	jmp	0x1ad8	; 0x1ad8 <__vector_16>
      44:	45 c0       	rjmp	.+138    	; 0xd0 <__bad_interrupt>
      46:	00 00       	nop
      48:	0c 94 7a 0e 	jmp	0x1cf4	; 0x1cf4 <__vector_18>
      4c:	0c 94 3a 0e 	jmp	0x1c74	; 0x1c74 <__vector_19>
      50:	3f c0       	rjmp	.+126    	; 0xd0 <__bad_interrupt>
      52:	00 00       	nop
      54:	3d c0       	rjmp	.+122    	; 0xd0 <__bad_interrupt>
      56:	00 00       	nop
      58:	3b c0       	rjmp	.+118    	; 0xd0 <__bad_interrupt>
      5a:	00 00       	nop
      5c:	39 c0       	rjmp	.+114    	; 0xd0 <__bad_interrupt>
      5e:	00 00       	nop
      60:	37 c0       	rjmp	.+110    	; 0xd0 <__bad_interrupt>
      62:	00 00       	nop
      64:	35 c0       	rjmp	.+106    	; 0xd0 <__bad_interrupt>
      66:	00 00       	nop
      68:	b2 12       	cpse	r11, r18
      6a:	b6 11       	cpse	r27, r6
      6c:	c4 11       	cpse	r28, r4
      6e:	c1 11       	cpse	r28, r1
      70:	c1 11       	cpse	r28, r1
      72:	c1 11       	cpse	r28, r1
      74:	c1 11       	cpse	r28, r1
      76:	c1 11       	cpse	r28, r1
      78:	c1 11       	cpse	r28, r1
      7a:	c1 11       	cpse	r28, r1
      7c:	c1 11       	cpse	r28, r1
      7e:	c1 11       	cpse	r28, r1
      80:	c1 11       	cpse	r28, r1
      82:	c7 12       	cpse	r12, r23
      84:	c1 11       	cpse	r28, r1
      86:	c1 11       	cpse	r28, r1
      88:	c1 11       	cpse	r28, r1
      8a:	76 11       	cpse	r23, r6
      8c:	c1 11       	cpse	r28, r1
      8e:	c4 11       	cpse	r28, r4
      90:	c1 11       	cpse	r28, r1
      92:	c1 11       	cpse	r28, r1
      94:	8f 12       	cpse	r8, r31

00000096 <__ctors_end>:
      96:	11 24       	eor	r1, r1
      98:	1f be       	out	0x3f, r1	; 63
      9a:	cf ef       	ldi	r28, 0xFF	; 255
      9c:	d8 e0       	ldi	r29, 0x08	; 8
      9e:	de bf       	out	0x3e, r29	; 62
      a0:	cd bf       	out	0x3d, r28	; 61

000000a2 <__do_copy_data>:
      a2:	12 e0       	ldi	r17, 0x02	; 2
      a4:	a0 e0       	ldi	r26, 0x00	; 0
      a6:	b1 e0       	ldi	r27, 0x01	; 1
      a8:	e6 eb       	ldi	r30, 0xB6	; 182
      aa:	fc e2       	ldi	r31, 0x2C	; 44
      ac:	02 c0       	rjmp	.+4      	; 0xb2 <__do_copy_data+0x10>
      ae:	05 90       	lpm	r0, Z+
      b0:	0d 92       	st	X+, r0
      b2:	aa 3b       	cpi	r26, 0xBA	; 186
      b4:	b1 07       	cpc	r27, r17
      b6:	d9 f7       	brne	.-10     	; 0xae <__do_copy_data+0xc>

000000b8 <__do_clear_bss>:
      b8:	24 e0       	ldi	r18, 0x04	; 4
      ba:	aa eb       	ldi	r26, 0xBA	; 186
      bc:	b2 e0       	ldi	r27, 0x02	; 2
      be:	01 c0       	rjmp	.+2      	; 0xc2 <.do_clear_bss_start>

000000c0 <.do_clear_bss_loop>:
      c0:	1d 92       	st	X+, r1

000000c2 <.do_clear_bss_start>:
      c2:	ad 35       	cpi	r26, 0x5D	; 93
      c4:	b2 07       	cpc	r27, r18
      c6:	e1 f7       	brne	.-8      	; 0xc0 <.do_clear_bss_loop>
      c8:	0e 94 fc 12 	call	0x25f8	; 0x25f8 <main>
      cc:	0c 94 59 16 	jmp	0x2cb2	; 0x2cb2 <_exit>

000000d0 <__bad_interrupt>:
      d0:	97 cf       	rjmp	.-210    	; 0x0 <__vectors>

000000d2 <process_thread_adp_process>:

/*---------------------------------------------------------------------------*/
PROCESS(adp_process, "adp process");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(adp_process, ev, data)
{
      d2:	cf 93       	push	r28
      d4:	df 93       	push	r29
      d6:	ec 01       	movw	r28, r24
    static struct etimer timer_etimer;
	static uint8_t retry=10;
	
    PROCESS_BEGIN();
      d8:	88 81       	ld	r24, Y
      da:	99 81       	ldd	r25, Y+1	; 0x01
      dc:	00 97       	sbiw	r24, 0x00	; 0
      de:	19 f0       	breq	.+6      	; 0xe6 <process_thread_adp_process+0x14>
      e0:	44 97       	sbiw	r24, 0x14	; 20
      e2:	b9 f0       	breq	.+46     	; 0x112 <process_thread_adp_process+0x40>
      e4:	34 c0       	rjmp	.+104    	; 0x14e <process_thread_adp_process+0x7c>

    printf("ADP Wait!\n");
      e6:	81 e8       	ldi	r24, 0x81	; 129
      e8:	91 e0       	ldi	r25, 0x01	; 1
      ea:	9f 93       	push	r25
      ec:	8f 93       	push	r24
      ee:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>

	while( (adp_wait_for_handshake() != ADP_HANDSHAKE_ACCEPTED) && (--retry > 0))
      f2:	0f 90       	pop	r0
      f4:	0f 90       	pop	r0
      f6:	0f c0       	rjmp	.+30     	; 0x116 <process_thread_adp_process+0x44>
	{
		etimer_set(&timer_etimer,15);// 150 mSn		 
      f8:	4f e0       	ldi	r20, 0x0F	; 15
      fa:	50 e0       	ldi	r21, 0x00	; 0
      fc:	60 e0       	ldi	r22, 0x00	; 0
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	8a eb       	ldi	r24, 0xBA	; 186
     102:	92 e0       	ldi	r25, 0x02	; 2
     104:	61 d2       	rcall	.+1218   	; 0x5c8 <etimer_set>
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);			
     106:	84 e1       	ldi	r24, 0x14	; 20
     108:	90 e0       	ldi	r25, 0x00	; 0
     10a:	99 83       	std	Y+1, r25	; 0x01
     10c:	88 83       	st	Y, r24
     10e:	81 e0       	ldi	r24, 0x01	; 1
     110:	23 c0       	rjmp	.+70     	; 0x158 <process_thread_adp_process+0x86>
     112:	68 38       	cpi	r22, 0x88	; 136
	
    PROCESS_BEGIN();

    printf("ADP Wait!\n");

	while( (adp_wait_for_handshake() != ADP_HANDSHAKE_ACCEPTED) && (--retry > 0))
     114:	01 f5       	brne	.+64     	; 0x156 <process_thread_adp_process+0x84>
     116:	d0 d6       	rcall	.+3488   	; 0xeb8 <adp_wait_for_handshake>
     118:	88 23       	and	r24, r24
     11a:	41 f0       	breq	.+16     	; 0x12c <process_thread_adp_process+0x5a>
     11c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     120:	81 50       	subi	r24, 0x01	; 1
     122:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
     126:	88 23       	and	r24, r24
     128:	71 f0       	breq	.+28     	; 0x146 <process_thread_adp_process+0x74>
     12a:	e6 cf       	rjmp	.-52     	; 0xf8 <process_thread_adp_process+0x26>
	{
		etimer_set(&timer_etimer,15);// 150 mSn		 
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);			
	}
	
	if(retry != 0)
     12c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     130:	88 23       	and	r24, r24
     132:	49 f0       	breq	.+18     	; 0x146 <process_thread_adp_process+0x74>
	{						
		adp_window_add_dashboard_control();
     134:	0e 94 e0 0e 	call	0x1dc0	; 0x1dc0 <adp_window_add_dashboard_control>

		adp_window_add_terminal();
     138:	0e 94 ae 0e 	call	0x1d5c	; 0x1d5c <adp_window_add_terminal>
		
		process_start(&cpu_process,NULL); // cpu ölçüm bilgileri gönderilecek ve cpu grafik çizilecek
     13c:	60 e0       	ldi	r22, 0x00	; 0
     13e:	70 e0       	ldi	r23, 0x00	; 0
     140:	85 e1       	ldi	r24, 0x15	; 21
     142:	91 e0       	ldi	r25, 0x01	; 1
     144:	bd d3       	rcall	.+1914   	; 0x8c0 <process_start>
	}

	PROCESS_EXIT();
     146:	19 82       	std	Y+1, r1	; 0x01
     148:	18 82       	st	Y, r1
     14a:	82 e0       	ldi	r24, 0x02	; 2
     14c:	05 c0       	rjmp	.+10     	; 0x158 <process_thread_adp_process+0x86>
	
    PROCESS_END();
     14e:	19 82       	std	Y+1, r1	; 0x01
     150:	18 82       	st	Y, r1
     152:	83 e0       	ldi	r24, 0x03	; 3
     154:	01 c0       	rjmp	.+2      	; 0x158 <process_thread_adp_process+0x86>
    printf("ADP Wait!\n");

	while( (adp_wait_for_handshake() != ADP_HANDSHAKE_ACCEPTED) && (--retry > 0))
	{
		etimer_set(&timer_etimer,15);// 150 mSn		 
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);			
     156:	81 e0       	ldi	r24, 0x01	; 1
	}

	PROCESS_EXIT();
	
    PROCESS_END();
}
     158:	df 91       	pop	r29
     15a:	cf 91       	pop	r28
     15c:	08 95       	ret

0000015e <process_thread_buzzer_process>:

/*---------------------------------------------------------------------------*/
PROCESS(buzzer_process, "buzzer process");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(buzzer_process, ev, data)
{
     15e:	cf 93       	push	r28
     160:	df 93       	push	r29
     162:	ec 01       	movw	r28, r24
   static struct etimer timer_etimer;

    PROCESS_BEGIN();
     164:	88 81       	ld	r24, Y
     166:	99 81       	ldd	r25, Y+1	; 0x01
     168:	83 31       	cpi	r24, 0x13	; 19
     16a:	91 05       	cpc	r25, r1
     16c:	d1 f0       	breq	.+52     	; 0x1a2 <process_thread_buzzer_process+0x44>
     16e:	8a 31       	cpi	r24, 0x1A	; 26
     170:	91 05       	cpc	r25, r1
     172:	71 f1       	breq	.+92     	; 0x1d0 <process_thread_buzzer_process+0x72>
     174:	89 2b       	or	r24, r25
     176:	b1 f5       	brne	.+108    	; 0x1e4 <process_thread_buzzer_process+0x86>

    etimer_set(&timer_etimer,1*CLOCK_SECOND);
     178:	44 e6       	ldi	r20, 0x64	; 100
     17a:	50 e0       	ldi	r21, 0x00	; 0
     17c:	60 e0       	ldi	r22, 0x00	; 0
     17e:	70 e0       	ldi	r23, 0x00	; 0
     180:	86 ec       	ldi	r24, 0xC6	; 198
     182:	92 e0       	ldi	r25, 0x02	; 2
     184:	21 d2       	rcall	.+1090   	; 0x5c8 <etimer_set>

    printf("Buzzer worked!\n");
     186:	88 e9       	ldi	r24, 0x98	; 152
     188:	91 e0       	ldi	r25, 0x01	; 1
     18a:	9f 93       	push	r25
     18c:	8f 93       	push	r24
     18e:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>

    //PROCESS_WAIT_UNTIL(etimer_expired(&etimer_timer));
    PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     192:	83 e1       	ldi	r24, 0x13	; 19
     194:	90 e0       	ldi	r25, 0x00	; 0
     196:	99 83       	std	Y+1, r25	; 0x01
     198:	88 83       	st	Y, r24
     19a:	0f 90       	pop	r0
     19c:	0f 90       	pop	r0
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	28 c0       	rjmp	.+80     	; 0x1f2 <process_thread_buzzer_process+0x94>
     1a2:	68 38       	cpi	r22, 0x88	; 136
     1a4:	19 f5       	brne	.+70     	; 0x1ec <process_thread_buzzer_process+0x8e>

    printf("Buzzer Wait!\n");
     1a6:	88 ea       	ldi	r24, 0xA8	; 168
     1a8:	91 e0       	ldi	r25, 0x01	; 1
     1aa:	9f 93       	push	r25
     1ac:	8f 93       	push	r24
     1ae:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>

    etimer_set(&timer_etimer,1*CLOCK_SECOND);
     1b2:	44 e6       	ldi	r20, 0x64	; 100
     1b4:	50 e0       	ldi	r21, 0x00	; 0
     1b6:	60 e0       	ldi	r22, 0x00	; 0
     1b8:	70 e0       	ldi	r23, 0x00	; 0
     1ba:	86 ec       	ldi	r24, 0xC6	; 198
     1bc:	92 e0       	ldi	r25, 0x02	; 2
     1be:	04 d2       	rcall	.+1032   	; 0x5c8 <etimer_set>

    //PROCESS_WAIT_UNTIL(timer_expired(&etimer_timer));
    PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     1c0:	8a e1       	ldi	r24, 0x1A	; 26
     1c2:	90 e0       	ldi	r25, 0x00	; 0
     1c4:	99 83       	std	Y+1, r25	; 0x01
     1c6:	88 83       	st	Y, r24
     1c8:	0f 90       	pop	r0
     1ca:	0f 90       	pop	r0
     1cc:	81 e0       	ldi	r24, 0x01	; 1
     1ce:	11 c0       	rjmp	.+34     	; 0x1f2 <process_thread_buzzer_process+0x94>
     1d0:	68 38       	cpi	r22, 0x88	; 136
     1d2:	71 f4       	brne	.+28     	; 0x1f0 <process_thread_buzzer_process+0x92>

    printf("Buzzer End!\n");
     1d4:	86 eb       	ldi	r24, 0xB6	; 182
     1d6:	91 e0       	ldi	r25, 0x01	; 1
     1d8:	9f 93       	push	r25
     1da:	8f 93       	push	r24
     1dc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>
     1e0:	0f 90       	pop	r0
     1e2:	0f 90       	pop	r0

   // process_start(&led_process,NULL);

    PROCESS_END();
     1e4:	19 82       	std	Y+1, r1	; 0x01
     1e6:	18 82       	st	Y, r1
     1e8:	83 e0       	ldi	r24, 0x03	; 3
     1ea:	03 c0       	rjmp	.+6      	; 0x1f2 <process_thread_buzzer_process+0x94>
    etimer_set(&timer_etimer,1*CLOCK_SECOND);

    printf("Buzzer worked!\n");

    //PROCESS_WAIT_UNTIL(etimer_expired(&etimer_timer));
    PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     1ec:	81 e0       	ldi	r24, 0x01	; 1
     1ee:	01 c0       	rjmp	.+2      	; 0x1f2 <process_thread_buzzer_process+0x94>
    printf("Buzzer Wait!\n");

    etimer_set(&timer_etimer,1*CLOCK_SECOND);

    //PROCESS_WAIT_UNTIL(timer_expired(&etimer_timer));
    PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     1f0:	81 e0       	ldi	r24, 0x01	; 1
    printf("Buzzer End!\n");

   // process_start(&led_process,NULL);

    PROCESS_END();
}
     1f2:	df 91       	pop	r29
     1f4:	cf 91       	pop	r28
     1f6:	08 95       	ret

000001f8 <process_thread_cpu_process>:

/*---------------------------------------------------------------------------*/
PROCESS(cpu_process, "cpu process");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(cpu_process, ev, data)
{
     1f8:	cf 93       	push	r28
     1fa:	df 93       	push	r29
     1fc:	ec 01       	movw	r28, r24
	static struct etimer timer_etimer;

    PROCESS_BEGIN();
     1fe:	88 81       	ld	r24, Y
     200:	99 81       	ldd	r25, Y+1	; 0x01
     202:	00 97       	sbiw	r24, 0x00	; 0
     204:	19 f0       	breq	.+6      	; 0x20c <process_thread_cpu_process+0x14>
     206:	43 97       	sbiw	r24, 0x13	; 19
     208:	81 f0       	breq	.+32     	; 0x22a <process_thread_cpu_process+0x32>
     20a:	14 c0       	rjmp	.+40     	; 0x234 <process_thread_cpu_process+0x3c>
	
	Restart_Cpu_Measurement();
     20c:	0e 94 36 0e 	call	0x1c6c	; 0x1c6c <Restart_Cpu_Measurement>

	while(1)
	{    
		etimer_set(&timer_etimer,CLOCK_SECOND);		
     210:	44 e6       	ldi	r20, 0x64	; 100
     212:	50 e0       	ldi	r21, 0x00	; 0
     214:	60 e0       	ldi	r22, 0x00	; 0
     216:	70 e0       	ldi	r23, 0x00	; 0
     218:	82 ed       	ldi	r24, 0xD2	; 210
     21a:	92 e0       	ldi	r25, 0x02	; 2
     21c:	d5 d1       	rcall	.+938    	; 0x5c8 <etimer_set>
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);			
     21e:	83 e1       	ldi	r24, 0x13	; 19
     220:	90 e0       	ldi	r25, 0x00	; 0
     222:	99 83       	std	Y+1, r25	; 0x01
     224:	88 83       	st	Y, r24
     226:	81 e0       	ldi	r24, 0x01	; 1
     228:	0a c0       	rjmp	.+20     	; 0x23e <process_thread_cpu_process+0x46>
     22a:	68 38       	cpi	r22, 0x88	; 136
     22c:	39 f4       	brne	.+14     	; 0x23c <process_thread_cpu_process+0x44>
		Send_to_Cpu_Information();
     22e:	0e 94 bd 0d 	call	0x1b7a	; 0x1b7a <Send_to_Cpu_Information>
	}	
     232:	ee cf       	rjmp	.-36     	; 0x210 <process_thread_cpu_process+0x18>

    PROCESS_END();
     234:	19 82       	std	Y+1, r1	; 0x01
     236:	18 82       	st	Y, r1
     238:	83 e0       	ldi	r24, 0x03	; 3
     23a:	01 c0       	rjmp	.+2      	; 0x23e <process_thread_cpu_process+0x46>
	Restart_Cpu_Measurement();

	while(1)
	{    
		etimer_set(&timer_etimer,CLOCK_SECOND);		
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);			
     23c:	81 e0       	ldi	r24, 0x01	; 1
		Send_to_Cpu_Information();
	}	

    PROCESS_END();
}
     23e:	df 91       	pop	r29
     240:	cf 91       	pop	r28
     242:	08 95       	ret

00000244 <process_thread_led_process>:

/*---------------------------------------------------------------------------*/
PROCESS(led_process, "led process");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(led_process, ev, data)
{
     244:	cf 93       	push	r28
     246:	df 93       	push	r29
	static struct etimer timer_etimer;

    PROCESS_BEGIN();
     248:	fc 01       	movw	r30, r24
     24a:	20 81       	ld	r18, Z
     24c:	31 81       	ldd	r19, Z+1	; 0x01
     24e:	21 15       	cp	r18, r1
     250:	31 05       	cpc	r19, r1
     252:	21 f0       	breq	.+8      	; 0x25c <process_thread_led_process+0x18>
     254:	23 31       	cpi	r18, 0x13	; 19
     256:	31 05       	cpc	r19, r1
     258:	89 f0       	breq	.+34     	; 0x27c <process_thread_led_process+0x38>
     25a:	13 c0       	rjmp	.+38     	; 0x282 <process_thread_led_process+0x3e>
     25c:	ec 01       	movw	r28, r24
 */
__always_inline static void arch_ioport_toggle_pin_level(ioport_pin_t pin)
{
	PORT_t *base = arch_ioport_pin_to_base(pin);

	base->PINCRL = arch_ioport_pin_to_mask(pin);
     25e:	88 e0       	ldi	r24, 0x08	; 8
     260:	89 b9       	out	0x09, r24	; 9

	while(1)
	{    
		//printf("Led Toggle!\n");
		gpio_toggle_pin(GREEN_LED_PIN);	
		etimer_set(&timer_etimer,CLOCK_SECOND);		
     262:	44 e6       	ldi	r20, 0x64	; 100
     264:	50 e0       	ldi	r21, 0x00	; 0
     266:	60 e0       	ldi	r22, 0x00	; 0
     268:	70 e0       	ldi	r23, 0x00	; 0
     26a:	8e ed       	ldi	r24, 0xDE	; 222
     26c:	92 e0       	ldi	r25, 0x02	; 2
     26e:	ac d1       	rcall	.+856    	; 0x5c8 <etimer_set>
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     270:	83 e1       	ldi	r24, 0x13	; 19
     272:	90 e0       	ldi	r25, 0x00	; 0
     274:	99 83       	std	Y+1, r25	; 0x01
     276:	88 83       	st	Y, r24
     278:	81 e0       	ldi	r24, 0x01	; 1
     27a:	09 c0       	rjmp	.+18     	; 0x28e <process_thread_led_process+0x4a>
     27c:	68 38       	cpi	r22, 0x88	; 136
     27e:	31 f4       	brne	.+12     	; 0x28c <process_thread_led_process+0x48>
     280:	ed cf       	rjmp	.-38     	; 0x25c <process_thread_led_process+0x18>
	}	

    PROCESS_END();
     282:	fc 01       	movw	r30, r24
     284:	11 82       	std	Z+1, r1	; 0x01
     286:	10 82       	st	Z, r1
     288:	83 e0       	ldi	r24, 0x03	; 3
     28a:	01 c0       	rjmp	.+2      	; 0x28e <process_thread_led_process+0x4a>
	while(1)
	{    
		//printf("Led Toggle!\n");
		gpio_toggle_pin(GREEN_LED_PIN);	
		etimer_set(&timer_etimer,CLOCK_SECOND);		
		PROCESS_WAIT_EVENT_UNTIL(ev == PROCESS_EVENT_TIMER);
     28c:	81 e0       	ldi	r24, 0x01	; 1
	}	

    PROCESS_END();
}
     28e:	df 91       	pop	r29
     290:	cf 91       	pop	r28
     292:	08 95       	ret

00000294 <process_thread_start_process>:
			);
/*---------------------------------------------------------------------------*/
PROCESS(start_process, "start process");
/*---------------------------------------------------------------------------*/
PROCESS_THREAD(start_process, ev, data)
{
     294:	0f 93       	push	r16
     296:	1f 93       	push	r17
     298:	cf 93       	push	r28
     29a:	df 93       	push	r29
	int i;
	
    PROCESS_BEGIN();
     29c:	fc 01       	movw	r30, r24
     29e:	20 81       	ld	r18, Z
     2a0:	31 81       	ldd	r19, Z+1	; 0x01
     2a2:	23 2b       	or	r18, r19
     2a4:	29 f5       	brne	.+74     	; 0x2f0 <process_thread_start_process+0x5c>
     2a6:	8c 01       	movw	r16, r24
	
	printf("Start the Operation System.\n");
     2a8:	8a ee       	ldi	r24, 0xEA	; 234
     2aa:	91 e0       	ldi	r25, 0x01	; 1
     2ac:	9f 93       	push	r25
     2ae:	8f 93       	push	r24
     2b0:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>
	
    printf("Creating Threads.\n");
     2b4:	87 e0       	ldi	r24, 0x07	; 7
     2b6:	92 e0       	ldi	r25, 0x02	; 2
     2b8:	9f 93       	push	r25
     2ba:	8f 93       	push	r24
     2bc:	0e 94 e7 12 	call	0x25ce	; 0x25ce <xprintf>
	
	for(i = 0; procinit[i] != NULL; ++i) 
     2c0:	80 91 33 01 	lds	r24, 0x0133	; 0x800133 <procinit>
     2c4:	90 91 34 01 	lds	r25, 0x0134	; 0x800134 <procinit+0x1>
     2c8:	0f 90       	pop	r0
     2ca:	0f 90       	pop	r0
     2cc:	0f 90       	pop	r0
     2ce:	0f 90       	pop	r0
     2d0:	00 97       	sbiw	r24, 0x00	; 0
     2d2:	49 f0       	breq	.+18     	; 0x2e6 <process_thread_start_process+0x52>
     2d4:	c5 e3       	ldi	r28, 0x35	; 53
     2d6:	d1 e0       	ldi	r29, 0x01	; 1
	{
		process_start((struct process *)procinit[i], NULL);// tüm thread leri çalýþtýrýr.
     2d8:	60 e0       	ldi	r22, 0x00	; 0
     2da:	70 e0       	ldi	r23, 0x00	; 0
     2dc:	f1 d2       	rcall	.+1506   	; 0x8c0 <process_start>
	
	printf("Start the Operation System.\n");
	
    printf("Creating Threads.\n");
	
	for(i = 0; procinit[i] != NULL; ++i) 
     2de:	89 91       	ld	r24, Y+
     2e0:	99 91       	ld	r25, Y+
     2e2:	00 97       	sbiw	r24, 0x00	; 0
     2e4:	c9 f7       	brne	.-14     	; 0x2d8 <process_thread_start_process+0x44>
	{
		process_start((struct process *)procinit[i], NULL);// tüm thread leri çalýþtýrýr.
	}
	
	PROCESS_EXIT();
     2e6:	f8 01       	movw	r30, r16
     2e8:	11 82       	std	Z+1, r1	; 0x01
     2ea:	10 82       	st	Z, r1
     2ec:	82 e0       	ldi	r24, 0x02	; 2
     2ee:	04 c0       	rjmp	.+8      	; 0x2f8 <process_thread_start_process+0x64>
	
    PROCESS_END();
     2f0:	fc 01       	movw	r30, r24
     2f2:	11 82       	std	Z+1, r1	; 0x01
     2f4:	10 82       	st	Z, r1
     2f6:	83 e0       	ldi	r24, 0x03	; 3
}
     2f8:	df 91       	pop	r29
     2fa:	cf 91       	pop	r28
     2fc:	1f 91       	pop	r17
     2fe:	0f 91       	pop	r16
     300:	08 95       	ret

00000302 <ecos_tick>:
	return seconds;
}
/*---------------------------------------------------------------------------*/
void clock_set_seconds(unsigned long sec)
{
	seconds = sec;
     302:	80 91 ea 02 	lds	r24, 0x02EA	; 0x8002ea <ticks>
     306:	90 91 eb 02 	lds	r25, 0x02EB	; 0x8002eb <ticks+0x1>
     30a:	a0 91 ec 02 	lds	r26, 0x02EC	; 0x8002ec <ticks+0x2>
     30e:	b0 91 ed 02 	lds	r27, 0x02ED	; 0x8002ed <ticks+0x3>
     312:	01 96       	adiw	r24, 0x01	; 1
     314:	a1 1d       	adc	r26, r1
     316:	b1 1d       	adc	r27, r1
     318:	80 93 ea 02 	sts	0x02EA, r24	; 0x8002ea <ticks>
     31c:	90 93 eb 02 	sts	0x02EB, r25	; 0x8002eb <ticks+0x1>
     320:	a0 93 ec 02 	sts	0x02EC, r26	; 0x8002ec <ticks+0x2>
     324:	b0 93 ed 02 	sts	0x02ED, r27	; 0x8002ed <ticks+0x3>
     328:	58 d1       	rcall	.+688    	; 0x5da <etimer_pending>
     32a:	89 2b       	or	r24, r25
     32c:	09 f0       	breq	.+2      	; 0x330 <ecos_tick+0x2e>
     32e:	7e c0       	rjmp	.+252    	; 0x42c <etimer_request_poll>
     330:	08 95       	ret

00000332 <ecos_second_tick>:
     332:	80 91 ee 02 	lds	r24, 0x02EE	; 0x8002ee <seconds>
     336:	90 91 ef 02 	lds	r25, 0x02EF	; 0x8002ef <seconds+0x1>
     33a:	a0 91 f0 02 	lds	r26, 0x02F0	; 0x8002f0 <seconds+0x2>
     33e:	b0 91 f1 02 	lds	r27, 0x02F1	; 0x8002f1 <seconds+0x3>
     342:	01 96       	adiw	r24, 0x01	; 1
     344:	a1 1d       	adc	r26, r1
     346:	b1 1d       	adc	r27, r1
     348:	80 93 ee 02 	sts	0x02EE, r24	; 0x8002ee <seconds>
     34c:	90 93 ef 02 	sts	0x02EF, r25	; 0x8002ef <seconds+0x1>
     350:	a0 93 f0 02 	sts	0x02F0, r26	; 0x8002f0 <seconds+0x2>
     354:	b0 93 f1 02 	sts	0x02F1, r27	; 0x8002f1 <seconds+0x3>
     358:	08 95       	ret

0000035a <clock_time>:
}
/*---------------------------------------------------------------------------*/
clock_time_t clock_time(void)
{
	return ticks;
     35a:	60 91 ea 02 	lds	r22, 0x02EA	; 0x8002ea <ticks>
     35e:	70 91 eb 02 	lds	r23, 0x02EB	; 0x8002eb <ticks+0x1>
     362:	80 91 ec 02 	lds	r24, 0x02EC	; 0x8002ec <ticks+0x2>
     366:	90 91 ed 02 	lds	r25, 0x02ED	; 0x8002ed <ticks+0x3>
}
     36a:	08 95       	ret

0000036c <update_time>:
/*---------------------------------------------------------------------------*/
clock_time_t
etimer_start_time(struct etimer *et)
{
  return et->timer.start;
}
     36c:	cf 92       	push	r12
     36e:	df 92       	push	r13
     370:	ef 92       	push	r14
     372:	ff 92       	push	r15
     374:	0f 93       	push	r16
     376:	1f 93       	push	r17
     378:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <timerlist>
     37c:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <timerlist+0x1>
     380:	89 2b       	or	r24, r25
     382:	49 f4       	brne	.+18     	; 0x396 <update_time+0x2a>
     384:	10 92 f2 02 	sts	0x02F2, r1	; 0x8002f2 <next_expiration>
     388:	10 92 f3 02 	sts	0x02F3, r1	; 0x8002f3 <next_expiration+0x1>
     38c:	10 92 f4 02 	sts	0x02F4, r1	; 0x8002f4 <next_expiration+0x2>
     390:	10 92 f5 02 	sts	0x02F5, r1	; 0x8002f5 <next_expiration+0x3>
     394:	44 c0       	rjmp	.+136    	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
     396:	e1 df       	rcall	.-62     	; 0x35a <clock_time>
     398:	6b 01       	movw	r12, r22
     39a:	7c 01       	movw	r14, r24
     39c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <timerlist>
     3a0:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <timerlist+0x1>
     3a4:	40 81       	ld	r20, Z
     3a6:	51 81       	ldd	r21, Z+1	; 0x01
     3a8:	62 81       	ldd	r22, Z+2	; 0x02
     3aa:	73 81       	ldd	r23, Z+3	; 0x03
     3ac:	84 81       	ldd	r24, Z+4	; 0x04
     3ae:	95 81       	ldd	r25, Z+5	; 0x05
     3b0:	a6 81       	ldd	r26, Z+6	; 0x06
     3b2:	b7 81       	ldd	r27, Z+7	; 0x07
     3b4:	48 0f       	add	r20, r24
     3b6:	59 1f       	adc	r21, r25
     3b8:	6a 1f       	adc	r22, r26
     3ba:	7b 1f       	adc	r23, r27
     3bc:	4c 19       	sub	r20, r12
     3be:	5d 09       	sbc	r21, r13
     3c0:	6e 09       	sbc	r22, r14
     3c2:	7f 09       	sbc	r23, r15
     3c4:	00 84       	ldd	r0, Z+8	; 0x08
     3c6:	f1 85       	ldd	r31, Z+9	; 0x09
     3c8:	e0 2d       	mov	r30, r0
     3ca:	30 97       	sbiw	r30, 0x00	; 0
     3cc:	e1 f0       	breq	.+56     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>
     3ce:	00 81       	ld	r16, Z
     3d0:	11 81       	ldd	r17, Z+1	; 0x01
     3d2:	22 81       	ldd	r18, Z+2	; 0x02
     3d4:	33 81       	ldd	r19, Z+3	; 0x03
     3d6:	84 81       	ldd	r24, Z+4	; 0x04
     3d8:	95 81       	ldd	r25, Z+5	; 0x05
     3da:	a6 81       	ldd	r26, Z+6	; 0x06
     3dc:	b7 81       	ldd	r27, Z+7	; 0x07
     3de:	80 0f       	add	r24, r16
     3e0:	91 1f       	adc	r25, r17
     3e2:	a2 1f       	adc	r26, r18
     3e4:	b3 1f       	adc	r27, r19
     3e6:	8c 19       	sub	r24, r12
     3e8:	9d 09       	sbc	r25, r13
     3ea:	ae 09       	sbc	r26, r14
     3ec:	bf 09       	sbc	r27, r15
     3ee:	84 17       	cp	r24, r20
     3f0:	95 07       	cpc	r25, r21
     3f2:	a6 07       	cpc	r26, r22
     3f4:	b7 07       	cpc	r27, r23
     3f6:	10 f4       	brcc	.+4      	; 0x3fc <update_time+0x90>
     3f8:	ac 01       	movw	r20, r24
     3fa:	bd 01       	movw	r22, r26
     3fc:	00 84       	ldd	r0, Z+8	; 0x08
     3fe:	f1 85       	ldd	r31, Z+9	; 0x09
     400:	e0 2d       	mov	r30, r0
     402:	30 97       	sbiw	r30, 0x00	; 0
     404:	21 f7       	brne	.-56     	; 0x3ce <update_time+0x62>
     406:	4c 0d       	add	r20, r12
     408:	5d 1d       	adc	r21, r13
     40a:	6e 1d       	adc	r22, r14
     40c:	7f 1d       	adc	r23, r15
     40e:	40 93 f2 02 	sts	0x02F2, r20	; 0x8002f2 <next_expiration>
     412:	50 93 f3 02 	sts	0x02F3, r21	; 0x8002f3 <next_expiration+0x1>
     416:	60 93 f4 02 	sts	0x02F4, r22	; 0x8002f4 <next_expiration+0x2>
     41a:	70 93 f5 02 	sts	0x02F5, r23	; 0x8002f5 <next_expiration+0x3>
     41e:	1f 91       	pop	r17
     420:	0f 91       	pop	r16
     422:	ff 90       	pop	r15
     424:	ef 90       	pop	r14
     426:	df 90       	pop	r13
     428:	cf 90       	pop	r12
     42a:	08 95       	ret

0000042c <etimer_request_poll>:
     42c:	8d e3       	ldi	r24, 0x3D	; 61
     42e:	91 e0       	ldi	r25, 0x01	; 1
     430:	6b c2       	rjmp	.+1238   	; 0x908 <process_poll>
     432:	08 95       	ret

00000434 <process_thread_etimer_process>:
     434:	cf 92       	push	r12
     436:	df 92       	push	r13
     438:	ef 92       	push	r14
     43a:	ff 92       	push	r15
     43c:	0f 93       	push	r16
     43e:	1f 93       	push	r17
     440:	cf 93       	push	r28
     442:	df 93       	push	r29
     444:	8c 01       	movw	r16, r24
     446:	fc 01       	movw	r30, r24
     448:	80 81       	ld	r24, Z
     44a:	91 81       	ldd	r25, Z+1	; 0x01
     44c:	00 97       	sbiw	r24, 0x00	; 0
     44e:	19 f0       	breq	.+6      	; 0x456 <process_thread_etimer_process+0x22>
     450:	c1 97       	sbiw	r24, 0x31	; 49
     452:	61 f0       	breq	.+24     	; 0x46c <process_thread_etimer_process+0x38>
     454:	76 c0       	rjmp	.+236    	; 0x542 <process_thread_etimer_process+0x10e>
     456:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <timerlist+0x1>
     45a:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <timerlist>
     45e:	81 e3       	ldi	r24, 0x31	; 49
     460:	90 e0       	ldi	r25, 0x00	; 0
     462:	f8 01       	movw	r30, r16
     464:	91 83       	std	Z+1, r25	; 0x01
     466:	80 83       	st	Z, r24
     468:	81 e0       	ldi	r24, 0x01	; 1
     46a:	6f c0       	rjmp	.+222    	; 0x54a <process_thread_etimer_process+0x116>
     46c:	67 38       	cpi	r22, 0x87	; 135
     46e:	99 f5       	brne	.+102    	; 0x4d6 <process_thread_etimer_process+0xa2>
     470:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <timerlist>
     474:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <timerlist+0x1>
     478:	30 97       	sbiw	r30, 0x00	; 0
     47a:	89 f3       	breq	.-30     	; 0x45e <process_thread_etimer_process+0x2a>
     47c:	82 85       	ldd	r24, Z+10	; 0x0a
     47e:	93 85       	ldd	r25, Z+11	; 0x0b
     480:	48 17       	cp	r20, r24
     482:	59 07       	cpc	r21, r25
     484:	19 f5       	brne	.+70     	; 0x4cc <process_thread_etimer_process+0x98>
     486:	00 84       	ldd	r0, Z+8	; 0x08
     488:	f1 85       	ldd	r31, Z+9	; 0x09
     48a:	e0 2d       	mov	r30, r0
     48c:	30 97       	sbiw	r30, 0x00	; 0
     48e:	29 f4       	brne	.+10     	; 0x49a <process_thread_etimer_process+0x66>
     490:	10 92 f7 02 	sts	0x02F7, r1	; 0x8002f7 <timerlist+0x1>
     494:	10 92 f6 02 	sts	0x02F6, r1	; 0x8002f6 <timerlist>
     498:	e2 cf       	rjmp	.-60     	; 0x45e <process_thread_etimer_process+0x2a>
     49a:	82 85       	ldd	r24, Z+10	; 0x0a
     49c:	93 85       	ldd	r25, Z+11	; 0x0b
     49e:	48 17       	cp	r20, r24
     4a0:	59 07       	cpc	r21, r25
     4a2:	89 f3       	breq	.-30     	; 0x486 <process_thread_etimer_process+0x52>
     4a4:	f0 93 f7 02 	sts	0x02F7, r31	; 0x8002f7 <timerlist+0x1>
     4a8:	e0 93 f6 02 	sts	0x02F6, r30	; 0x8002f6 <timerlist>
     4ac:	0f c0       	rjmp	.+30     	; 0x4cc <process_thread_etimer_process+0x98>
     4ae:	1a 96       	adiw	r26, 0x0a	; 10
     4b0:	8d 91       	ld	r24, X+
     4b2:	9c 91       	ld	r25, X
     4b4:	1b 97       	sbiw	r26, 0x0b	; 11
     4b6:	48 17       	cp	r20, r24
     4b8:	59 07       	cpc	r21, r25
     4ba:	39 f4       	brne	.+14     	; 0x4ca <process_thread_etimer_process+0x96>
     4bc:	18 96       	adiw	r26, 0x08	; 8
     4be:	8d 91       	ld	r24, X+
     4c0:	9c 91       	ld	r25, X
     4c2:	19 97       	sbiw	r26, 0x09	; 9
     4c4:	91 87       	std	Z+9, r25	; 0x09
     4c6:	80 87       	std	Z+8, r24	; 0x08
     4c8:	01 c0       	rjmp	.+2      	; 0x4cc <process_thread_etimer_process+0x98>
     4ca:	fd 01       	movw	r30, r26
     4cc:	a0 85       	ldd	r26, Z+8	; 0x08
     4ce:	b1 85       	ldd	r27, Z+9	; 0x09
     4d0:	10 97       	sbiw	r26, 0x00	; 0
     4d2:	69 f7       	brne	.-38     	; 0x4ae <process_thread_etimer_process+0x7a>
     4d4:	c4 cf       	rjmp	.-120    	; 0x45e <process_thread_etimer_process+0x2a>
     4d6:	62 38       	cpi	r22, 0x82	; 130
     4d8:	11 f6       	brne	.-124    	; 0x45e <process_thread_etimer_process+0x2a>
     4da:	c1 2c       	mov	r12, r1
     4dc:	d1 2c       	mov	r13, r1
     4de:	c0 91 f6 02 	lds	r28, 0x02F6	; 0x8002f6 <timerlist>
     4e2:	d0 91 f7 02 	lds	r29, 0x02F7	; 0x8002f7 <timerlist+0x1>
     4e6:	20 97       	sbiw	r28, 0x00	; 0
     4e8:	09 f4       	brne	.+2      	; 0x4ec <process_thread_etimer_process+0xb8>
     4ea:	b9 cf       	rjmp	.-142    	; 0x45e <process_thread_etimer_process+0x2a>
     4ec:	ec 2c       	mov	r14, r12
     4ee:	fd 2c       	mov	r15, r13
     4f0:	01 c0       	rjmp	.+2      	; 0x4f4 <process_thread_etimer_process+0xc0>
     4f2:	ec 01       	movw	r28, r24
     4f4:	ce 01       	movw	r24, r28
     4f6:	23 d2       	rcall	.+1094   	; 0x93e <timer_expired>
     4f8:	89 2b       	or	r24, r25
     4fa:	e9 f0       	breq	.+58     	; 0x536 <process_thread_etimer_process+0x102>
     4fc:	ae 01       	movw	r20, r28
     4fe:	68 e8       	ldi	r22, 0x88	; 136
     500:	8a 85       	ldd	r24, Y+10	; 0x0a
     502:	9b 85       	ldd	r25, Y+11	; 0x0b
     504:	ae d1       	rcall	.+860    	; 0x862 <process_post>
     506:	89 2b       	or	r24, r25
     508:	a9 f4       	brne	.+42     	; 0x534 <process_thread_etimer_process+0x100>
     50a:	1b 86       	std	Y+11, r1	; 0x0b
     50c:	1a 86       	std	Y+10, r1	; 0x0a
     50e:	e1 14       	cp	r14, r1
     510:	f1 04       	cpc	r15, r1
     512:	31 f0       	breq	.+12     	; 0x520 <process_thread_etimer_process+0xec>
     514:	88 85       	ldd	r24, Y+8	; 0x08
     516:	99 85       	ldd	r25, Y+9	; 0x09
     518:	f7 01       	movw	r30, r14
     51a:	91 87       	std	Z+9, r25	; 0x09
     51c:	80 87       	std	Z+8, r24	; 0x08
     51e:	06 c0       	rjmp	.+12     	; 0x52c <process_thread_etimer_process+0xf8>
     520:	88 85       	ldd	r24, Y+8	; 0x08
     522:	99 85       	ldd	r25, Y+9	; 0x09
     524:	90 93 f7 02 	sts	0x02F7, r25	; 0x8002f7 <timerlist+0x1>
     528:	80 93 f6 02 	sts	0x02F6, r24	; 0x8002f6 <timerlist>
     52c:	19 86       	std	Y+9, r1	; 0x09
     52e:	18 86       	std	Y+8, r1	; 0x08
     530:	1d df       	rcall	.-454    	; 0x36c <update_time>
     532:	d5 cf       	rjmp	.-86     	; 0x4de <process_thread_etimer_process+0xaa>
     534:	7b df       	rcall	.-266    	; 0x42c <etimer_request_poll>
     536:	88 85       	ldd	r24, Y+8	; 0x08
     538:	99 85       	ldd	r25, Y+9	; 0x09
     53a:	7e 01       	movw	r14, r28
     53c:	00 97       	sbiw	r24, 0x00	; 0
     53e:	c9 f6       	brne	.-78     	; 0x4f2 <process_thread_etimer_process+0xbe>
     540:	8e cf       	rjmp	.-228    	; 0x45e <process_thread_etimer_process+0x2a>
     542:	f8 01       	movw	r30, r16
     544:	11 82       	std	Z+1, r1	; 0x01
     546:	10 82       	st	Z, r1
     548:	83 e0       	ldi	r24, 0x03	; 3
     54a:	df 91       	pop	r29
     54c:	cf 91       	pop	r28
     54e:	1f 91       	pop	r17
     550:	0f 91       	pop	r16
     552:	ff 90       	pop	r15
     554:	ef 90       	pop	r14
     556:	df 90       	pop	r13
     558:	cf 90       	pop	r12
     55a:	08 95       	ret

0000055c <add_timer>:
     55c:	cf 93       	push	r28
     55e:	df 93       	push	r29
     560:	ec 01       	movw	r28, r24
     562:	64 df       	rcall	.-312    	; 0x42c <etimer_request_poll>
     564:	8a 85       	ldd	r24, Y+10	; 0x0a
     566:	9b 85       	ldd	r25, Y+11	; 0x0b
     568:	89 2b       	or	r24, r25
     56a:	d1 f0       	breq	.+52     	; 0x5a0 <add_timer+0x44>
     56c:	e0 91 f6 02 	lds	r30, 0x02F6	; 0x8002f6 <timerlist>
     570:	f0 91 f7 02 	lds	r31, 0x02F7	; 0x8002f7 <timerlist+0x1>
     574:	30 97       	sbiw	r30, 0x00	; 0
     576:	a1 f0       	breq	.+40     	; 0x5a0 <add_timer+0x44>
     578:	ce 17       	cp	r28, r30
     57a:	df 07       	cpc	r29, r31
     57c:	61 f4       	brne	.+24     	; 0x596 <add_timer+0x3a>
     57e:	03 c0       	rjmp	.+6      	; 0x586 <add_timer+0x2a>
     580:	ce 17       	cp	r28, r30
     582:	df 07       	cpc	r29, r31
     584:	41 f4       	brne	.+16     	; 0x596 <add_timer+0x3a>
     586:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <process_current>
     58a:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <process_current+0x1>
     58e:	9b 87       	std	Y+11, r25	; 0x0b
     590:	8a 87       	std	Y+10, r24	; 0x0a
     592:	ec de       	rcall	.-552    	; 0x36c <update_time>
     594:	16 c0       	rjmp	.+44     	; 0x5c2 <add_timer+0x66>
     596:	00 84       	ldd	r0, Z+8	; 0x08
     598:	f1 85       	ldd	r31, Z+9	; 0x09
     59a:	e0 2d       	mov	r30, r0
     59c:	30 97       	sbiw	r30, 0x00	; 0
     59e:	81 f7       	brne	.-32     	; 0x580 <add_timer+0x24>
     5a0:	80 91 9c 03 	lds	r24, 0x039C	; 0x80039c <process_current>
     5a4:	90 91 9d 03 	lds	r25, 0x039D	; 0x80039d <process_current+0x1>
     5a8:	9b 87       	std	Y+11, r25	; 0x0b
     5aa:	8a 87       	std	Y+10, r24	; 0x0a
     5ac:	80 91 f6 02 	lds	r24, 0x02F6	; 0x8002f6 <timerlist>
     5b0:	90 91 f7 02 	lds	r25, 0x02F7	; 0x8002f7 <timerlist+0x1>
     5b4:	99 87       	std	Y+9, r25	; 0x09
     5b6:	88 87       	std	Y+8, r24	; 0x08
     5b8:	d0 93 f7 02 	sts	0x02F7, r29	; 0x8002f7 <timerlist+0x1>
     5bc:	c0 93 f6 02 	sts	0x02F6, r28	; 0x8002f6 <timerlist>
     5c0:	d5 de       	rcall	.-598    	; 0x36c <update_time>
     5c2:	df 91       	pop	r29
     5c4:	cf 91       	pop	r28
     5c6:	08 95       	ret

000005c8 <etimer_set>:
     5c8:	cf 93       	push	r28
     5ca:	df 93       	push	r29
     5cc:	ec 01       	movw	r28, r24
     5ce:	a8 d1       	rcall	.+848    	; 0x920 <timer_set>
     5d0:	ce 01       	movw	r24, r28
     5d2:	c4 df       	rcall	.-120    	; 0x55c <add_timer>
     5d4:	df 91       	pop	r29
     5d6:	cf 91       	pop	r28
     5d8:	08 95       	ret

000005da <etimer_pending>:
/*---------------------------------------------------------------------------*/
int
etimer_pending(void)
{
  return timerlist != NULL;
     5da:	81 e0       	ldi	r24, 0x01	; 1
     5dc:	90 e0       	ldi	r25, 0x00	; 0
     5de:	20 91 f6 02 	lds	r18, 0x02F6	; 0x8002f6 <timerlist>
     5e2:	30 91 f7 02 	lds	r19, 0x02F7	; 0x8002f7 <timerlist+0x1>
     5e6:	23 2b       	or	r18, r19
     5e8:	11 f4       	brne	.+4      	; 0x5ee <etimer_pending+0x14>
     5ea:	80 e0       	ldi	r24, 0x00	; 0
     5ec:	90 e0       	ldi	r25, 0x00	; 0
}
     5ee:	08 95       	ret

000005f0 <exit_process>:
}
/*---------------------------------------------------------------------------*/
int process_nevents(void) // iþlem sayýsý sorgulama fonk.
{
    return nevents + poll_requested; // çalýþan iþlem sayýsý ve poll varsa +1 olarak sayýsý geri döndürülür
}
     5f0:	cf 92       	push	r12
     5f2:	df 92       	push	r13
     5f4:	ef 92       	push	r14
     5f6:	ff 92       	push	r15
     5f8:	0f 93       	push	r16
     5fa:	1f 93       	push	r17
     5fc:	cf 93       	push	r28
     5fe:	df 93       	push	r29
     600:	00 91 9c 03 	lds	r16, 0x039C	; 0x80039c <process_current>
     604:	10 91 9d 03 	lds	r17, 0x039D	; 0x80039d <process_current+0x1>
     608:	e0 90 9e 03 	lds	r14, 0x039E	; 0x80039e <process_list>
     60c:	f0 90 9f 03 	lds	r15, 0x039F	; 0x80039f <process_list+0x1>
     610:	e8 16       	cp	r14, r24
     612:	f9 06       	cpc	r15, r25
     614:	71 f0       	breq	.+28     	; 0x632 <exit_process+0x42>
     616:	e1 14       	cp	r14, r1
     618:	f1 04       	cpc	r15, r1
     61a:	09 f4       	brne	.+2      	; 0x61e <exit_process+0x2e>
     61c:	5f c0       	rjmp	.+190    	; 0x6dc <exit_process+0xec>
     61e:	f7 01       	movw	r30, r14
     620:	01 90       	ld	r0, Z+
     622:	f0 81       	ld	r31, Z
     624:	e0 2d       	mov	r30, r0
     626:	8e 17       	cp	r24, r30
     628:	9f 07       	cpc	r25, r31
     62a:	21 f0       	breq	.+8      	; 0x634 <exit_process+0x44>
     62c:	30 97       	sbiw	r30, 0x00	; 0
     62e:	c1 f7       	brne	.-16     	; 0x620 <exit_process+0x30>
     630:	55 c0       	rjmp	.+170    	; 0x6dc <exit_process+0xec>
     632:	fc 01       	movw	r30, r24
     634:	ef 2b       	or	r30, r31
     636:	09 f4       	brne	.+2      	; 0x63a <exit_process+0x4a>
     638:	51 c0       	rjmp	.+162    	; 0x6dc <exit_process+0xec>
     63a:	6b 01       	movw	r12, r22
     63c:	ec 01       	movw	r28, r24
     63e:	88 85       	ldd	r24, Y+8	; 0x08
     640:	88 23       	and	r24, r24
     642:	11 f1       	breq	.+68     	; 0x688 <exit_process+0x98>
     644:	18 86       	std	Y+8, r1	; 0x08
     646:	e1 14       	cp	r14, r1
     648:	f1 04       	cpc	r15, r1
     64a:	69 f0       	breq	.+26     	; 0x666 <exit_process+0x76>
     64c:	ce 15       	cp	r28, r14
     64e:	df 05       	cpc	r29, r15
     650:	21 f0       	breq	.+8      	; 0x65a <exit_process+0x6a>
     652:	ae 01       	movw	r20, r28
     654:	67 e8       	ldi	r22, 0x87	; 135
     656:	c7 01       	movw	r24, r14
     658:	4a d0       	rcall	.+148    	; 0x6ee <call_process>
     65a:	f7 01       	movw	r30, r14
     65c:	e0 80       	ld	r14, Z
     65e:	f1 80       	ldd	r15, Z+1	; 0x01
     660:	e1 14       	cp	r14, r1
     662:	f1 04       	cpc	r15, r1
     664:	99 f7       	brne	.-26     	; 0x64c <exit_process+0x5c>
     666:	ec 81       	ldd	r30, Y+4	; 0x04
     668:	fd 81       	ldd	r31, Y+5	; 0x05
     66a:	30 97       	sbiw	r30, 0x00	; 0
     66c:	69 f0       	breq	.+26     	; 0x688 <exit_process+0x98>
     66e:	cc 15       	cp	r28, r12
     670:	dd 05       	cpc	r29, r13
     672:	51 f0       	breq	.+20     	; 0x688 <exit_process+0x98>
     674:	d0 93 9d 03 	sts	0x039D, r29	; 0x80039d <process_current+0x1>
     678:	c0 93 9c 03 	sts	0x039C, r28	; 0x80039c <process_current>
     67c:	40 e0       	ldi	r20, 0x00	; 0
     67e:	50 e0       	ldi	r21, 0x00	; 0
     680:	63 e8       	ldi	r22, 0x83	; 131
     682:	ce 01       	movw	r24, r28
     684:	06 96       	adiw	r24, 0x06	; 6
     686:	09 95       	icall
     688:	a0 91 9e 03 	lds	r26, 0x039E	; 0x80039e <process_list>
     68c:	b0 91 9f 03 	lds	r27, 0x039F	; 0x80039f <process_list+0x1>
     690:	ca 17       	cp	r28, r26
     692:	db 07       	cpc	r29, r27
     694:	b1 f4       	brne	.+44     	; 0x6c2 <exit_process+0xd2>
     696:	88 81       	ld	r24, Y
     698:	99 81       	ldd	r25, Y+1	; 0x01
     69a:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <process_list+0x1>
     69e:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <process_list>
     6a2:	18 c0       	rjmp	.+48     	; 0x6d4 <exit_process+0xe4>
     6a4:	80 81       	ld	r24, Z
     6a6:	91 81       	ldd	r25, Z+1	; 0x01
     6a8:	c8 17       	cp	r28, r24
     6aa:	d9 07       	cpc	r29, r25
     6ac:	29 f0       	breq	.+10     	; 0x6b8 <exit_process+0xc8>
     6ae:	fc 01       	movw	r30, r24
     6b0:	30 97       	sbiw	r30, 0x00	; 0
     6b2:	c1 f7       	brne	.-16     	; 0x6a4 <exit_process+0xb4>
     6b4:	0f c0       	rjmp	.+30     	; 0x6d4 <exit_process+0xe4>
     6b6:	fd 01       	movw	r30, r26
     6b8:	88 81       	ld	r24, Y
     6ba:	99 81       	ldd	r25, Y+1	; 0x01
     6bc:	91 83       	std	Z+1, r25	; 0x01
     6be:	80 83       	st	Z, r24
     6c0:	09 c0       	rjmp	.+18     	; 0x6d4 <exit_process+0xe4>
     6c2:	10 97       	sbiw	r26, 0x00	; 0
     6c4:	39 f0       	breq	.+14     	; 0x6d4 <exit_process+0xe4>
     6c6:	ed 91       	ld	r30, X+
     6c8:	fc 91       	ld	r31, X
     6ca:	11 97       	sbiw	r26, 0x01	; 1
     6cc:	ce 17       	cp	r28, r30
     6ce:	df 07       	cpc	r29, r31
     6d0:	79 f7       	brne	.-34     	; 0x6b0 <exit_process+0xc0>
     6d2:	f1 cf       	rjmp	.-30     	; 0x6b6 <exit_process+0xc6>
     6d4:	10 93 9d 03 	sts	0x039D, r17	; 0x80039d <process_current+0x1>
     6d8:	00 93 9c 03 	sts	0x039C, r16	; 0x80039c <process_current>
     6dc:	df 91       	pop	r29
     6de:	cf 91       	pop	r28
     6e0:	1f 91       	pop	r17
     6e2:	0f 91       	pop	r16
     6e4:	ff 90       	pop	r15
     6e6:	ef 90       	pop	r14
     6e8:	df 90       	pop	r13
     6ea:	cf 90       	pop	r12
     6ec:	08 95       	ret

000006ee <call_process>:
     6ee:	1f 93       	push	r17
     6f0:	cf 93       	push	r28
     6f2:	df 93       	push	r29
     6f4:	dc 01       	movw	r26, r24
     6f6:	18 96       	adiw	r26, 0x08	; 8
     6f8:	2c 91       	ld	r18, X
     6fa:	18 97       	sbiw	r26, 0x08	; 8
     6fc:	20 ff       	sbrs	r18, 0
     6fe:	1f c0       	rjmp	.+62     	; 0x73e <call_process+0x50>
     700:	14 96       	adiw	r26, 0x04	; 4
     702:	ed 91       	ld	r30, X+
     704:	fc 91       	ld	r31, X
     706:	15 97       	sbiw	r26, 0x05	; 5
     708:	30 97       	sbiw	r30, 0x00	; 0
     70a:	c9 f0       	breq	.+50     	; 0x73e <call_process+0x50>
     70c:	16 2f       	mov	r17, r22
     70e:	ec 01       	movw	r28, r24
     710:	90 93 9d 03 	sts	0x039D, r25	; 0x80039d <process_current+0x1>
     714:	80 93 9c 03 	sts	0x039C, r24	; 0x80039c <process_current>
     718:	82 e0       	ldi	r24, 0x02	; 2
     71a:	88 87       	std	Y+8, r24	; 0x08
     71c:	cd 01       	movw	r24, r26
     71e:	06 96       	adiw	r24, 0x06	; 6
     720:	09 95       	icall
     722:	08 2e       	mov	r0, r24
     724:	00 0c       	add	r0, r0
     726:	99 0b       	sbc	r25, r25
     728:	02 97       	sbiw	r24, 0x02	; 2
     72a:	02 97       	sbiw	r24, 0x02	; 2
     72c:	10 f0       	brcs	.+4      	; 0x732 <call_process+0x44>
     72e:	13 38       	cpi	r17, 0x83	; 131
     730:	21 f4       	brne	.+8      	; 0x73a <call_process+0x4c>
     732:	be 01       	movw	r22, r28
     734:	ce 01       	movw	r24, r28
     736:	5c df       	rcall	.-328    	; 0x5f0 <exit_process>
     738:	02 c0       	rjmp	.+4      	; 0x73e <call_process+0x50>
     73a:	81 e0       	ldi	r24, 0x01	; 1
     73c:	88 87       	std	Y+8, r24	; 0x08
     73e:	df 91       	pop	r29
     740:	cf 91       	pop	r28
     742:	1f 91       	pop	r17
     744:	08 95       	ret

00000746 <do_poll>:
     746:	1f 93       	push	r17
     748:	cf 93       	push	r28
     74a:	df 93       	push	r29
     74c:	10 92 f8 02 	sts	0x02F8, r1	; 0x8002f8 <poll_requested>
     750:	c0 91 9e 03 	lds	r28, 0x039E	; 0x80039e <process_list>
     754:	d0 91 9f 03 	lds	r29, 0x039F	; 0x80039f <process_list+0x1>
     758:	20 97       	sbiw	r28, 0x00	; 0
     75a:	81 f0       	breq	.+32     	; 0x77c <do_poll+0x36>
     75c:	11 e0       	ldi	r17, 0x01	; 1
     75e:	89 85       	ldd	r24, Y+9	; 0x09
     760:	88 23       	and	r24, r24
     762:	39 f0       	breq	.+14     	; 0x772 <do_poll+0x2c>
     764:	18 87       	std	Y+8, r17	; 0x08
     766:	19 86       	std	Y+9, r1	; 0x09
     768:	40 e0       	ldi	r20, 0x00	; 0
     76a:	50 e0       	ldi	r21, 0x00	; 0
     76c:	62 e8       	ldi	r22, 0x82	; 130
     76e:	ce 01       	movw	r24, r28
     770:	be df       	rcall	.-132    	; 0x6ee <call_process>
     772:	09 90       	ld	r0, Y+
     774:	d8 81       	ld	r29, Y
     776:	c0 2d       	mov	r28, r0
     778:	20 97       	sbiw	r28, 0x00	; 0
     77a:	89 f7       	brne	.-30     	; 0x75e <do_poll+0x18>
     77c:	df 91       	pop	r29
     77e:	cf 91       	pop	r28
     780:	1f 91       	pop	r17
     782:	08 95       	ret

00000784 <process_init>:
     784:	8a e8       	ldi	r24, 0x8A	; 138
     786:	80 93 9b 03 	sts	0x039B, r24	; 0x80039b <lastevent>
     78a:	10 92 99 03 	sts	0x0399, r1	; 0x800399 <fevent>
     78e:	10 92 9a 03 	sts	0x039A, r1	; 0x80039a <nevents>
     792:	10 92 9f 03 	sts	0x039F, r1	; 0x80039f <process_list+0x1>
     796:	10 92 9e 03 	sts	0x039E, r1	; 0x80039e <process_list>
     79a:	10 92 9d 03 	sts	0x039D, r1	; 0x80039d <process_current+0x1>
     79e:	10 92 9c 03 	sts	0x039C, r1	; 0x80039c <process_current>
     7a2:	08 95       	ret

000007a4 <process_run>:
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	cf 93       	push	r28
     7ac:	df 93       	push	r29
     7ae:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <poll_requested>
     7b2:	81 11       	cpse	r24, r1
     7b4:	c8 df       	rcall	.-112    	; 0x746 <do_poll>
     7b6:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <nevents>
     7ba:	99 23       	and	r25, r25
     7bc:	09 f4       	brne	.+2      	; 0x7c0 <process_run+0x1c>
     7be:	44 c0       	rjmp	.+136    	; 0x848 <process_run+0xa4>
     7c0:	20 91 99 03 	lds	r18, 0x0399	; 0x800399 <fevent>
     7c4:	30 e0       	ldi	r19, 0x00	; 0
     7c6:	f9 01       	movw	r30, r18
     7c8:	ee 0f       	add	r30, r30
     7ca:	ff 1f       	adc	r31, r31
     7cc:	ee 0f       	add	r30, r30
     7ce:	ff 1f       	adc	r31, r31
     7d0:	e2 0f       	add	r30, r18
     7d2:	f3 1f       	adc	r31, r19
     7d4:	e7 50       	subi	r30, 0x07	; 7
     7d6:	fd 4f       	sbci	r31, 0xFD	; 253
     7d8:	f0 80       	ld	r15, Z
     7da:	c1 81       	ldd	r28, Z+1	; 0x01
     7dc:	d2 81       	ldd	r29, Z+2	; 0x02
     7de:	03 80       	ldd	r0, Z+3	; 0x03
     7e0:	f4 81       	ldd	r31, Z+4	; 0x04
     7e2:	e0 2d       	mov	r30, r0
     7e4:	2f 5f       	subi	r18, 0xFF	; 255
     7e6:	3f 4f       	sbci	r19, 0xFF	; 255
     7e8:	2f 71       	andi	r18, 0x1F	; 31
     7ea:	30 78       	andi	r19, 0x80	; 128
     7ec:	33 23       	and	r19, r19
     7ee:	34 f4       	brge	.+12     	; 0x7fc <process_run+0x58>
     7f0:	21 50       	subi	r18, 0x01	; 1
     7f2:	31 09       	sbc	r19, r1
     7f4:	20 6e       	ori	r18, 0xE0	; 224
     7f6:	3f 6f       	ori	r19, 0xFF	; 255
     7f8:	2f 5f       	subi	r18, 0xFF	; 255
     7fa:	3f 4f       	sbci	r19, 0xFF	; 255
     7fc:	20 93 99 03 	sts	0x0399, r18	; 0x800399 <fevent>
     800:	91 50       	subi	r25, 0x01	; 1
     802:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <nevents>
     806:	30 97       	sbiw	r30, 0x00	; 0
     808:	b1 f4       	brne	.+44     	; 0x836 <process_run+0x92>
     80a:	00 91 9e 03 	lds	r16, 0x039E	; 0x80039e <process_list>
     80e:	10 91 9f 03 	lds	r17, 0x039F	; 0x80039f <process_list+0x1>
     812:	01 15       	cp	r16, r1
     814:	11 05       	cpc	r17, r1
     816:	c1 f0       	breq	.+48     	; 0x848 <process_run+0xa4>
     818:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <poll_requested>
     81c:	81 11       	cpse	r24, r1
     81e:	93 df       	rcall	.-218    	; 0x746 <do_poll>
     820:	ae 01       	movw	r20, r28
     822:	6f 2d       	mov	r22, r15
     824:	c8 01       	movw	r24, r16
     826:	63 df       	rcall	.-314    	; 0x6ee <call_process>
     828:	f8 01       	movw	r30, r16
     82a:	00 81       	ld	r16, Z
     82c:	11 81       	ldd	r17, Z+1	; 0x01
     82e:	01 15       	cp	r16, r1
     830:	11 05       	cpc	r17, r1
     832:	91 f7       	brne	.-28     	; 0x818 <process_run+0x74>
     834:	09 c0       	rjmp	.+18     	; 0x848 <process_run+0xa4>
     836:	81 e8       	ldi	r24, 0x81	; 129
     838:	f8 12       	cpse	r15, r24
     83a:	02 c0       	rjmp	.+4      	; 0x840 <process_run+0x9c>
     83c:	81 e0       	ldi	r24, 0x01	; 1
     83e:	80 87       	std	Z+8, r24	; 0x08
     840:	ae 01       	movw	r20, r28
     842:	6f 2d       	mov	r22, r15
     844:	cf 01       	movw	r24, r30
     846:	53 df       	rcall	.-346    	; 0x6ee <call_process>
     848:	80 91 f8 02 	lds	r24, 0x02F8	; 0x8002f8 <poll_requested>
     84c:	20 91 9a 03 	lds	r18, 0x039A	; 0x80039a <nevents>
     850:	90 e0       	ldi	r25, 0x00	; 0
     852:	82 0f       	add	r24, r18
     854:	91 1d       	adc	r25, r1
     856:	df 91       	pop	r29
     858:	cf 91       	pop	r28
     85a:	1f 91       	pop	r17
     85c:	0f 91       	pop	r16
     85e:	ff 90       	pop	r15
     860:	08 95       	ret

00000862 <process_post>:
/*---------------------------------------------------------------------------*/
int process_post(struct process *p, process_event_t ev, process_data_t data) // olay gönderim fonk.
{
     862:	9c 01       	movw	r18, r24
               PROCESS_NAME_STRING(PROCESS_CURRENT()), ev,
               p == PROCESS_BROADCAST? "<broadcast>": PROCESS_NAME_STRING(p), nevents);
    }
    //  eger sýradaki olay kuyruðunu max sayýya ulaþtýrdýysa ekrana bilgi verip çýkýlýr.
    // yapýlacak olay iþlemlerinde sayý sýnýrlamasý vardýr.
    if(nevents == PROCESS_CONF_NUMEVENTS)
     864:	90 91 9a 03 	lds	r25, 0x039A	; 0x80039a <nevents>
     868:	90 32       	cpi	r25, 0x20	; 32
     86a:	c9 f0       	breq	.+50     	; 0x89e <process_post+0x3c>
#endif /* DEBUG */
        return PROCESS_ERR_FULL;
    }
    // iþlem olay kuyruðuna giriliyor
    snum = (process_num_events_t)(fevent + nevents) % PROCESS_CONF_NUMEVENTS;
    events[snum].ev = ev;
     86c:	e0 91 99 03 	lds	r30, 0x0399	; 0x800399 <fevent>
     870:	e9 0f       	add	r30, r25
     872:	ef 71       	andi	r30, 0x1F	; 31
     874:	f0 e0       	ldi	r31, 0x00	; 0
     876:	df 01       	movw	r26, r30
     878:	aa 0f       	add	r26, r26
     87a:	bb 1f       	adc	r27, r27
     87c:	aa 0f       	add	r26, r26
     87e:	bb 1f       	adc	r27, r27
     880:	ea 0f       	add	r30, r26
     882:	fb 1f       	adc	r31, r27
     884:	e7 50       	subi	r30, 0x07	; 7
     886:	fd 4f       	sbci	r31, 0xFD	; 253
     888:	60 83       	st	Z, r22
    events[snum].data = data;
     88a:	52 83       	std	Z+2, r21	; 0x02
     88c:	41 83       	std	Z+1, r20	; 0x01
    events[snum].p = p;
     88e:	34 83       	std	Z+4, r19	; 0x04
     890:	23 83       	std	Z+3, r18	; 0x03
    // liste arttýrýlýyor.
    ++nevents;
     892:	9f 5f       	subi	r25, 0xFF	; 255
     894:	90 93 9a 03 	sts	0x039A, r25	; 0x80039a <nevents>
    {
        process_maxevents = nevents;
    }
#endif /* PROCESS_CONF_STATS */

    return PROCESS_ERR_OK;
     898:	80 e0       	ldi	r24, 0x00	; 0
     89a:	90 e0       	ldi	r25, 0x00	; 0
     89c:	08 95       	ret
        else
        {
            printf("soft panic: event queue is full when event %d was posted to %s from %s\n", ev, PROCESS_NAME_STRING(p), PROCESS_NAME_STRING(process_current));
        }
#endif /* DEBUG */
        return PROCESS_ERR_FULL;
     89e:	81 e0       	ldi	r24, 0x01	; 1
     8a0:	90 e0       	ldi	r25, 0x00	; 0
        process_maxevents = nevents;
    }
#endif /* PROCESS_CONF_STATS */

    return PROCESS_ERR_OK;
}
     8a2:	08 95       	ret

000008a4 <process_post_synch>:
/*---------------------------------------------------------------------------*/
void process_post_synch(struct process *p, process_event_t ev, process_data_t data)
{
     8a4:	cf 93       	push	r28
     8a6:	df 93       	push	r29
    struct process *caller = process_current; // temp bir structtanýmlanýyor
     8a8:	c0 91 9c 03 	lds	r28, 0x039C	; 0x80039c <process_current>
     8ac:	d0 91 9d 03 	lds	r29, 0x039D	; 0x80039d <process_current+0x1>
// yeni eklenen iþlem çalýþtýrýlýyor yada özel olarak tetikleniyor
    call_process(p, ev, data);
    // istenen iþlem çalýþtýrýldý artýk sistem listesinde kaldýðý iþten devam edebilir.
    process_current = caller;
     8b0:	1e df       	rcall	.-452    	; 0x6ee <call_process>
     8b2:	d0 93 9d 03 	sts	0x039D, r29	; 0x80039d <process_current+0x1>
     8b6:	c0 93 9c 03 	sts	0x039C, r28	; 0x80039c <process_current>
}
     8ba:	df 91       	pop	r29
     8bc:	cf 91       	pop	r28
     8be:	08 95       	ret

000008c0 <process_start>:
{
    struct process *q; // temp bir struct açýlýr

    // çalýþtýrýlmak istenen iþlem, listede zaten çalýþýyor mu diye kontrol ediliryor
    // listenin sonunda NULL olacaðý için iþlem listesi bitince döngüden çýkar
    for(q = process_list; q != p && q != NULL; q = q->next);
     8c0:	20 91 9e 03 	lds	r18, 0x039E	; 0x80039e <process_list>
     8c4:	30 91 9f 03 	lds	r19, 0x039F	; 0x80039f <process_list+0x1>
     8c8:	28 17       	cp	r18, r24
     8ca:	39 07       	cpc	r19, r25
     8cc:	e1 f0       	breq	.+56     	; 0x906 <__stack+0x7>
     8ce:	21 15       	cp	r18, r1
     8d0:	31 05       	cpc	r19, r1
     8d2:	49 f0       	breq	.+18     	; 0x8e6 <process_start+0x26>
     8d4:	f9 01       	movw	r30, r18
     8d6:	01 90       	ld	r0, Z+
     8d8:	f0 81       	ld	r31, Z
     8da:	e0 2d       	mov	r30, r0
     8dc:	8e 17       	cp	r24, r30
     8de:	9f 07       	cpc	r25, r31
     8e0:	91 f0       	breq	.+36     	; 0x906 <__stack+0x7>
     8e2:	30 97       	sbiw	r30, 0x00	; 0
     8e4:	c1 f7       	brne	.-16     	; 0x8d6 <process_start+0x16>

    // eðer iþlem zaten çalýþýyorsa çýkar
    if(q == p)
     8e6:	00 97       	sbiw	r24, 0x00	; 0
     8e8:	71 f0       	breq	.+28     	; 0x906 <__stack+0x7>
     8ea:	ab 01       	movw	r20, r22
     8ec:	fc 01       	movw	r30, r24
    {
        return;
    }
    // p->next artýk listenin sonunu iþaret ediyor ve Null dur listenin en baþýndaki iþlem en sonuna baðlanýr.
    p->next = process_list;
     8ee:	31 83       	std	Z+1, r19	; 0x01
     8f0:	20 83       	st	Z, r18
    // boþa çýkan liste baþý iþlemi yerine yeni çalýþtýrýlacak iþlem yüklenir.
    process_list = p;
     8f2:	90 93 9f 03 	sts	0x039F, r25	; 0x80039f <process_list+0x1>
     8f6:	80 93 9e 03 	sts	0x039E, r24	; 0x80039e <process_list>
    // durumu koþar olarak deðiþtirilir.
    p->state = PROCESS_STATE_RUNNING;
     8fa:	21 e0       	ldi	r18, 0x01	; 1
     8fc:	20 87       	std	Z+8, r18	; 0x08
    // PT nin switch case deðeri sýfýrlanýr.
    PT_INIT(&p->pt);
     8fe:	17 82       	std	Z+7, r1	; 0x07
     900:	16 82       	std	Z+6, r1	; 0x06
    PRINTF("process: starting '%s'\n", PROCESS_NAME_STRING(p));

    // artýk iþlem listeye eklendi çalýþtýrýlmasý için post edilmesi gerekiyor.
    // iþlemin eventine ilk defa çalýþtýðý için kurulacak bilgisi giriliyor.
    // iþlemin datasý aynen aktarýlýyor.
    process_post_synch(p, PROCESS_EVENT_INIT, data);
     902:	61 e8       	ldi	r22, 0x81	; 129
     904:	cf cf       	rjmp	.-98     	; 0x8a4 <process_post_synch>
     906:	08 95       	ret

00000908 <process_poll>:
    // istenen iþlem çalýþtýrýldý artýk sistem listesinde kaldýðý iþten devam edebilir.
    process_current = caller;
}
/*---------------------------------------------------------------------------*/
void process_poll(struct process *p) // girilen iþlemi poll çalýþtýrma fonk.önden çalýþtýrma modu gibi kullanýlýr.
{
     908:	fc 01       	movw	r30, r24
    if(p != NULL)   // girilen iþlem boþ deðiþse girer.
     90a:	89 2b       	or	r24, r25
     90c:	41 f0       	breq	.+16     	; 0x91e <process_poll+0x16>
    {
        if(p->state == PROCESS_STATE_RUNNING ||
     90e:	90 85       	ldd	r25, Z+8	; 0x08
     910:	91 50       	subi	r25, 0x01	; 1
     912:	92 30       	cpi	r25, 0x02	; 2
     914:	20 f4       	brcc	.+8      	; 0x91e <process_poll+0x16>
                p->state == PROCESS_STATE_CALLED)
        {
            p->needspoll = 1; // iþleme poll komutu gir.
     916:	81 e0       	ldi	r24, 0x01	; 1
     918:	81 87       	std	Z+9, r24	; 0x09
            poll_requested = 1;// poll sorgusunu aç
     91a:	80 93 f8 02 	sts	0x02F8, r24	; 0x8002f8 <poll_requested>
     91e:	08 95       	ret

00000920 <timer_set>:
}
/*---------------------------------------------------------------------------*/
void timer_restart(struct timer *t)
{
  t->start = clock_time();
}
     920:	cf 93       	push	r28
     922:	df 93       	push	r29
     924:	ec 01       	movw	r28, r24
     926:	4c 83       	std	Y+4, r20	; 0x04
     928:	5d 83       	std	Y+5, r21	; 0x05
     92a:	6e 83       	std	Y+6, r22	; 0x06
     92c:	7f 83       	std	Y+7, r23	; 0x07
     92e:	15 dd       	rcall	.-1494   	; 0x35a <clock_time>
     930:	68 83       	st	Y, r22
     932:	79 83       	std	Y+1, r23	; 0x01
     934:	8a 83       	std	Y+2, r24	; 0x02
     936:	9b 83       	std	Y+3, r25	; 0x03
     938:	df 91       	pop	r29
     93a:	cf 91       	pop	r28
     93c:	08 95       	ret

0000093e <timer_expired>:
/*---------------------------------------------------------------------------*/
int timer_expired(struct timer *t)
{
     93e:	cf 92       	push	r12
     940:	df 92       	push	r13
     942:	ef 92       	push	r14
     944:	ff 92       	push	r15
     946:	cf 93       	push	r28
     948:	df 93       	push	r29
  /* Note: Can not return diff >= t->interval so we add 1 to diff and return
     t->interval < diff - required to avoid an internal error in mspgcc. */
  clock_time_t diff = (clock_time() - t->start) + 1;
     94a:	ec 01       	movw	r28, r24
  return t->interval < diff;
     94c:	06 dd       	rcall	.-1524   	; 0x35a <clock_time>
     94e:	c8 80       	ld	r12, Y
     950:	d9 80       	ldd	r13, Y+1	; 0x01
     952:	ea 80       	ldd	r14, Y+2	; 0x02
     954:	fb 80       	ldd	r15, Y+3	; 0x03
     956:	dc 01       	movw	r26, r24
     958:	cb 01       	movw	r24, r22
     95a:	8c 19       	sub	r24, r12
     95c:	9d 09       	sbc	r25, r13
     95e:	ae 09       	sbc	r26, r14
     960:	bf 09       	sbc	r27, r15
     962:	01 96       	adiw	r24, 0x01	; 1
     964:	a1 1d       	adc	r26, r1
     966:	b1 1d       	adc	r27, r1
     968:	21 e0       	ldi	r18, 0x01	; 1
     96a:	30 e0       	ldi	r19, 0x00	; 0
     96c:	cc 80       	ldd	r12, Y+4	; 0x04
     96e:	dd 80       	ldd	r13, Y+5	; 0x05
     970:	ee 80       	ldd	r14, Y+6	; 0x06
     972:	ff 80       	ldd	r15, Y+7	; 0x07
     974:	c8 16       	cp	r12, r24
     976:	d9 06       	cpc	r13, r25
     978:	ea 06       	cpc	r14, r26
     97a:	fb 06       	cpc	r15, r27
     97c:	10 f0       	brcs	.+4      	; 0x982 <timer_expired+0x44>
     97e:	20 e0       	ldi	r18, 0x00	; 0

}
     980:	30 e0       	ldi	r19, 0x00	; 0
     982:	c9 01       	movw	r24, r18
     984:	df 91       	pop	r29
     986:	cf 91       	pop	r28
     988:	ff 90       	pop	r15
     98a:	ef 90       	pop	r14
     98c:	df 90       	pop	r13
     98e:	cf 90       	pop	r12
     990:	08 95       	ret

00000992 <board_init>:
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     992:	88 b1       	in	r24, 0x08	; 8
     994:	8b 7f       	andi	r24, 0xFB	; 251
		}

		*((uint8_t *)port + 1) |= pin_mask;
     996:	97 b1       	in	r25, 0x07	; 7
     998:	94 60       	ori	r25, 0x04	; 4
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     99a:	2d 98       	cbi	0x05, 5	; 5
		}

		*((uint8_t *)port + 1) |= pin_mask;
     99c:	25 9a       	sbi	0x04, 5	; 4
     99e:	2a b1       	in	r18, 0x0a	; 10
	/* Select direction and initial pin state */
	if (flags & IOPORT_DIR_OUTPUT) {
		if (flags & IOPORT_INIT_HIGH) {
			*((uint8_t *)port + 2) |= pin_mask;
		} else {
			*((uint8_t *)port + 2) &= ~pin_mask;
     9a0:	3b b1       	in	r19, 0x0b	; 11
     9a2:	33 7f       	andi	r19, 0xF3	; 243
     9a4:	3b b9       	out	0x0b, r19	; 11
		}

		*((uint8_t *)port + 1) |= pin_mask;
     9a6:	2c 60       	ori	r18, 0x0C	; 12
     9a8:	2a b9       	out	0x0a, r18	; 10
	} else {
		*((uint8_t *)port + 1) &= ~pin_mask;
     9aa:	9c 7f       	andi	r25, 0xFC	; 252
     9ac:	97 b9       	out	0x07, r25	; 7
		if (flags & IOPORT_PULL_UP) {
			*((uint8_t *)port + 2) |= pin_mask;
     9ae:	83 60       	ori	r24, 0x03	; 3
     9b0:	88 b9       	out	0x08, r24	; 8
     9b2:	08 95       	ret

000009b4 <adp_protocol_add_byte>:
	adp_interface_transceive_procotol((uint8_t*)&msg_format, data_length, rx_buf);
	
	/* Wait for response and return status */
	adp_wait_for_response(MSG_CONF_ACK, &ack, 1);
	return (ack == ADP_ACK_OK);
}
     9b4:	2f 92       	push	r2
     9b6:	3f 92       	push	r3
     9b8:	4f 92       	push	r4
     9ba:	5f 92       	push	r5
     9bc:	6f 92       	push	r6
     9be:	7f 92       	push	r7
     9c0:	8f 92       	push	r8
     9c2:	9f 92       	push	r9
     9c4:	af 92       	push	r10
     9c6:	bf 92       	push	r11
     9c8:	cf 92       	push	r12
     9ca:	df 92       	push	r13
     9cc:	ef 92       	push	r14
     9ce:	ff 92       	push	r15
     9d0:	0f 93       	push	r16
     9d2:	1f 93       	push	r17
     9d4:	cf 93       	push	r28
     9d6:	df 93       	push	r29
     9d8:	b8 2e       	mov	r11, r24
     9da:	69 01       	movw	r12, r18
     9dc:	44 23       	and	r20, r20
     9de:	09 f4       	brne	.+2      	; 0x9e2 <adp_protocol_add_byte+0x2e>
     9e0:	b9 c0       	rjmp	.+370    	; 0xb54 <adp_protocol_add_byte+0x1a0>
     9e2:	50 90 a4 03 	lds	r5, 0x03A4	; 0x8003a4 <prev_data>
     9e6:	e0 90 a2 03 	lds	r14, 0x03A2	; 0x8003a2 <length_received>
     9ea:	f0 90 a3 03 	lds	r15, 0x03A3	; 0x8003a3 <length_received+0x1>
     9ee:	90 91 a1 03 	lds	r25, 0x03A1	; 0x8003a1 <rx_state>
     9f2:	90 90 a0 03 	lds	r9, 0x03A0	; 0x8003a0 <message_id.3484>
     9f6:	e0 91 a5 03 	lds	r30, 0x03A5	; 0x8003a5 <bytes_received>
     9fa:	f0 91 a6 03 	lds	r31, 0x03A6	; 0x8003a6 <bytes_received+0x1>
     9fe:	20 91 a7 03 	lds	r18, 0x03A7	; 0x8003a7 <packet_received>
     a02:	c0 91 47 01 	lds	r28, 0x0147	; 0x800147 <last_received_message_id>
     a06:	db 01       	movw	r26, r22
     a08:	41 50       	subi	r20, 0x01	; 1
     a0a:	50 e0       	ldi	r21, 0x00	; 0
     a0c:	4f 5f       	subi	r20, 0xFF	; 255
     a0e:	5f 4f       	sbci	r21, 0xFF	; 255
     a10:	64 0f       	add	r22, r20
     a12:	75 1f       	adc	r23, r21
     a14:	61 2c       	mov	r6, r1
     a16:	31 2c       	mov	r3, r1
     a18:	41 2c       	mov	r4, r1
     a1a:	21 2c       	mov	r2, r1
     a1c:	d0 e0       	ldi	r29, 0x00	; 0
     a1e:	a1 2c       	mov	r10, r1
     a20:	10 e0       	ldi	r17, 0x00	; 0
     a22:	31 e0       	ldi	r19, 0x01	; 1
     a24:	71 2c       	mov	r7, r1
     a26:	50 e0       	ldi	r21, 0x00	; 0
     a28:	68 94       	set
     a2a:	88 24       	eor	r8, r8
     a2c:	82 f8       	bld	r8, 2
     a2e:	45 2d       	mov	r20, r5
     a30:	8d 91       	ld	r24, X+
     a32:	95 30       	cpi	r25, 0x05	; 5
     a34:	09 f0       	breq	.+2      	; 0xa38 <adp_protocol_add_byte+0x84>
     a36:	90 c0       	rjmp	.+288    	; 0xb58 <adp_protocol_add_byte+0x1a4>
     a38:	8f 3f       	cpi	r24, 0xFF	; 255
     a3a:	b9 f4       	brne	.+46     	; 0xa6a <adp_protocol_add_byte+0xb6>
     a3c:	3b c0       	rjmp	.+118    	; 0xab4 <adp_protocol_add_byte+0x100>
     a3e:	8f 3f       	cpi	r24, 0xFF	; 255
     a40:	09 f0       	breq	.+2      	; 0xa44 <adp_protocol_add_byte+0x90>
     a42:	a8 c0       	rjmp	.+336    	; 0xb94 <adp_protocol_add_byte+0x1e0>
     a44:	c8 2f       	mov	r28, r24
     a46:	d3 2f       	mov	r29, r19
     a48:	a3 2e       	mov	r10, r19
     a4a:	25 2f       	mov	r18, r21
     a4c:	13 2f       	mov	r17, r19
     a4e:	93 2f       	mov	r25, r19
     a50:	3a c0       	rjmp	.+116    	; 0xac6 <adp_protocol_add_byte+0x112>
     a52:	8f 3f       	cpi	r24, 0xFF	; 255
     a54:	c1 f1       	breq	.+112    	; 0xac6 <adp_protocol_add_byte+0x112>
     a56:	98 2e       	mov	r9, r24
     a58:	23 2e       	mov	r2, r19
     a5a:	13 2f       	mov	r17, r19
     a5c:	92 e0       	ldi	r25, 0x02	; 2
     a5e:	33 c0       	rjmp	.+102    	; 0xac6 <adp_protocol_add_byte+0x112>
     a60:	8f 3f       	cpi	r24, 0xFF	; 255
     a62:	19 f4       	brne	.+6      	; 0xa6a <adp_protocol_add_byte+0xb6>
     a64:	4f 3f       	cpi	r20, 0xFF	; 255
     a66:	09 f0       	breq	.+2      	; 0xa6a <adp_protocol_add_byte+0xb6>
     a68:	9a c0       	rjmp	.+308    	; 0xb9e <adp_protocol_add_byte+0x1ea>
     a6a:	e8 2e       	mov	r14, r24
     a6c:	f1 2c       	mov	r15, r1
     a6e:	33 2e       	mov	r3, r19
     a70:	43 2e       	mov	r4, r19
     a72:	45 2f       	mov	r20, r21
     a74:	13 2f       	mov	r17, r19
     a76:	93 e0       	ldi	r25, 0x03	; 3
     a78:	26 c0       	rjmp	.+76     	; 0xac6 <adp_protocol_add_byte+0x112>
     a7a:	8f 3f       	cpi	r24, 0xFF	; 255
     a7c:	19 f4       	brne	.+6      	; 0xa84 <adp_protocol_add_byte+0xd0>
     a7e:	4f 3f       	cpi	r20, 0xFF	; 255
     a80:	09 f0       	breq	.+2      	; 0xa84 <adp_protocol_add_byte+0xd0>
     a82:	90 c0       	rjmp	.+288    	; 0xba4 <adp_protocol_add_byte+0x1f0>
     a84:	90 e0       	ldi	r25, 0x00	; 0
     a86:	98 2f       	mov	r25, r24
     a88:	88 27       	eor	r24, r24
     a8a:	e8 0e       	add	r14, r24
     a8c:	f9 1e       	adc	r15, r25
     a8e:	e1 14       	cp	r14, r1
     a90:	f1 04       	cpc	r15, r1
     a92:	09 f0       	breq	.+2      	; 0xa96 <adp_protocol_add_byte+0xe2>
     a94:	8a c0       	rjmp	.+276    	; 0xbaa <adp_protocol_add_byte+0x1f6>
     a96:	c9 2d       	mov	r28, r9
     a98:	33 2e       	mov	r3, r19
     a9a:	43 2e       	mov	r4, r19
     a9c:	45 2f       	mov	r20, r21
     a9e:	d3 2f       	mov	r29, r19
     aa0:	a3 2e       	mov	r10, r19
     aa2:	23 2f       	mov	r18, r19
     aa4:	13 2f       	mov	r17, r19
     aa6:	95 2f       	mov	r25, r21
     aa8:	0e c0       	rjmp	.+28     	; 0xac6 <adp_protocol_add_byte+0x112>
     aaa:	8f 3f       	cpi	r24, 0xFF	; 255
     aac:	19 f4       	brne	.+6      	; 0xab4 <adp_protocol_add_byte+0x100>
     aae:	94 30       	cpi	r25, 0x04	; 4
     ab0:	09 f4       	brne	.+2      	; 0xab4 <adp_protocol_add_byte+0x100>
     ab2:	84 c0       	rjmp	.+264    	; 0xbbc <adp_protocol_add_byte+0x208>
     ab4:	8f 01       	movw	r16, r30
     ab6:	0f 5f       	subi	r16, 0xFF	; 255
     ab8:	1f 4f       	sbci	r17, 0xFF	; 255
     aba:	0e 15       	cp	r16, r14
     abc:	1f 05       	cpc	r17, r15
     abe:	09 f4       	brne	.+2      	; 0xac2 <adp_protocol_add_byte+0x10e>
     ac0:	5d c0       	rjmp	.+186    	; 0xb7c <adp_protocol_add_byte+0x1c8>
     ac2:	98 2d       	mov	r25, r8
     ac4:	60 c0       	rjmp	.+192    	; 0xb86 <adp_protocol_add_byte+0x1d2>
     ac6:	30 97       	sbiw	r30, 0x00	; 0
     ac8:	19 f1       	breq	.+70     	; 0xb10 <adp_protocol_add_byte+0x15c>
     aca:	83 2f       	mov	r24, r19
     acc:	bc 12       	cpse	r11, r28
     ace:	85 2f       	mov	r24, r21
     ad0:	82 23       	and	r24, r18
     ad2:	f1 f0       	breq	.+60     	; 0xb10 <adp_protocol_add_byte+0x15c>
     ad4:	54 2e       	mov	r5, r20
     ad6:	11 11       	cpse	r17, r1
     ad8:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <rx_state>
     adc:	a1 10       	cpse	r10, r1
     ade:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <packet_received>
     ae2:	d1 11       	cpse	r29, r1
     ae4:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <last_received_message_id>
     ae8:	21 10       	cpse	r2, r1
     aea:	90 92 a0 03 	sts	0x03A0, r9	; 0x8003a0 <message_id.3484>
     aee:	41 10       	cpse	r4, r1
     af0:	50 92 a4 03 	sts	0x03A4, r5	; 0x8003a4 <prev_data>
     af4:	33 20       	and	r3, r3
     af6:	21 f0       	breq	.+8      	; 0xb00 <adp_protocol_add_byte+0x14c>
     af8:	f0 92 a3 03 	sts	0x03A3, r15	; 0x8003a3 <length_received+0x1>
     afc:	e0 92 a2 03 	sts	0x03A2, r14	; 0x8003a2 <length_received>
     b00:	66 20       	and	r6, r6
     b02:	09 f4       	brne	.+2      	; 0xb06 <adp_protocol_add_byte+0x152>
     b04:	5e c0       	rjmp	.+188    	; 0xbc2 <adp_protocol_add_byte+0x20e>
     b06:	f0 93 a6 03 	sts	0x03A6, r31	; 0x8003a6 <bytes_received+0x1>
     b0a:	e0 93 a5 03 	sts	0x03A5, r30	; 0x8003a5 <bytes_received>
     b0e:	59 c0       	rjmp	.+178    	; 0xbc2 <adp_protocol_add_byte+0x20e>
     b10:	a6 17       	cp	r26, r22
     b12:	b7 07       	cpc	r27, r23
     b14:	09 f0       	breq	.+2      	; 0xb18 <adp_protocol_add_byte+0x164>
     b16:	8c cf       	rjmp	.-232    	; 0xa30 <adp_protocol_add_byte+0x7c>
     b18:	54 2e       	mov	r5, r20
     b1a:	11 11       	cpse	r17, r1
     b1c:	90 93 a1 03 	sts	0x03A1, r25	; 0x8003a1 <rx_state>
     b20:	a1 10       	cpse	r10, r1
     b22:	20 93 a7 03 	sts	0x03A7, r18	; 0x8003a7 <packet_received>
     b26:	d1 11       	cpse	r29, r1
     b28:	c0 93 47 01 	sts	0x0147, r28	; 0x800147 <last_received_message_id>
     b2c:	21 10       	cpse	r2, r1
     b2e:	90 92 a0 03 	sts	0x03A0, r9	; 0x8003a0 <message_id.3484>
     b32:	41 10       	cpse	r4, r1
     b34:	50 92 a4 03 	sts	0x03A4, r5	; 0x8003a4 <prev_data>
     b38:	33 20       	and	r3, r3
     b3a:	21 f0       	breq	.+8      	; 0xb44 <adp_protocol_add_byte+0x190>
     b3c:	f0 92 a3 03 	sts	0x03A3, r15	; 0x8003a3 <length_received+0x1>
     b40:	e0 92 a2 03 	sts	0x03A2, r14	; 0x8003a2 <length_received>
     b44:	66 20       	and	r6, r6
     b46:	21 f0       	breq	.+8      	; 0xb50 <adp_protocol_add_byte+0x19c>
     b48:	f0 93 a6 03 	sts	0x03A6, r31	; 0x8003a6 <bytes_received+0x1>
     b4c:	e0 93 a5 03 	sts	0x03A5, r30	; 0x8003a5 <bytes_received>
     b50:	80 e0       	ldi	r24, 0x00	; 0
     b52:	37 c0       	rjmp	.+110    	; 0xbc2 <adp_protocol_add_byte+0x20e>
     b54:	80 e0       	ldi	r24, 0x00	; 0
     b56:	35 c0       	rjmp	.+106    	; 0xbc2 <adp_protocol_add_byte+0x20e>
     b58:	92 30       	cpi	r25, 0x02	; 2
     b5a:	09 f4       	brne	.+2      	; 0xb5e <adp_protocol_add_byte+0x1aa>
     b5c:	81 cf       	rjmp	.-254    	; 0xa60 <adp_protocol_add_byte+0xac>
     b5e:	38 f4       	brcc	.+14     	; 0xb6e <adp_protocol_add_byte+0x1ba>
     b60:	99 23       	and	r25, r25
     b62:	09 f4       	brne	.+2      	; 0xb66 <adp_protocol_add_byte+0x1b2>
     b64:	6c cf       	rjmp	.-296    	; 0xa3e <adp_protocol_add_byte+0x8a>
     b66:	91 30       	cpi	r25, 0x01	; 1
     b68:	09 f4       	brne	.+2      	; 0xb6c <adp_protocol_add_byte+0x1b8>
     b6a:	73 cf       	rjmp	.-282    	; 0xa52 <adp_protocol_add_byte+0x9e>
     b6c:	ac cf       	rjmp	.-168    	; 0xac6 <adp_protocol_add_byte+0x112>
     b6e:	93 30       	cpi	r25, 0x03	; 3
     b70:	09 f4       	brne	.+2      	; 0xb74 <adp_protocol_add_byte+0x1c0>
     b72:	83 cf       	rjmp	.-250    	; 0xa7a <adp_protocol_add_byte+0xc6>
     b74:	96 30       	cpi	r25, 0x06	; 6
     b76:	08 f4       	brcc	.+2      	; 0xb7a <adp_protocol_add_byte+0x1c6>
     b78:	98 cf       	rjmp	.-208    	; 0xaaa <adp_protocol_add_byte+0xf6>
     b7a:	a5 cf       	rjmp	.-182    	; 0xac6 <adp_protocol_add_byte+0x112>
     b7c:	c9 2d       	mov	r28, r9
     b7e:	d3 2f       	mov	r29, r19
     b80:	a3 2e       	mov	r10, r19
     b82:	23 2f       	mov	r18, r19
     b84:	95 2f       	mov	r25, r21
     b86:	ec 0d       	add	r30, r12
     b88:	fd 1d       	adc	r31, r13
     b8a:	80 83       	st	Z, r24
     b8c:	f8 01       	movw	r30, r16
     b8e:	63 2e       	mov	r6, r19
     b90:	13 2f       	mov	r17, r19
     b92:	99 cf       	rjmp	.-206    	; 0xac6 <adp_protocol_add_byte+0x112>
     b94:	d3 2f       	mov	r29, r19
     b96:	cf ef       	ldi	r28, 0xFF	; 255
     b98:	a3 2e       	mov	r10, r19
     b9a:	25 2f       	mov	r18, r21
     b9c:	94 cf       	rjmp	.-216    	; 0xac6 <adp_protocol_add_byte+0x112>
     b9e:	48 2f       	mov	r20, r24
     ba0:	43 2e       	mov	r4, r19
     ba2:	91 cf       	rjmp	.-222    	; 0xac6 <adp_protocol_add_byte+0x112>
     ba4:	48 2f       	mov	r20, r24
     ba6:	43 2e       	mov	r4, r19
     ba8:	8e cf       	rjmp	.-228    	; 0xac6 <adp_protocol_add_byte+0x112>
     baa:	63 2e       	mov	r6, r19
     bac:	e0 e0       	ldi	r30, 0x00	; 0
     bae:	f7 2d       	mov	r31, r7
     bb0:	33 2e       	mov	r3, r19
     bb2:	43 2e       	mov	r4, r19
     bb4:	45 2f       	mov	r20, r21
     bb6:	13 2f       	mov	r17, r19
     bb8:	98 2d       	mov	r25, r8
     bba:	85 cf       	rjmp	.-246    	; 0xac6 <adp_protocol_add_byte+0x112>
     bbc:	13 2f       	mov	r17, r19
     bbe:	95 e0       	ldi	r25, 0x05	; 5
     bc0:	82 cf       	rjmp	.-252    	; 0xac6 <adp_protocol_add_byte+0x112>
     bc2:	df 91       	pop	r29
     bc4:	cf 91       	pop	r28
     bc6:	1f 91       	pop	r17
     bc8:	0f 91       	pop	r16
     bca:	ff 90       	pop	r15
     bcc:	ef 90       	pop	r14
     bce:	df 90       	pop	r13
     bd0:	cf 90       	pop	r12
     bd2:	bf 90       	pop	r11
     bd4:	af 90       	pop	r10
     bd6:	9f 90       	pop	r9
     bd8:	8f 90       	pop	r8
     bda:	7f 90       	pop	r7
     bdc:	6f 90       	pop	r6
     bde:	5f 90       	pop	r5
     be0:	4f 90       	pop	r4
     be2:	3f 90       	pop	r3
     be4:	2f 90       	pop	r2
     be6:	08 95       	ret

00000be8 <adp_wait_for_response>:
     be8:	9f 92       	push	r9
     bea:	af 92       	push	r10
     bec:	bf 92       	push	r11
     bee:	cf 92       	push	r12
     bf0:	df 92       	push	r13
     bf2:	ef 92       	push	r14
     bf4:	ff 92       	push	r15
     bf6:	0f 93       	push	r16
     bf8:	1f 93       	push	r17
     bfa:	cf 93       	push	r28
     bfc:	df 93       	push	r29
     bfe:	cd b7       	in	r28, 0x3d	; 61
     c00:	de b7       	in	r29, 0x3e	; 62
     c02:	ce 5f       	subi	r28, 0xFE	; 254
     c04:	d1 09       	sbc	r29, r1
     c06:	0f b6       	in	r0, 0x3f	; 63
     c08:	f8 94       	cli
     c0a:	de bf       	out	0x3e, r29	; 62
     c0c:	0f be       	out	0x3f, r0	; 63
     c0e:	cd bf       	out	0x3d, r28	; 61
     c10:	98 2e       	mov	r9, r24
     c12:	6b 01       	movw	r12, r22
     c14:	fe 01       	movw	r30, r28
     c16:	31 96       	adiw	r30, 0x01	; 1
     c18:	8e ef       	ldi	r24, 0xFE	; 254
     c1a:	df 01       	movw	r26, r30
     c1c:	1d 92       	st	X+, r1
     c1e:	8a 95       	dec	r24
     c20:	e9 f7       	brne	.-6      	; 0xc1c <adp_wait_for_response+0x34>
     c22:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <packet_received>
     c26:	68 94       	set
     c28:	aa 24       	eor	r10, r10
     c2a:	a2 f8       	bld	r10, 2
     c2c:	a4 0e       	add	r10, r20
     c2e:	12 e3       	ldi	r17, 0x32	; 50
     c30:	b1 2c       	mov	r11, r1
     c32:	01 e0       	ldi	r16, 0x01	; 1
     c34:	ea 2c       	mov	r14, r10
     c36:	f1 2c       	mov	r15, r1
     c38:	0e c0       	rjmp	.+28     	; 0xc56 <adp_wait_for_response+0x6e>
     c3a:	b7 01       	movw	r22, r14
     c3c:	ce 01       	movw	r24, r28
     c3e:	01 96       	adiw	r24, 0x01	; 1
     c40:	82 d5       	rcall	.+2820   	; 0x1746 <adp_interface_read_response>
     c42:	81 11       	cpse	r24, r1
     c44:	07 c0       	rjmp	.+14     	; 0xc54 <adp_wait_for_response+0x6c>
     c46:	96 01       	movw	r18, r12
     c48:	4a 2d       	mov	r20, r10
     c4a:	be 01       	movw	r22, r28
     c4c:	6f 5f       	subi	r22, 0xFF	; 255
     c4e:	7f 4f       	sbci	r23, 0xFF	; 255
     c50:	89 2d       	mov	r24, r9
     c52:	b0 de       	rcall	.-672    	; 0x9b4 <adp_protocol_add_byte>
     c54:	11 50       	subi	r17, 0x01	; 1
     c56:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <bytes_received>
     c5a:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <bytes_received+0x1>
     c5e:	89 2b       	or	r24, r25
     c60:	19 f0       	breq	.+6      	; 0xc68 <adp_wait_for_response+0x80>
     c62:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <packet_received>
     c66:	01 c0       	rjmp	.+2      	; 0xc6a <adp_wait_for_response+0x82>
     c68:	9b 2d       	mov	r25, r11
     c6a:	80 2f       	mov	r24, r16
     c6c:	11 11       	cpse	r17, r1
     c6e:	01 c0       	rjmp	.+2      	; 0xc72 <adp_wait_for_response+0x8a>
     c70:	8b 2d       	mov	r24, r11
     c72:	98 17       	cp	r25, r24
     c74:	10 f3       	brcs	.-60     	; 0xc3a <adp_wait_for_response+0x52>
     c76:	c2 50       	subi	r28, 0x02	; 2
     c78:	df 4f       	sbci	r29, 0xFF	; 255
     c7a:	0f b6       	in	r0, 0x3f	; 63
     c7c:	f8 94       	cli
     c7e:	de bf       	out	0x3e, r29	; 62
     c80:	0f be       	out	0x3f, r0	; 63
     c82:	cd bf       	out	0x3d, r28	; 61
     c84:	df 91       	pop	r29
     c86:	cf 91       	pop	r28
     c88:	1f 91       	pop	r17
     c8a:	0f 91       	pop	r16
     c8c:	ff 90       	pop	r15
     c8e:	ef 90       	pop	r14
     c90:	df 90       	pop	r13
     c92:	cf 90       	pop	r12
     c94:	bf 90       	pop	r11
     c96:	af 90       	pop	r10
     c98:	9f 90       	pop	r9
     c9a:	08 95       	ret

00000c9c <adp_request_handshake>:
     c9c:	cf 92       	push	r12
     c9e:	df 92       	push	r13
     ca0:	ff 92       	push	r15
     ca2:	0f 93       	push	r16
     ca4:	1f 93       	push	r17
     ca6:	cf 93       	push	r28
     ca8:	df 93       	push	r29
     caa:	cd b7       	in	r28, 0x3d	; 61
     cac:	de b7       	in	r29, 0x3e	; 62
     cae:	c4 51       	subi	r28, 0x14	; 20
     cb0:	d3 40       	sbci	r29, 0x03	; 3
     cb2:	0f b6       	in	r0, 0x3f	; 63
     cb4:	f8 94       	cli
     cb6:	de bf       	out	0x3e, r29	; 62
     cb8:	0f be       	out	0x3f, r0	; 63
     cba:	cd bf       	out	0x3d, r28	; 61
     cbc:	6a 01       	movw	r12, r20
     cbe:	98 e0       	ldi	r25, 0x08	; 8
     cc0:	eb e5       	ldi	r30, 0x5B	; 91
     cc2:	f1 e0       	ldi	r31, 0x01	; 1
     cc4:	de 01       	movw	r26, r28
     cc6:	11 96       	adiw	r26, 0x01	; 1
     cc8:	01 90       	ld	r0, Z+
     cca:	0d 92       	st	X+, r0
     ccc:	9a 95       	dec	r25
     cce:	e1 f7       	brne	.-8      	; 0xcc8 <adp_request_handshake+0x2c>
     cd0:	ae 01       	movw	r20, r28
     cd2:	47 5f       	subi	r20, 0xF7	; 247
     cd4:	5f 4f       	sbci	r21, 0xFF	; 255
     cd6:	22 e0       	ldi	r18, 0x02	; 2
     cd8:	31 e0       	ldi	r19, 0x01	; 1
     cda:	da 01       	movw	r26, r20
     cdc:	f9 01       	movw	r30, r18
     cde:	1d 92       	st	X+, r1
     ce0:	31 97       	sbiw	r30, 0x01	; 1
     ce2:	e9 f7       	brne	.-6      	; 0xcde <adp_request_handshake+0x42>
     ce4:	9f ef       	ldi	r25, 0xFF	; 255
     ce6:	c5 5f       	subi	r28, 0xF5	; 245
     ce8:	de 4f       	sbci	r29, 0xFE	; 254
     cea:	98 83       	st	Y, r25
     cec:	cb 50       	subi	r28, 0x0B	; 11
     cee:	d1 40       	sbci	r29, 0x01	; 1
     cf0:	c4 5f       	subi	r28, 0xF4	; 244
     cf2:	de 4f       	sbci	r29, 0xFE	; 254
     cf4:	18 82       	st	Y, r1
     cf6:	cc 50       	subi	r28, 0x0C	; 12
     cf8:	d1 40       	sbci	r29, 0x01	; 1
     cfa:	2a e0       	ldi	r18, 0x0A	; 10
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	c3 5f       	subi	r28, 0xF3	; 243
     d00:	de 4f       	sbci	r29, 0xFE	; 254
     d02:	39 83       	std	Y+1, r19	; 0x01
     d04:	28 83       	st	Y, r18
     d06:	cd 50       	subi	r28, 0x0D	; 13
     d08:	d1 40       	sbci	r29, 0x01	; 1
     d0a:	98 e0       	ldi	r25, 0x08	; 8
     d0c:	fe 01       	movw	r30, r28
     d0e:	31 96       	adiw	r30, 0x01	; 1
     d10:	ad e0       	ldi	r26, 0x0D	; 13
     d12:	b2 e0       	ldi	r27, 0x02	; 2
     d14:	ac 0f       	add	r26, r28
     d16:	bd 1f       	adc	r27, r29
     d18:	12 96       	adiw	r26, 0x02	; 2
     d1a:	01 90       	ld	r0, Z+
     d1c:	0d 92       	st	X+, r0
     d1e:	9a 95       	dec	r25
     d20:	e1 f7       	brne	.-8      	; 0xd1a <adp_request_handshake+0x7e>
     d22:	c3 5f       	subi	r28, 0xF3	; 243
     d24:	dd 4f       	sbci	r29, 0xFD	; 253
     d26:	88 83       	st	Y, r24
     d28:	cd 50       	subi	r28, 0x0D	; 13
     d2a:	d2 40       	sbci	r29, 0x02	; 2
     d2c:	c2 5f       	subi	r28, 0xF2	; 242
     d2e:	dd 4f       	sbci	r29, 0xFD	; 253
     d30:	68 83       	st	Y, r22
     d32:	ce 50       	subi	r28, 0x0E	; 14
     d34:	d2 40       	sbci	r29, 0x02	; 2
     d36:	8a e0       	ldi	r24, 0x0A	; 10
     d38:	fe 01       	movw	r30, r28
     d3a:	e3 5f       	subi	r30, 0xF3	; 243
     d3c:	fd 4f       	sbci	r31, 0xFD	; 253
     d3e:	ab e0       	ldi	r26, 0x0B	; 11
     d40:	b1 e0       	ldi	r27, 0x01	; 1
     d42:	ac 0f       	add	r26, r28
     d44:	bd 1f       	adc	r27, r29
     d46:	14 96       	adiw	r26, 0x04	; 4
     d48:	01 90       	ld	r0, Z+
     d4a:	0d 92       	st	X+, r0
     d4c:	8a 95       	dec	r24
     d4e:	e1 f7       	brne	.-8      	; 0xd48 <adp_request_handshake+0xac>
     d50:	6e e0       	ldi	r22, 0x0E	; 14
     d52:	70 e0       	ldi	r23, 0x00	; 0
     d54:	ce 01       	movw	r24, r28
     d56:	85 5f       	subi	r24, 0xF5	; 245
     d58:	9e 4f       	sbci	r25, 0xFE	; 254
     d5a:	41 d5       	rcall	.+2690   	; 0x17de <adp_interface_transceive_procotol>
     d5c:	fe 01       	movw	r30, r28
     d5e:	e9 5e       	subi	r30, 0xE9	; 233
     d60:	fd 4f       	sbci	r31, 0xFD	; 253
     d62:	8e ef       	ldi	r24, 0xFE	; 254
     d64:	df 01       	movw	r26, r30
     d66:	1d 92       	st	X+, r1
     d68:	8a 95       	dec	r24
     d6a:	e9 f7       	brne	.-6      	; 0xd66 <adp_request_handshake+0xca>
     d6c:	10 92 a7 03 	sts	0x03A7, r1	; 0x8003a7 <packet_received>
     d70:	12 e3       	ldi	r17, 0x32	; 50
     d72:	f1 2c       	mov	r15, r1
     d74:	01 e0       	ldi	r16, 0x01	; 1
     d76:	12 c0       	rjmp	.+36     	; 0xd9c <adp_request_handshake+0x100>
     d78:	65 e0       	ldi	r22, 0x05	; 5
     d7a:	70 e0       	ldi	r23, 0x00	; 0
     d7c:	ce 01       	movw	r24, r28
     d7e:	89 5e       	subi	r24, 0xE9	; 233
     d80:	9d 4f       	sbci	r25, 0xFD	; 253
     d82:	e1 d4       	rcall	.+2498   	; 0x1746 <adp_interface_read_response>
     d84:	81 11       	cpse	r24, r1
     d86:	09 c0       	rjmp	.+18     	; 0xd9a <adp_request_handshake+0xfe>
     d88:	96 01       	movw	r18, r12
     d8a:	45 e0       	ldi	r20, 0x05	; 5
     d8c:	be 01       	movw	r22, r28
     d8e:	69 5e       	subi	r22, 0xE9	; 233
     d90:	7d 4f       	sbci	r23, 0xFD	; 253
     d92:	80 e1       	ldi	r24, 0x10	; 16
     d94:	0f de       	rcall	.-994    	; 0x9b4 <adp_protocol_add_byte>
     d96:	81 11       	cpse	r24, r1
     d98:	12 c0       	rjmp	.+36     	; 0xdbe <adp_request_handshake+0x122>
     d9a:	11 50       	subi	r17, 0x01	; 1
     d9c:	80 91 a5 03 	lds	r24, 0x03A5	; 0x8003a5 <bytes_received>
     da0:	90 91 a6 03 	lds	r25, 0x03A6	; 0x8003a6 <bytes_received+0x1>
     da4:	89 2b       	or	r24, r25
     da6:	19 f0       	breq	.+6      	; 0xdae <adp_request_handshake+0x112>
     da8:	90 91 a7 03 	lds	r25, 0x03A7	; 0x8003a7 <packet_received>
     dac:	01 c0       	rjmp	.+2      	; 0xdb0 <adp_request_handshake+0x114>
     dae:	9f 2d       	mov	r25, r15
     db0:	80 2f       	mov	r24, r16
     db2:	11 11       	cpse	r17, r1
     db4:	01 c0       	rjmp	.+2      	; 0xdb8 <adp_request_handshake+0x11c>
     db6:	8f 2d       	mov	r24, r15
     db8:	98 17       	cp	r25, r24
     dba:	f0 f2       	brcs	.-68     	; 0xd78 <adp_request_handshake+0xdc>
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	cc 5e       	subi	r28, 0xEC	; 236
     dc0:	dc 4f       	sbci	r29, 0xFC	; 252
     dc2:	0f b6       	in	r0, 0x3f	; 63
     dc4:	f8 94       	cli
     dc6:	de bf       	out	0x3e, r29	; 62
     dc8:	0f be       	out	0x3f, r0	; 63
     dca:	cd bf       	out	0x3d, r28	; 61
     dcc:	df 91       	pop	r29
     dce:	cf 91       	pop	r28
     dd0:	1f 91       	pop	r17
     dd2:	0f 91       	pop	r16
     dd4:	ff 90       	pop	r15
     dd6:	df 90       	pop	r13
     dd8:	cf 90       	pop	r12
     dda:	08 95       	ret

00000ddc <adp_add_send_byte>:
     ddc:	0f 93       	push	r16
     dde:	1f 93       	push	r17
     de0:	cf 93       	push	r28
     de2:	df 93       	push	r29
     de4:	ec 01       	movw	r28, r24
     de6:	21 15       	cp	r18, r1
     de8:	31 05       	cpc	r19, r1
     dea:	c9 f0       	breq	.+50     	; 0xe1e <adp_add_send_byte+0x42>
     dec:	fa 01       	movw	r30, r20
     dee:	42 0f       	add	r20, r18
     df0:	53 1f       	adc	r21, r19
     df2:	2f ef       	ldi	r18, 0xFF	; 255
     df4:	8f 01       	movw	r16, r30
     df6:	90 81       	ld	r25, Z
     df8:	9f 3f       	cpi	r25, 0xFF	; 255
     dfa:	31 f4       	brne	.+12     	; 0xe08 <adp_add_send_byte+0x2c>
     dfc:	ce 01       	movw	r24, r28
     dfe:	86 0f       	add	r24, r22
     e00:	91 1d       	adc	r25, r1
     e02:	dc 01       	movw	r26, r24
     e04:	2c 93       	st	X, r18
     e06:	6f 5f       	subi	r22, 0xFF	; 255
     e08:	d8 01       	movw	r26, r16
     e0a:	9c 91       	ld	r25, X
     e0c:	31 96       	adiw	r30, 0x01	; 1
     e0e:	de 01       	movw	r26, r28
     e10:	a6 0f       	add	r26, r22
     e12:	b1 1d       	adc	r27, r1
     e14:	9c 93       	st	X, r25
     e16:	6f 5f       	subi	r22, 0xFF	; 255
     e18:	e4 17       	cp	r30, r20
     e1a:	f5 07       	cpc	r31, r21
     e1c:	59 f7       	brne	.-42     	; 0xdf4 <adp_add_send_byte+0x18>
     e1e:	86 2f       	mov	r24, r22
     e20:	90 e0       	ldi	r25, 0x00	; 0
     e22:	df 91       	pop	r29
     e24:	cf 91       	pop	r28
     e26:	1f 91       	pop	r17
     e28:	0f 91       	pop	r16
     e2a:	08 95       	ret

00000e2c <adp_add_dashboard_element_common_send_byte>:
     e2c:	0f 93       	push	r16
     e2e:	1f 93       	push	r17
     e30:	cf 93       	push	r28
     e32:	df 93       	push	r29
     e34:	8c 01       	movw	r16, r24
     e36:	ea 01       	movw	r28, r20
     e38:	22 e0       	ldi	r18, 0x02	; 2
     e3a:	30 e0       	ldi	r19, 0x00	; 0
     e3c:	cf df       	rcall	.-98     	; 0xddc <adp_add_send_byte>
     e3e:	ae 01       	movw	r20, r28
     e40:	4e 5f       	subi	r20, 0xFE	; 254
     e42:	5f 4f       	sbci	r21, 0xFF	; 255
     e44:	22 e0       	ldi	r18, 0x02	; 2
     e46:	30 e0       	ldi	r19, 0x00	; 0
     e48:	68 2f       	mov	r22, r24
     e4a:	c8 01       	movw	r24, r16
     e4c:	c7 df       	rcall	.-114    	; 0xddc <adp_add_send_byte>
     e4e:	ae 01       	movw	r20, r28
     e50:	4c 5f       	subi	r20, 0xFC	; 252
     e52:	5f 4f       	sbci	r21, 0xFF	; 255
     e54:	21 e0       	ldi	r18, 0x01	; 1
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	68 2f       	mov	r22, r24
     e5a:	c8 01       	movw	r24, r16
     e5c:	bf df       	rcall	.-130    	; 0xddc <adp_add_send_byte>
     e5e:	ae 01       	movw	r20, r28
     e60:	4b 5f       	subi	r20, 0xFB	; 251
     e62:	5f 4f       	sbci	r21, 0xFF	; 255
     e64:	22 e0       	ldi	r18, 0x02	; 2
     e66:	30 e0       	ldi	r19, 0x00	; 0
     e68:	68 2f       	mov	r22, r24
     e6a:	c8 01       	movw	r24, r16
     e6c:	b7 df       	rcall	.-146    	; 0xddc <adp_add_send_byte>
     e6e:	ae 01       	movw	r20, r28
     e70:	49 5f       	subi	r20, 0xF9	; 249
     e72:	5f 4f       	sbci	r21, 0xFF	; 255
     e74:	22 e0       	ldi	r18, 0x02	; 2
     e76:	30 e0       	ldi	r19, 0x00	; 0
     e78:	68 2f       	mov	r22, r24
     e7a:	c8 01       	movw	r24, r16
     e7c:	af df       	rcall	.-162    	; 0xddc <adp_add_send_byte>
     e7e:	ae 01       	movw	r20, r28
     e80:	47 5f       	subi	r20, 0xF7	; 247
     e82:	5f 4f       	sbci	r21, 0xFF	; 255
     e84:	22 e0       	ldi	r18, 0x02	; 2
     e86:	30 e0       	ldi	r19, 0x00	; 0
     e88:	68 2f       	mov	r22, r24
     e8a:	c8 01       	movw	r24, r16
     e8c:	a7 df       	rcall	.-178    	; 0xddc <adp_add_send_byte>
     e8e:	ae 01       	movw	r20, r28
     e90:	45 5f       	subi	r20, 0xF5	; 245
     e92:	5f 4f       	sbci	r21, 0xFF	; 255
     e94:	22 e0       	ldi	r18, 0x02	; 2
     e96:	30 e0       	ldi	r19, 0x00	; 0
     e98:	68 2f       	mov	r22, r24
     e9a:	c8 01       	movw	r24, r16
     e9c:	9f df       	rcall	.-194    	; 0xddc <adp_add_send_byte>
     e9e:	ae 01       	movw	r20, r28
     ea0:	43 5f       	subi	r20, 0xF3	; 243
     ea2:	5f 4f       	sbci	r21, 0xFF	; 255
     ea4:	21 e0       	ldi	r18, 0x01	; 1
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	68 2f       	mov	r22, r24
     eaa:	c8 01       	movw	r24, r16
     eac:	97 df       	rcall	.-210    	; 0xddc <adp_add_send_byte>
     eae:	df 91       	pop	r29
     eb0:	cf 91       	pop	r28
     eb2:	1f 91       	pop	r17
     eb4:	0f 91       	pop	r16
     eb6:	08 95       	ret

00000eb8 <adp_wait_for_handshake>:
     eb8:	cf 93       	push	r28
     eba:	df 93       	push	r29
     ebc:	1f 92       	push	r1
     ebe:	cd b7       	in	r28, 0x3d	; 61
     ec0:	de b7       	in	r29, 0x3e	; 62
     ec2:	ae 01       	movw	r20, r28
     ec4:	4f 5f       	subi	r20, 0xFF	; 255
     ec6:	5f 4f       	sbci	r21, 0xFF	; 255
     ec8:	60 e0       	ldi	r22, 0x00	; 0
     eca:	81 e0       	ldi	r24, 0x01	; 1
     ecc:	e7 de       	rcall	.-562    	; 0xc9c <adp_request_handshake>
     ece:	81 11       	cpse	r24, r1
     ed0:	02 c0       	rjmp	.+4      	; 0xed6 <adp_wait_for_handshake+0x1e>
     ed2:	82 e0       	ldi	r24, 0x02	; 2
     ed4:	89 83       	std	Y+1, r24	; 0x01
     ed6:	89 81       	ldd	r24, Y+1	; 0x01
     ed8:	0f 90       	pop	r0
     eda:	df 91       	pop	r29
     edc:	cf 91       	pop	r28
     ede:	08 95       	ret

00000ee0 <adp_configure_stream>:
     ee0:	8f 92       	push	r8
     ee2:	9f 92       	push	r9
     ee4:	af 92       	push	r10
     ee6:	bf 92       	push	r11
     ee8:	cf 92       	push	r12
     eea:	df 92       	push	r13
     eec:	ef 92       	push	r14
     eee:	ff 92       	push	r15
     ef0:	0f 93       	push	r16
     ef2:	1f 93       	push	r17
     ef4:	cf 93       	push	r28
     ef6:	df 93       	push	r29
     ef8:	cd b7       	in	r28, 0x3d	; 61
     efa:	de b7       	in	r29, 0x3e	; 62
     efc:	c5 50       	subi	r28, 0x05	; 5
     efe:	d2 40       	sbci	r29, 0x02	; 2
     f00:	0f b6       	in	r0, 0x3f	; 63
     f02:	f8 94       	cli
     f04:	de bf       	out	0x3e, r29	; 62
     f06:	0f be       	out	0x3f, r0	; 63
     f08:	cd bf       	out	0x3d, r28	; 61
     f0a:	7c 01       	movw	r14, r24
     f0c:	5b 01       	movw	r10, r22
     f0e:	4e 01       	movw	r8, r28
     f10:	22 e0       	ldi	r18, 0x02	; 2
     f12:	82 0e       	add	r8, r18
     f14:	91 1c       	adc	r9, r1
     f16:	82 e0       	ldi	r24, 0x02	; 2
     f18:	91 e0       	ldi	r25, 0x01	; 1
     f1a:	f4 01       	movw	r30, r8
     f1c:	9c 01       	movw	r18, r24
     f1e:	11 92       	st	Z+, r1
     f20:	21 50       	subi	r18, 0x01	; 1
     f22:	30 40       	sbci	r19, 0x00	; 0
     f24:	e1 f7       	brne	.-8      	; 0xf1e <adp_configure_stream+0x3e>
     f26:	fb 01       	movw	r30, r22
     f28:	01 90       	ld	r0, Z+
     f2a:	00 20       	and	r0, r0
     f2c:	e9 f7       	brne	.-6      	; 0xf28 <adp_configure_stream+0x48>
     f2e:	31 97       	sbiw	r30, 0x01	; 1
     f30:	8f 01       	movw	r16, r30
     f32:	06 1b       	sub	r16, r22
     f34:	17 0b       	sbc	r17, r23
     f36:	8f ef       	ldi	r24, 0xFF	; 255
     f38:	cc 5f       	subi	r28, 0xFC	; 252
     f3a:	de 4f       	sbci	r29, 0xFE	; 254
     f3c:	88 83       	st	Y, r24
     f3e:	c4 50       	subi	r28, 0x04	; 4
     f40:	d1 40       	sbci	r29, 0x01	; 1
     f42:	80 e2       	ldi	r24, 0x20	; 32
     f44:	cb 5f       	subi	r28, 0xFB	; 251
     f46:	de 4f       	sbci	r29, 0xFE	; 254
     f48:	88 83       	st	Y, r24
     f4a:	c5 50       	subi	r28, 0x05	; 5
     f4c:	d1 40       	sbci	r29, 0x01	; 1
     f4e:	c8 01       	movw	r24, r16
     f50:	06 96       	adiw	r24, 0x06	; 6
     f52:	ca 5f       	subi	r28, 0xFA	; 250
     f54:	de 4f       	sbci	r29, 0xFE	; 254
     f56:	99 83       	std	Y+1, r25	; 0x01
     f58:	88 83       	st	Y, r24
     f5a:	c6 50       	subi	r28, 0x06	; 6
     f5c:	d1 40       	sbci	r29, 0x01	; 1
     f5e:	68 94       	set
     f60:	cc 24       	eor	r12, r12
     f62:	c2 f8       	bld	r12, 2
     f64:	dd 24       	eor	r13, r13
     f66:	d3 94       	inc	r13
     f68:	cc 0e       	add	r12, r28
     f6a:	dd 1e       	adc	r13, r29
     f6c:	34 e0       	ldi	r19, 0x04	; 4
     f6e:	c3 0e       	add	r12, r19
     f70:	d1 1c       	adc	r13, r1
     f72:	22 e0       	ldi	r18, 0x02	; 2
     f74:	30 e0       	ldi	r19, 0x00	; 0
     f76:	a7 01       	movw	r20, r14
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	c6 01       	movw	r24, r12
     f7c:	2f df       	rcall	.-418    	; 0xddc <adp_add_send_byte>
     f7e:	a7 01       	movw	r20, r14
     f80:	4e 5f       	subi	r20, 0xFE	; 254
     f82:	5f 4f       	sbci	r21, 0xFF	; 255
     f84:	21 e0       	ldi	r18, 0x01	; 1
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	68 2f       	mov	r22, r24
     f8a:	c6 01       	movw	r24, r12
     f8c:	27 df       	rcall	.-434    	; 0xddc <adp_add_send_byte>
     f8e:	a7 01       	movw	r20, r14
     f90:	4d 5f       	subi	r20, 0xFD	; 253
     f92:	5f 4f       	sbci	r21, 0xFF	; 255
     f94:	21 e0       	ldi	r18, 0x01	; 1
     f96:	30 e0       	ldi	r19, 0x00	; 0
     f98:	68 2f       	mov	r22, r24
     f9a:	c6 01       	movw	r24, r12
     f9c:	1f df       	rcall	.-450    	; 0xddc <adp_add_send_byte>
     f9e:	a7 01       	movw	r20, r14
     fa0:	4c 5f       	subi	r20, 0xFC	; 252
     fa2:	5f 4f       	sbci	r21, 0xFF	; 255
     fa4:	21 e0       	ldi	r18, 0x01	; 1
     fa6:	30 e0       	ldi	r19, 0x00	; 0
     fa8:	68 2f       	mov	r22, r24
     faa:	c6 01       	movw	r24, r12
     fac:	17 df       	rcall	.-466    	; 0xddc <adp_add_send_byte>
     fae:	98 01       	movw	r18, r16
     fb0:	2f 5f       	subi	r18, 0xFF	; 255
     fb2:	3f 4f       	sbci	r19, 0xFF	; 255
     fb4:	a5 01       	movw	r20, r10
     fb6:	68 2f       	mov	r22, r24
     fb8:	c6 01       	movw	r24, r12
     fba:	10 df       	rcall	.-480    	; 0xddc <adp_add_send_byte>
     fbc:	bc 01       	movw	r22, r24
     fbe:	6c 5f       	subi	r22, 0xFC	; 252
     fc0:	7f 4f       	sbci	r23, 0xFF	; 255
     fc2:	a4 01       	movw	r20, r8
     fc4:	ce 01       	movw	r24, r28
     fc6:	8c 5f       	subi	r24, 0xFC	; 252
     fc8:	9e 4f       	sbci	r25, 0xFE	; 254
     fca:	09 d4       	rcall	.+2066   	; 0x17de <adp_interface_transceive_procotol>
     fcc:	41 e0       	ldi	r20, 0x01	; 1
     fce:	be 01       	movw	r22, r28
     fd0:	6f 5f       	subi	r22, 0xFF	; 255
     fd2:	7f 4f       	sbci	r23, 0xFF	; 255
     fd4:	80 e3       	ldi	r24, 0x30	; 48
     fd6:	08 de       	rcall	.-1008   	; 0xbe8 <adp_wait_for_response>
     fd8:	81 e0       	ldi	r24, 0x01	; 1
     fda:	99 81       	ldd	r25, Y+1	; 0x01
     fdc:	91 30       	cpi	r25, 0x01	; 1
     fde:	09 f0       	breq	.+2      	; 0xfe2 <adp_configure_stream+0x102>
     fe0:	80 e0       	ldi	r24, 0x00	; 0
     fe2:	cb 5f       	subi	r28, 0xFB	; 251
     fe4:	dd 4f       	sbci	r29, 0xFD	; 253
     fe6:	0f b6       	in	r0, 0x3f	; 63
     fe8:	f8 94       	cli
     fea:	de bf       	out	0x3e, r29	; 62
     fec:	0f be       	out	0x3f, r0	; 63
     fee:	cd bf       	out	0x3d, r28	; 61
     ff0:	df 91       	pop	r29
     ff2:	cf 91       	pop	r28
     ff4:	1f 91       	pop	r17
     ff6:	0f 91       	pop	r16
     ff8:	ff 90       	pop	r15
     ffa:	ef 90       	pop	r14
     ffc:	df 90       	pop	r13
     ffe:	cf 90       	pop	r12
    1000:	bf 90       	pop	r11
    1002:	af 90       	pop	r10
    1004:	9f 90       	pop	r9
    1006:	8f 90       	pop	r8
    1008:	08 95       	ret

0000100a <adp_configure_terminal>:
    100a:	8f 92       	push	r8
    100c:	9f 92       	push	r9
    100e:	af 92       	push	r10
    1010:	bf 92       	push	r11
    1012:	cf 92       	push	r12
    1014:	df 92       	push	r13
    1016:	ef 92       	push	r14
    1018:	ff 92       	push	r15
    101a:	0f 93       	push	r16
    101c:	1f 93       	push	r17
    101e:	cf 93       	push	r28
    1020:	df 93       	push	r29
    1022:	cd b7       	in	r28, 0x3d	; 61
    1024:	de b7       	in	r29, 0x3e	; 62
    1026:	c5 50       	subi	r28, 0x05	; 5
    1028:	d2 40       	sbci	r29, 0x02	; 2
    102a:	0f b6       	in	r0, 0x3f	; 63
    102c:	f8 94       	cli
    102e:	de bf       	out	0x3e, r29	; 62
    1030:	0f be       	out	0x3f, r0	; 63
    1032:	cd bf       	out	0x3d, r28	; 61
    1034:	8c 01       	movw	r16, r24
    1036:	5b 01       	movw	r10, r22
    1038:	fb 01       	movw	r30, r22
    103a:	01 90       	ld	r0, Z+
    103c:	00 20       	and	r0, r0
    103e:	e9 f7       	brne	.-6      	; 0x103a <adp_configure_terminal+0x30>
    1040:	31 97       	sbiw	r30, 0x01	; 1
    1042:	4f 01       	movw	r8, r30
    1044:	86 1a       	sub	r8, r22
    1046:	97 0a       	sbc	r9, r23
    1048:	6e 01       	movw	r12, r28
    104a:	22 e0       	ldi	r18, 0x02	; 2
    104c:	c2 0e       	add	r12, r18
    104e:	d1 1c       	adc	r13, r1
    1050:	82 e0       	ldi	r24, 0x02	; 2
    1052:	91 e0       	ldi	r25, 0x01	; 1
    1054:	f6 01       	movw	r30, r12
    1056:	9c 01       	movw	r18, r24
    1058:	11 92       	st	Z+, r1
    105a:	21 50       	subi	r18, 0x01	; 1
    105c:	30 40       	sbci	r19, 0x00	; 0
    105e:	e1 f7       	brne	.-8      	; 0x1058 <adp_configure_terminal+0x4e>
    1060:	8f ef       	ldi	r24, 0xFF	; 255
    1062:	cc 5f       	subi	r28, 0xFC	; 252
    1064:	de 4f       	sbci	r29, 0xFE	; 254
    1066:	88 83       	st	Y, r24
    1068:	c4 50       	subi	r28, 0x04	; 4
    106a:	d1 40       	sbci	r29, 0x01	; 1
    106c:	86 e2       	ldi	r24, 0x26	; 38
    106e:	cb 5f       	subi	r28, 0xFB	; 251
    1070:	de 4f       	sbci	r29, 0xFE	; 254
    1072:	88 83       	st	Y, r24
    1074:	c5 50       	subi	r28, 0x05	; 5
    1076:	d1 40       	sbci	r29, 0x01	; 1
    1078:	c4 01       	movw	r24, r8
    107a:	0b 96       	adiw	r24, 0x0b	; 11
    107c:	ca 5f       	subi	r28, 0xFA	; 250
    107e:	de 4f       	sbci	r29, 0xFE	; 254
    1080:	99 83       	std	Y+1, r25	; 0x01
    1082:	88 83       	st	Y, r24
    1084:	c6 50       	subi	r28, 0x06	; 6
    1086:	d1 40       	sbci	r29, 0x01	; 1
    1088:	68 94       	set
    108a:	ee 24       	eor	r14, r14
    108c:	e2 f8       	bld	r14, 2
    108e:	ff 24       	eor	r15, r15
    1090:	f3 94       	inc	r15
    1092:	ec 0e       	add	r14, r28
    1094:	fd 1e       	adc	r15, r29
    1096:	34 e0       	ldi	r19, 0x04	; 4
    1098:	e3 0e       	add	r14, r19
    109a:	f1 1c       	adc	r15, r1
    109c:	22 e0       	ldi	r18, 0x02	; 2
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	a8 01       	movw	r20, r16
    10a2:	60 e0       	ldi	r22, 0x00	; 0
    10a4:	c7 01       	movw	r24, r14
    10a6:	9a de       	rcall	.-716    	; 0xddc <adp_add_send_byte>
    10a8:	94 01       	movw	r18, r8
    10aa:	2f 5f       	subi	r18, 0xFF	; 255
    10ac:	3f 4f       	sbci	r19, 0xFF	; 255
    10ae:	a5 01       	movw	r20, r10
    10b0:	68 2f       	mov	r22, r24
    10b2:	c7 01       	movw	r24, r14
    10b4:	93 de       	rcall	.-730    	; 0xddc <adp_add_send_byte>
    10b6:	a8 01       	movw	r20, r16
    10b8:	4e 5f       	subi	r20, 0xFE	; 254
    10ba:	5f 4f       	sbci	r21, 0xFF	; 255
    10bc:	29 e0       	ldi	r18, 0x09	; 9
    10be:	30 e0       	ldi	r19, 0x00	; 0
    10c0:	68 2f       	mov	r22, r24
    10c2:	c7 01       	movw	r24, r14
    10c4:	8b de       	rcall	.-746    	; 0xddc <adp_add_send_byte>
    10c6:	bc 01       	movw	r22, r24
    10c8:	6c 5f       	subi	r22, 0xFC	; 252
    10ca:	7f 4f       	sbci	r23, 0xFF	; 255
    10cc:	a6 01       	movw	r20, r12
    10ce:	ce 01       	movw	r24, r28
    10d0:	8c 5f       	subi	r24, 0xFC	; 252
    10d2:	9e 4f       	sbci	r25, 0xFE	; 254
    10d4:	84 d3       	rcall	.+1800   	; 0x17de <adp_interface_transceive_procotol>
    10d6:	41 e0       	ldi	r20, 0x01	; 1
    10d8:	be 01       	movw	r22, r28
    10da:	6f 5f       	subi	r22, 0xFF	; 255
    10dc:	7f 4f       	sbci	r23, 0xFF	; 255
    10de:	80 e3       	ldi	r24, 0x30	; 48
    10e0:	83 dd       	rcall	.-1274   	; 0xbe8 <adp_wait_for_response>
    10e2:	81 e0       	ldi	r24, 0x01	; 1
    10e4:	99 81       	ldd	r25, Y+1	; 0x01
    10e6:	91 30       	cpi	r25, 0x01	; 1
    10e8:	09 f0       	breq	.+2      	; 0x10ec <adp_configure_terminal+0xe2>
    10ea:	80 e0       	ldi	r24, 0x00	; 0
    10ec:	cb 5f       	subi	r28, 0xFB	; 251
    10ee:	dd 4f       	sbci	r29, 0xFD	; 253
    10f0:	0f b6       	in	r0, 0x3f	; 63
    10f2:	f8 94       	cli
    10f4:	de bf       	out	0x3e, r29	; 62
    10f6:	0f be       	out	0x3f, r0	; 63
    10f8:	cd bf       	out	0x3d, r28	; 61
    10fa:	df 91       	pop	r29
    10fc:	cf 91       	pop	r28
    10fe:	1f 91       	pop	r17
    1100:	0f 91       	pop	r16
    1102:	ff 90       	pop	r15
    1104:	ef 90       	pop	r14
    1106:	df 90       	pop	r13
    1108:	cf 90       	pop	r12
    110a:	bf 90       	pop	r11
    110c:	af 90       	pop	r10
    110e:	9f 90       	pop	r9
    1110:	8f 90       	pop	r8
    1112:	08 95       	ret

00001114 <adp_add_stream_to_terminal>:
    1114:	8f 92       	push	r8
    1116:	9f 92       	push	r9
    1118:	af 92       	push	r10
    111a:	bf 92       	push	r11
    111c:	cf 92       	push	r12
    111e:	df 92       	push	r13
    1120:	ef 92       	push	r14
    1122:	ff 92       	push	r15
    1124:	0f 93       	push	r16
    1126:	1f 93       	push	r17
    1128:	cf 93       	push	r28
    112a:	df 93       	push	r29
    112c:	cd b7       	in	r28, 0x3d	; 61
    112e:	de b7       	in	r29, 0x3e	; 62
    1130:	c5 50       	subi	r28, 0x05	; 5
    1132:	d2 40       	sbci	r29, 0x02	; 2
    1134:	0f b6       	in	r0, 0x3f	; 63
    1136:	f8 94       	cli
    1138:	de bf       	out	0x3e, r29	; 62
    113a:	0f be       	out	0x3f, r0	; 63
    113c:	cd bf       	out	0x3d, r28	; 61
    113e:	8c 01       	movw	r16, r24
    1140:	5b 01       	movw	r10, r22
    1142:	6e 01       	movw	r12, r28
    1144:	22 e0       	ldi	r18, 0x02	; 2
    1146:	c2 0e       	add	r12, r18
    1148:	d1 1c       	adc	r13, r1
    114a:	82 e0       	ldi	r24, 0x02	; 2
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	f6 01       	movw	r30, r12
    1150:	9c 01       	movw	r18, r24
    1152:	11 92       	st	Z+, r1
    1154:	21 50       	subi	r18, 0x01	; 1
    1156:	30 40       	sbci	r19, 0x00	; 0
    1158:	e1 f7       	brne	.-8      	; 0x1152 <adp_add_stream_to_terminal+0x3e>
    115a:	fb 01       	movw	r30, r22
    115c:	01 90       	ld	r0, Z+
    115e:	00 20       	and	r0, r0
    1160:	e9 f7       	brne	.-6      	; 0x115c <adp_add_stream_to_terminal+0x48>
    1162:	31 97       	sbiw	r30, 0x01	; 1
    1164:	4f 01       	movw	r8, r30
    1166:	86 1a       	sub	r8, r22
    1168:	97 0a       	sbc	r9, r23
    116a:	8f ef       	ldi	r24, 0xFF	; 255
    116c:	cc 5f       	subi	r28, 0xFC	; 252
    116e:	de 4f       	sbci	r29, 0xFE	; 254
    1170:	88 83       	st	Y, r24
    1172:	c4 50       	subi	r28, 0x04	; 4
    1174:	d1 40       	sbci	r29, 0x01	; 1
    1176:	87 e2       	ldi	r24, 0x27	; 39
    1178:	cb 5f       	subi	r28, 0xFB	; 251
    117a:	de 4f       	sbci	r29, 0xFE	; 254
    117c:	88 83       	st	Y, r24
    117e:	c5 50       	subi	r28, 0x05	; 5
    1180:	d1 40       	sbci	r29, 0x01	; 1
    1182:	c4 01       	movw	r24, r8
    1184:	0c 96       	adiw	r24, 0x0c	; 12
    1186:	ca 5f       	subi	r28, 0xFA	; 250
    1188:	de 4f       	sbci	r29, 0xFE	; 254
    118a:	99 83       	std	Y+1, r25	; 0x01
    118c:	88 83       	st	Y, r24
    118e:	c6 50       	subi	r28, 0x06	; 6
    1190:	d1 40       	sbci	r29, 0x01	; 1
    1192:	68 94       	set
    1194:	ee 24       	eor	r14, r14
    1196:	e2 f8       	bld	r14, 2
    1198:	ff 24       	eor	r15, r15
    119a:	f3 94       	inc	r15
    119c:	ec 0e       	add	r14, r28
    119e:	fd 1e       	adc	r15, r29
    11a0:	34 e0       	ldi	r19, 0x04	; 4
    11a2:	e3 0e       	add	r14, r19
    11a4:	f1 1c       	adc	r15, r1
    11a6:	22 e0       	ldi	r18, 0x02	; 2
    11a8:	30 e0       	ldi	r19, 0x00	; 0
    11aa:	a8 01       	movw	r20, r16
    11ac:	60 e0       	ldi	r22, 0x00	; 0
    11ae:	c7 01       	movw	r24, r14
    11b0:	15 de       	rcall	.-982    	; 0xddc <adp_add_send_byte>
    11b2:	a8 01       	movw	r20, r16
    11b4:	4e 5f       	subi	r20, 0xFE	; 254
    11b6:	5f 4f       	sbci	r21, 0xFF	; 255
    11b8:	22 e0       	ldi	r18, 0x02	; 2
    11ba:	30 e0       	ldi	r19, 0x00	; 0
    11bc:	68 2f       	mov	r22, r24
    11be:	c7 01       	movw	r24, r14
    11c0:	0d de       	rcall	.-998    	; 0xddc <adp_add_send_byte>
    11c2:	a8 01       	movw	r20, r16
    11c4:	4c 5f       	subi	r20, 0xFC	; 252
    11c6:	5f 4f       	sbci	r21, 0xFF	; 255
    11c8:	21 e0       	ldi	r18, 0x01	; 1
    11ca:	30 e0       	ldi	r19, 0x00	; 0
    11cc:	68 2f       	mov	r22, r24
    11ce:	c7 01       	movw	r24, r14
    11d0:	05 de       	rcall	.-1014   	; 0xddc <adp_add_send_byte>
    11d2:	a8 01       	movw	r20, r16
    11d4:	4b 5f       	subi	r20, 0xFB	; 251
    11d6:	5f 4f       	sbci	r21, 0xFF	; 255
    11d8:	23 e0       	ldi	r18, 0x03	; 3
    11da:	30 e0       	ldi	r19, 0x00	; 0
    11dc:	68 2f       	mov	r22, r24
    11de:	c7 01       	movw	r24, r14
    11e0:	fd dd       	rcall	.-1030   	; 0xddc <adp_add_send_byte>
    11e2:	94 01       	movw	r18, r8
    11e4:	2f 5f       	subi	r18, 0xFF	; 255
    11e6:	3f 4f       	sbci	r19, 0xFF	; 255
    11e8:	a5 01       	movw	r20, r10
    11ea:	68 2f       	mov	r22, r24
    11ec:	c7 01       	movw	r24, r14
    11ee:	f6 dd       	rcall	.-1044   	; 0xddc <adp_add_send_byte>
    11f0:	a8 01       	movw	r20, r16
    11f2:	48 5f       	subi	r20, 0xF8	; 248
    11f4:	5f 4f       	sbci	r21, 0xFF	; 255
    11f6:	23 e0       	ldi	r18, 0x03	; 3
    11f8:	30 e0       	ldi	r19, 0x00	; 0
    11fa:	68 2f       	mov	r22, r24
    11fc:	c7 01       	movw	r24, r14
    11fe:	ee dd       	rcall	.-1060   	; 0xddc <adp_add_send_byte>
    1200:	bc 01       	movw	r22, r24
    1202:	6c 5f       	subi	r22, 0xFC	; 252
    1204:	7f 4f       	sbci	r23, 0xFF	; 255
    1206:	a6 01       	movw	r20, r12
    1208:	ce 01       	movw	r24, r28
    120a:	8c 5f       	subi	r24, 0xFC	; 252
    120c:	9e 4f       	sbci	r25, 0xFE	; 254
    120e:	e7 d2       	rcall	.+1486   	; 0x17de <adp_interface_transceive_procotol>
    1210:	41 e0       	ldi	r20, 0x01	; 1
    1212:	be 01       	movw	r22, r28
    1214:	6f 5f       	subi	r22, 0xFF	; 255
    1216:	7f 4f       	sbci	r23, 0xFF	; 255
    1218:	80 e3       	ldi	r24, 0x30	; 48
    121a:	e6 dc       	rcall	.-1588   	; 0xbe8 <adp_wait_for_response>
    121c:	81 e0       	ldi	r24, 0x01	; 1
    121e:	99 81       	ldd	r25, Y+1	; 0x01
    1220:	91 30       	cpi	r25, 0x01	; 1
    1222:	09 f0       	breq	.+2      	; 0x1226 <adp_add_stream_to_terminal+0x112>
    1224:	80 e0       	ldi	r24, 0x00	; 0
    1226:	cb 5f       	subi	r28, 0xFB	; 251
    1228:	dd 4f       	sbci	r29, 0xFD	; 253
    122a:	0f b6       	in	r0, 0x3f	; 63
    122c:	f8 94       	cli
    122e:	de bf       	out	0x3e, r29	; 62
    1230:	0f be       	out	0x3f, r0	; 63
    1232:	cd bf       	out	0x3d, r28	; 61
    1234:	df 91       	pop	r29
    1236:	cf 91       	pop	r28
    1238:	1f 91       	pop	r17
    123a:	0f 91       	pop	r16
    123c:	ff 90       	pop	r15
    123e:	ef 90       	pop	r14
    1240:	df 90       	pop	r13
    1242:	cf 90       	pop	r12
    1244:	bf 90       	pop	r11
    1246:	af 90       	pop	r10
    1248:	9f 90       	pop	r9
    124a:	8f 90       	pop	r8
    124c:	08 95       	ret

0000124e <adp_add_dashboard>:
    124e:	8f 92       	push	r8
    1250:	9f 92       	push	r9
    1252:	af 92       	push	r10
    1254:	bf 92       	push	r11
    1256:	cf 92       	push	r12
    1258:	df 92       	push	r13
    125a:	ef 92       	push	r14
    125c:	ff 92       	push	r15
    125e:	0f 93       	push	r16
    1260:	1f 93       	push	r17
    1262:	cf 93       	push	r28
    1264:	df 93       	push	r29
    1266:	cd b7       	in	r28, 0x3d	; 61
    1268:	de b7       	in	r29, 0x3e	; 62
    126a:	c5 50       	subi	r28, 0x05	; 5
    126c:	d2 40       	sbci	r29, 0x02	; 2
    126e:	0f b6       	in	r0, 0x3f	; 63
    1270:	f8 94       	cli
    1272:	de bf       	out	0x3e, r29	; 62
    1274:	0f be       	out	0x3f, r0	; 63
    1276:	cd bf       	out	0x3d, r28	; 61
    1278:	8c 01       	movw	r16, r24
    127a:	5b 01       	movw	r10, r22
    127c:	fb 01       	movw	r30, r22
    127e:	01 90       	ld	r0, Z+
    1280:	00 20       	and	r0, r0
    1282:	e9 f7       	brne	.-6      	; 0x127e <adp_add_dashboard+0x30>
    1284:	31 97       	sbiw	r30, 0x01	; 1
    1286:	4f 01       	movw	r8, r30
    1288:	86 1a       	sub	r8, r22
    128a:	97 0a       	sbc	r9, r23
    128c:	6e 01       	movw	r12, r28
    128e:	22 e0       	ldi	r18, 0x02	; 2
    1290:	c2 0e       	add	r12, r18
    1292:	d1 1c       	adc	r13, r1
    1294:	82 e0       	ldi	r24, 0x02	; 2
    1296:	91 e0       	ldi	r25, 0x01	; 1
    1298:	f6 01       	movw	r30, r12
    129a:	9c 01       	movw	r18, r24
    129c:	11 92       	st	Z+, r1
    129e:	21 50       	subi	r18, 0x01	; 1
    12a0:	30 40       	sbci	r19, 0x00	; 0
    12a2:	e1 f7       	brne	.-8      	; 0x129c <adp_add_dashboard+0x4e>
    12a4:	8f ef       	ldi	r24, 0xFF	; 255
    12a6:	cc 5f       	subi	r28, 0xFC	; 252
    12a8:	de 4f       	sbci	r29, 0xFE	; 254
    12aa:	88 83       	st	Y, r24
    12ac:	c4 50       	subi	r28, 0x04	; 4
    12ae:	d1 40       	sbci	r29, 0x01	; 1
    12b0:	8a e2       	ldi	r24, 0x2A	; 42
    12b2:	cb 5f       	subi	r28, 0xFB	; 251
    12b4:	de 4f       	sbci	r29, 0xFE	; 254
    12b6:	88 83       	st	Y, r24
    12b8:	c5 50       	subi	r28, 0x05	; 5
    12ba:	d1 40       	sbci	r29, 0x01	; 1
    12bc:	c4 01       	movw	r24, r8
    12be:	08 96       	adiw	r24, 0x08	; 8
    12c0:	ca 5f       	subi	r28, 0xFA	; 250
    12c2:	de 4f       	sbci	r29, 0xFE	; 254
    12c4:	99 83       	std	Y+1, r25	; 0x01
    12c6:	88 83       	st	Y, r24
    12c8:	c6 50       	subi	r28, 0x06	; 6
    12ca:	d1 40       	sbci	r29, 0x01	; 1
    12cc:	68 94       	set
    12ce:	ee 24       	eor	r14, r14
    12d0:	e2 f8       	bld	r14, 2
    12d2:	ff 24       	eor	r15, r15
    12d4:	f3 94       	inc	r15
    12d6:	ec 0e       	add	r14, r28
    12d8:	fd 1e       	adc	r15, r29
    12da:	34 e0       	ldi	r19, 0x04	; 4
    12dc:	e3 0e       	add	r14, r19
    12de:	f1 1c       	adc	r15, r1
    12e0:	22 e0       	ldi	r18, 0x02	; 2
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	a8 01       	movw	r20, r16
    12e6:	60 e0       	ldi	r22, 0x00	; 0
    12e8:	c7 01       	movw	r24, r14
    12ea:	78 dd       	rcall	.-1296   	; 0xddc <adp_add_send_byte>
    12ec:	94 01       	movw	r18, r8
    12ee:	2f 5f       	subi	r18, 0xFF	; 255
    12f0:	3f 4f       	sbci	r19, 0xFF	; 255
    12f2:	a5 01       	movw	r20, r10
    12f4:	68 2f       	mov	r22, r24
    12f6:	c7 01       	movw	r24, r14
    12f8:	71 dd       	rcall	.-1310   	; 0xddc <adp_add_send_byte>
    12fa:	a8 01       	movw	r20, r16
    12fc:	4e 5f       	subi	r20, 0xFE	; 254
    12fe:	5f 4f       	sbci	r21, 0xFF	; 255
    1300:	23 e0       	ldi	r18, 0x03	; 3
    1302:	30 e0       	ldi	r19, 0x00	; 0
    1304:	68 2f       	mov	r22, r24
    1306:	c7 01       	movw	r24, r14
    1308:	69 dd       	rcall	.-1326   	; 0xddc <adp_add_send_byte>
    130a:	a8 01       	movw	r20, r16
    130c:	4b 5f       	subi	r20, 0xFB	; 251
    130e:	5f 4f       	sbci	r21, 0xFF	; 255
    1310:	22 e0       	ldi	r18, 0x02	; 2
    1312:	30 e0       	ldi	r19, 0x00	; 0
    1314:	68 2f       	mov	r22, r24
    1316:	c7 01       	movw	r24, r14
    1318:	61 dd       	rcall	.-1342   	; 0xddc <adp_add_send_byte>
    131a:	bc 01       	movw	r22, r24
    131c:	6c 5f       	subi	r22, 0xFC	; 252
    131e:	7f 4f       	sbci	r23, 0xFF	; 255
    1320:	a6 01       	movw	r20, r12
    1322:	ce 01       	movw	r24, r28
    1324:	8c 5f       	subi	r24, 0xFC	; 252
    1326:	9e 4f       	sbci	r25, 0xFE	; 254
    1328:	5a d2       	rcall	.+1204   	; 0x17de <adp_interface_transceive_procotol>
    132a:	41 e0       	ldi	r20, 0x01	; 1
    132c:	be 01       	movw	r22, r28
    132e:	6f 5f       	subi	r22, 0xFF	; 255
    1330:	7f 4f       	sbci	r23, 0xFF	; 255
    1332:	80 e3       	ldi	r24, 0x30	; 48
    1334:	59 dc       	rcall	.-1870   	; 0xbe8 <adp_wait_for_response>
    1336:	81 e0       	ldi	r24, 0x01	; 1
    1338:	99 81       	ldd	r25, Y+1	; 0x01
    133a:	91 30       	cpi	r25, 0x01	; 1
    133c:	09 f0       	breq	.+2      	; 0x1340 <adp_add_dashboard+0xf2>
    133e:	80 e0       	ldi	r24, 0x00	; 0
    1340:	cb 5f       	subi	r28, 0xFB	; 251
    1342:	dd 4f       	sbci	r29, 0xFD	; 253
    1344:	0f b6       	in	r0, 0x3f	; 63
    1346:	f8 94       	cli
    1348:	de bf       	out	0x3e, r29	; 62
    134a:	0f be       	out	0x3f, r0	; 63
    134c:	cd bf       	out	0x3d, r28	; 61
    134e:	df 91       	pop	r29
    1350:	cf 91       	pop	r28
    1352:	1f 91       	pop	r17
    1354:	0f 91       	pop	r16
    1356:	ff 90       	pop	r15
    1358:	ef 90       	pop	r14
    135a:	df 90       	pop	r13
    135c:	cf 90       	pop	r12
    135e:	bf 90       	pop	r11
    1360:	af 90       	pop	r10
    1362:	9f 90       	pop	r9
    1364:	8f 90       	pop	r8
    1366:	08 95       	ret

00001368 <adp_add_graph_to_dashboard>:
    1368:	8f 92       	push	r8
    136a:	9f 92       	push	r9
    136c:	af 92       	push	r10
    136e:	bf 92       	push	r11
    1370:	cf 92       	push	r12
    1372:	df 92       	push	r13
    1374:	ef 92       	push	r14
    1376:	ff 92       	push	r15
    1378:	0f 93       	push	r16
    137a:	1f 93       	push	r17
    137c:	cf 93       	push	r28
    137e:	df 93       	push	r29
    1380:	cd b7       	in	r28, 0x3d	; 61
    1382:	de b7       	in	r29, 0x3e	; 62
    1384:	c5 50       	subi	r28, 0x05	; 5
    1386:	d2 40       	sbci	r29, 0x02	; 2
    1388:	0f b6       	in	r0, 0x3f	; 63
    138a:	f8 94       	cli
    138c:	de bf       	out	0x3e, r29	; 62
    138e:	0f be       	out	0x3f, r0	; 63
    1390:	cd bf       	out	0x3d, r28	; 61
    1392:	8c 01       	movw	r16, r24
    1394:	5b 01       	movw	r10, r22
    1396:	fb 01       	movw	r30, r22
    1398:	01 90       	ld	r0, Z+
    139a:	00 20       	and	r0, r0
    139c:	e9 f7       	brne	.-6      	; 0x1398 <adp_add_graph_to_dashboard+0x30>
    139e:	31 97       	sbiw	r30, 0x01	; 1
    13a0:	4f 01       	movw	r8, r30
    13a2:	86 1a       	sub	r8, r22
    13a4:	97 0a       	sbc	r9, r23
    13a6:	6e 01       	movw	r12, r28
    13a8:	22 e0       	ldi	r18, 0x02	; 2
    13aa:	c2 0e       	add	r12, r18
    13ac:	d1 1c       	adc	r13, r1
    13ae:	82 e0       	ldi	r24, 0x02	; 2
    13b0:	91 e0       	ldi	r25, 0x01	; 1
    13b2:	f6 01       	movw	r30, r12
    13b4:	9c 01       	movw	r18, r24
    13b6:	11 92       	st	Z+, r1
    13b8:	21 50       	subi	r18, 0x01	; 1
    13ba:	30 40       	sbci	r19, 0x00	; 0
    13bc:	e1 f7       	brne	.-8      	; 0x13b6 <adp_add_graph_to_dashboard+0x4e>
    13be:	8f ef       	ldi	r24, 0xFF	; 255
    13c0:	cc 5f       	subi	r28, 0xFC	; 252
    13c2:	de 4f       	sbci	r29, 0xFE	; 254
    13c4:	88 83       	st	Y, r24
    13c6:	c4 50       	subi	r28, 0x04	; 4
    13c8:	d1 40       	sbci	r29, 0x01	; 1
    13ca:	8b e2       	ldi	r24, 0x2B	; 43
    13cc:	cb 5f       	subi	r28, 0xFB	; 251
    13ce:	de 4f       	sbci	r29, 0xFE	; 254
    13d0:	88 83       	st	Y, r24
    13d2:	c5 50       	subi	r28, 0x05	; 5
    13d4:	d1 40       	sbci	r29, 0x01	; 1
    13d6:	c4 01       	movw	r24, r8
    13d8:	8a 96       	adiw	r24, 0x2a	; 42
    13da:	ca 5f       	subi	r28, 0xFA	; 250
    13dc:	de 4f       	sbci	r29, 0xFE	; 254
    13de:	99 83       	std	Y+1, r25	; 0x01
    13e0:	88 83       	st	Y, r24
    13e2:	c6 50       	subi	r28, 0x06	; 6
    13e4:	d1 40       	sbci	r29, 0x01	; 1
    13e6:	68 94       	set
    13e8:	ee 24       	eor	r14, r14
    13ea:	e2 f8       	bld	r14, 2
    13ec:	ff 24       	eor	r15, r15
    13ee:	f3 94       	inc	r15
    13f0:	ec 0e       	add	r14, r28
    13f2:	fd 1e       	adc	r15, r29
    13f4:	34 e0       	ldi	r19, 0x04	; 4
    13f6:	e3 0e       	add	r14, r19
    13f8:	f1 1c       	adc	r15, r1
    13fa:	a8 01       	movw	r20, r16
    13fc:	60 e0       	ldi	r22, 0x00	; 0
    13fe:	70 e0       	ldi	r23, 0x00	; 0
    1400:	c7 01       	movw	r24, r14
    1402:	14 dd       	rcall	.-1496   	; 0xe2c <adp_add_dashboard_element_common_send_byte>
    1404:	a8 01       	movw	r20, r16
    1406:	42 5f       	subi	r20, 0xF2	; 242
    1408:	5f 4f       	sbci	r21, 0xFF	; 255
    140a:	23 e0       	ldi	r18, 0x03	; 3
    140c:	30 e0       	ldi	r19, 0x00	; 0
    140e:	68 2f       	mov	r22, r24
    1410:	c7 01       	movw	r24, r14
    1412:	e4 dc       	rcall	.-1592   	; 0xddc <adp_add_send_byte>
    1414:	a8 01       	movw	r20, r16
    1416:	4f 5e       	subi	r20, 0xEF	; 239
    1418:	5f 4f       	sbci	r21, 0xFF	; 255
    141a:	23 e0       	ldi	r18, 0x03	; 3
    141c:	30 e0       	ldi	r19, 0x00	; 0
    141e:	68 2f       	mov	r22, r24
    1420:	c7 01       	movw	r24, r14
    1422:	dc dc       	rcall	.-1608   	; 0xddc <adp_add_send_byte>
    1424:	a8 01       	movw	r20, r16
    1426:	4c 5e       	subi	r20, 0xEC	; 236
    1428:	5f 4f       	sbci	r21, 0xFF	; 255
    142a:	23 e0       	ldi	r18, 0x03	; 3
    142c:	30 e0       	ldi	r19, 0x00	; 0
    142e:	68 2f       	mov	r22, r24
    1430:	c7 01       	movw	r24, r14
    1432:	d4 dc       	rcall	.-1624   	; 0xddc <adp_add_send_byte>
    1434:	94 01       	movw	r18, r8
    1436:	2f 5f       	subi	r18, 0xFF	; 255
    1438:	3f 4f       	sbci	r19, 0xFF	; 255
    143a:	a5 01       	movw	r20, r10
    143c:	68 2f       	mov	r22, r24
    143e:	c7 01       	movw	r24, r14
    1440:	cd dc       	rcall	.-1638   	; 0xddc <adp_add_send_byte>
    1442:	a8 01       	movw	r20, r16
    1444:	49 5e       	subi	r20, 0xE9	; 233
    1446:	5f 4f       	sbci	r21, 0xFF	; 255
    1448:	21 e0       	ldi	r18, 0x01	; 1
    144a:	30 e0       	ldi	r19, 0x00	; 0
    144c:	68 2f       	mov	r22, r24
    144e:	c7 01       	movw	r24, r14
    1450:	c5 dc       	rcall	.-1654   	; 0xddc <adp_add_send_byte>
    1452:	a8 01       	movw	r20, r16
    1454:	48 5e       	subi	r20, 0xE8	; 232
    1456:	5f 4f       	sbci	r21, 0xFF	; 255
    1458:	24 e0       	ldi	r18, 0x04	; 4
    145a:	30 e0       	ldi	r19, 0x00	; 0
    145c:	68 2f       	mov	r22, r24
    145e:	c7 01       	movw	r24, r14
    1460:	bd dc       	rcall	.-1670   	; 0xddc <adp_add_send_byte>
    1462:	a8 01       	movw	r20, r16
    1464:	44 5e       	subi	r20, 0xE4	; 228
    1466:	5f 4f       	sbci	r21, 0xFF	; 255
    1468:	24 e0       	ldi	r18, 0x04	; 4
    146a:	30 e0       	ldi	r19, 0x00	; 0
    146c:	68 2f       	mov	r22, r24
    146e:	c7 01       	movw	r24, r14
    1470:	b5 dc       	rcall	.-1686   	; 0xddc <adp_add_send_byte>
    1472:	a8 01       	movw	r20, r16
    1474:	40 5e       	subi	r20, 0xE0	; 224
    1476:	5f 4f       	sbci	r21, 0xFF	; 255
    1478:	24 e0       	ldi	r18, 0x04	; 4
    147a:	30 e0       	ldi	r19, 0x00	; 0
    147c:	68 2f       	mov	r22, r24
    147e:	c7 01       	movw	r24, r14
    1480:	ad dc       	rcall	.-1702   	; 0xddc <adp_add_send_byte>
    1482:	a8 01       	movw	r20, r16
    1484:	4c 5d       	subi	r20, 0xDC	; 220
    1486:	5f 4f       	sbci	r21, 0xFF	; 255
    1488:	24 e0       	ldi	r18, 0x04	; 4
    148a:	30 e0       	ldi	r19, 0x00	; 0
    148c:	68 2f       	mov	r22, r24
    148e:	c7 01       	movw	r24, r14
    1490:	a5 dc       	rcall	.-1718   	; 0xddc <adp_add_send_byte>
    1492:	a8 01       	movw	r20, r16
    1494:	48 5d       	subi	r20, 0xD8	; 216
    1496:	5f 4f       	sbci	r21, 0xFF	; 255
    1498:	21 e0       	ldi	r18, 0x01	; 1
    149a:	30 e0       	ldi	r19, 0x00	; 0
    149c:	68 2f       	mov	r22, r24
    149e:	c7 01       	movw	r24, r14
    14a0:	9d dc       	rcall	.-1734   	; 0xddc <adp_add_send_byte>
    14a2:	bc 01       	movw	r22, r24
    14a4:	6c 5f       	subi	r22, 0xFC	; 252
    14a6:	7f 4f       	sbci	r23, 0xFF	; 255
    14a8:	a6 01       	movw	r20, r12
    14aa:	ce 01       	movw	r24, r28
    14ac:	8c 5f       	subi	r24, 0xFC	; 252
    14ae:	9e 4f       	sbci	r25, 0xFE	; 254
    14b0:	96 d1       	rcall	.+812    	; 0x17de <adp_interface_transceive_procotol>
    14b2:	41 e0       	ldi	r20, 0x01	; 1
    14b4:	be 01       	movw	r22, r28
    14b6:	6f 5f       	subi	r22, 0xFF	; 255
    14b8:	7f 4f       	sbci	r23, 0xFF	; 255
    14ba:	80 e3       	ldi	r24, 0x30	; 48
    14bc:	95 db       	rcall	.-2262   	; 0xbe8 <adp_wait_for_response>
    14be:	81 e0       	ldi	r24, 0x01	; 1
    14c0:	99 81       	ldd	r25, Y+1	; 0x01
    14c2:	91 30       	cpi	r25, 0x01	; 1
    14c4:	09 f0       	breq	.+2      	; 0x14c8 <adp_add_graph_to_dashboard+0x160>
    14c6:	80 e0       	ldi	r24, 0x00	; 0
    14c8:	cb 5f       	subi	r28, 0xFB	; 251
    14ca:	dd 4f       	sbci	r29, 0xFD	; 253
    14cc:	0f b6       	in	r0, 0x3f	; 63
    14ce:	f8 94       	cli
    14d0:	de bf       	out	0x3e, r29	; 62
    14d2:	0f be       	out	0x3f, r0	; 63
    14d4:	cd bf       	out	0x3d, r28	; 61
    14d6:	df 91       	pop	r29
    14d8:	cf 91       	pop	r28
    14da:	1f 91       	pop	r17
    14dc:	0f 91       	pop	r16
    14de:	ff 90       	pop	r15
    14e0:	ef 90       	pop	r14
    14e2:	df 90       	pop	r13
    14e4:	cf 90       	pop	r12
    14e6:	bf 90       	pop	r11
    14e8:	af 90       	pop	r10
    14ea:	9f 90       	pop	r9
    14ec:	8f 90       	pop	r8
    14ee:	08 95       	ret

000014f0 <adp_add_stream_to_element>:
* \return Status from PC
* \retval true   Message received and accepted
* \retval false  Message received but not accepted
*/
bool adp_add_stream_to_element(struct adp_conf_add_stream_to_element *const config)
{
    14f0:	cf 92       	push	r12
    14f2:	df 92       	push	r13
    14f4:	ef 92       	push	r14
    14f6:	ff 92       	push	r15
    14f8:	0f 93       	push	r16
    14fa:	1f 93       	push	r17
    14fc:	cf 93       	push	r28
    14fe:	df 93       	push	r29
    1500:	cd b7       	in	r28, 0x3d	; 61
    1502:	de b7       	in	r29, 0x3e	; 62
    1504:	c5 50       	subi	r28, 0x05	; 5
    1506:	d2 40       	sbci	r29, 0x02	; 2
    1508:	0f b6       	in	r0, 0x3f	; 63
    150a:	f8 94       	cli
    150c:	de bf       	out	0x3e, r29	; 62
    150e:	0f be       	out	0x3f, r0	; 63
    1510:	cd bf       	out	0x3d, r28	; 61
    1512:	8c 01       	movw	r16, r24
	uint8_t ack;
	uint16_t data_length;
	uint16_t index = 0;
	uint8_t rx_buf[ADP_MAX_PACKET_LENGTH] = {0,};
    1514:	6e 01       	movw	r12, r28
    1516:	22 e0       	ldi	r18, 0x02	; 2
    1518:	c2 0e       	add	r12, r18
    151a:	d1 1c       	adc	r13, r1
    151c:	82 e0       	ldi	r24, 0x02	; 2
    151e:	91 e0       	ldi	r25, 0x01	; 1
    1520:	f6 01       	movw	r30, r12
    1522:	9c 01       	movw	r18, r24
    1524:	11 92       	st	Z+, r1
    1526:	21 50       	subi	r18, 0x01	; 1
    1528:	30 40       	sbci	r19, 0x00	; 0
    152a:	e1 f7       	brne	.-8      	; 0x1524 <adp_add_stream_to_element+0x34>
	
	struct adp_msg_format msg_format;
	
	msg_format.protocol_token = ADP_TOKEN;
    152c:	8f ef       	ldi	r24, 0xFF	; 255
    152e:	cc 5f       	subi	r28, 0xFC	; 252
    1530:	de 4f       	sbci	r29, 0xFE	; 254
    1532:	88 83       	st	Y, r24
    1534:	c4 50       	subi	r28, 0x04	; 4
    1536:	d1 40       	sbci	r29, 0x01	; 1
	msg_format.protocol_msg_id = MSG_CONF_ADD_STREAM_TO_ELEMENT;
    1538:	8c e2       	ldi	r24, 0x2C	; 44
    153a:	cb 5f       	subi	r28, 0xFB	; 251
    153c:	de 4f       	sbci	r29, 0xFE	; 254
    153e:	88 83       	st	Y, r24
    1540:	c5 50       	subi	r28, 0x05	; 5
    1542:	d1 40       	sbci	r29, 0x01	; 1
	msg_format.data_length = MSG_CONF_ADD_STREAM_TO_ELEMENT_LEN;
    1544:	86 e0       	ldi	r24, 0x06	; 6
    1546:	90 e0       	ldi	r25, 0x00	; 0
    1548:	ca 5f       	subi	r28, 0xFA	; 250
    154a:	de 4f       	sbci	r29, 0xFE	; 254
    154c:	99 83       	std	Y+1, r25	; 0x01
    154e:	88 83       	st	Y, r24
    1550:	c6 50       	subi	r28, 0x06	; 6
    1552:	d1 40       	sbci	r29, 0x01	; 1
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&config->dashboard_id, 2);
    1554:	68 94       	set
    1556:	ee 24       	eor	r14, r14
    1558:	e2 f8       	bld	r14, 2
    155a:	ff 24       	eor	r15, r15
    155c:	f3 94       	inc	r15
    155e:	ec 0e       	add	r14, r28
    1560:	fd 1e       	adc	r15, r29
    1562:	34 e0       	ldi	r19, 0x04	; 4
    1564:	e3 0e       	add	r14, r19
    1566:	f1 1c       	adc	r15, r1
    1568:	22 e0       	ldi	r18, 0x02	; 2
    156a:	30 e0       	ldi	r19, 0x00	; 0
    156c:	a8 01       	movw	r20, r16
    156e:	60 e0       	ldi	r22, 0x00	; 0
    1570:	c7 01       	movw	r24, r14
    1572:	34 dc       	rcall	.-1944   	; 0xddc <adp_add_send_byte>
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&config->element_id, 2);
    1574:	a8 01       	movw	r20, r16
    1576:	4e 5f       	subi	r20, 0xFE	; 254
    1578:	5f 4f       	sbci	r21, 0xFF	; 255
    157a:	22 e0       	ldi	r18, 0x02	; 2
    157c:	30 e0       	ldi	r19, 0x00	; 0
    157e:	68 2f       	mov	r22, r24
    1580:	c7 01       	movw	r24, r14
    1582:	2c dc       	rcall	.-1960   	; 0xddc <adp_add_send_byte>
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&config->stream_id, 2);
    1584:	a8 01       	movw	r20, r16
    1586:	4c 5f       	subi	r20, 0xFC	; 252
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
    158a:	22 e0       	ldi	r18, 0x02	; 2
    158c:	30 e0       	ldi	r19, 0x00	; 0
    158e:	68 2f       	mov	r22, r24
    1590:	c7 01       	movw	r24, r14
    1592:	24 dc       	rcall	.-1976   	; 0xddc <adp_add_send_byte>
	data_length = ADP_LENGTH_PACKET_HEADER + index;
	
	/* Send the protocol packet data */
	adp_interface_transceive_procotol((uint8_t*)&msg_format, data_length, rx_buf);
    1594:	bc 01       	movw	r22, r24
    1596:	6c 5f       	subi	r22, 0xFC	; 252
    1598:	7f 4f       	sbci	r23, 0xFF	; 255
    159a:	a6 01       	movw	r20, r12
    159c:	ce 01       	movw	r24, r28
    159e:	8c 5f       	subi	r24, 0xFC	; 252
    15a0:	9e 4f       	sbci	r25, 0xFE	; 254
    15a2:	1d d1       	rcall	.+570    	; 0x17de <adp_interface_transceive_procotol>

	/* Wait for response and return status */
	adp_wait_for_response(MSG_CONF_ACK, &ack, 1);
    15a4:	41 e0       	ldi	r20, 0x01	; 1
    15a6:	be 01       	movw	r22, r28
    15a8:	6f 5f       	subi	r22, 0xFF	; 255
    15aa:	7f 4f       	sbci	r23, 0xFF	; 255
    15ac:	80 e3       	ldi	r24, 0x30	; 48
    15ae:	1c db       	rcall	.-2504   	; 0xbe8 <adp_wait_for_response>
	return (ack == ADP_ACK_OK);
    15b0:	81 e0       	ldi	r24, 0x01	; 1
    15b2:	99 81       	ldd	r25, Y+1	; 0x01
    15b4:	91 30       	cpi	r25, 0x01	; 1
    15b6:	09 f0       	breq	.+2      	; 0x15ba <adp_add_stream_to_element+0xca>
    15b8:	80 e0       	ldi	r24, 0x00	; 0
}
    15ba:	cb 5f       	subi	r28, 0xFB	; 251
    15bc:	dd 4f       	sbci	r29, 0xFD	; 253
    15be:	0f b6       	in	r0, 0x3f	; 63
    15c0:	f8 94       	cli
    15c2:	de bf       	out	0x3e, r29	; 62
    15c4:	0f be       	out	0x3f, r0	; 63
    15c6:	cd bf       	out	0x3d, r28	; 61
    15c8:	df 91       	pop	r29
    15ca:	cf 91       	pop	r28
    15cc:	1f 91       	pop	r17
    15ce:	0f 91       	pop	r16
    15d0:	ff 90       	pop	r15
    15d2:	ef 90       	pop	r14
    15d4:	df 90       	pop	r13
    15d6:	cf 90       	pop	r12
    15d8:	08 95       	ret

000015da <adp_transceive_stream>:

bool adp_transceive_stream(struct adp_msg_data_stream *const stream_data, uint8_t *protocol_buf)
{
    15da:	af 92       	push	r10
    15dc:	bf 92       	push	r11
    15de:	df 92       	push	r13
    15e0:	ef 92       	push	r14
    15e2:	ff 92       	push	r15
    15e4:	0f 93       	push	r16
    15e6:	1f 93       	push	r17
    15e8:	cf 93       	push	r28
    15ea:	df 93       	push	r29
    15ec:	cd b7       	in	r28, 0x3d	; 61
    15ee:	de b7       	in	r29, 0x3e	; 62
    15f0:	c4 50       	subi	r28, 0x04	; 4
    15f2:	d2 40       	sbci	r29, 0x02	; 2
    15f4:	0f b6       	in	r0, 0x3f	; 63
    15f6:	f8 94       	cli
    15f8:	de bf       	out	0x3e, r29	; 62
    15fa:	0f be       	out	0x3f, r0	; 63
    15fc:	cd bf       	out	0x3d, r28	; 61
    15fe:	7c 01       	movw	r14, r24
    1600:	5b 01       	movw	r10, r22
	uint8_t stream_num;	
	uint16_t data_length;
	uint16_t index = 0;
	uint8_t rx_buf[ADP_MAX_PACKET_LENGTH] = {0,};
    1602:	fe 01       	movw	r30, r28
    1604:	31 96       	adiw	r30, 0x01	; 1
    1606:	82 e0       	ldi	r24, 0x02	; 2
    1608:	91 e0       	ldi	r25, 0x01	; 1
    160a:	df 01       	movw	r26, r30
    160c:	9c 01       	movw	r18, r24
    160e:	1d 92       	st	X+, r1
    1610:	21 50       	subi	r18, 0x01	; 1
    1612:	30 40       	sbci	r19, 0x00	; 0
    1614:	e1 f7       	brne	.-8      	; 0x160e <adp_transceive_stream+0x34>
	
	struct adp_msg_format msg_format;
	
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&stream_data->number_of_streams, 1);
    1616:	21 e0       	ldi	r18, 0x01	; 1
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	a7 01       	movw	r20, r14
    161c:	60 e0       	ldi	r22, 0x00	; 0
    161e:	ce 01       	movw	r24, r28
    1620:	89 5f       	subi	r24, 0xF9	; 249
    1622:	9e 4f       	sbci	r25, 0xFE	; 254
    1624:	db db       	rcall	.-2122   	; 0xddc <adp_add_send_byte>
	/* find packet size */
	for (stream_num = 0; stream_num < stream_data->number_of_streams; stream_num++) {
    1626:	d7 01       	movw	r26, r14
    1628:	2c 91       	ld	r18, X
    162a:	22 23       	and	r18, r18
    162c:	99 f1       	breq	.+102    	; 0x1694 <adp_transceive_stream+0xba>
    162e:	d1 2c       	mov	r13, r1
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
						(uint8_t*)&stream_data->stream[stream_num].stream_id, 2);
    1630:	2d 2d       	mov	r18, r13
    1632:	30 e0       	ldi	r19, 0x00	; 0
    1634:	89 01       	movw	r16, r18
    1636:	00 0f       	add	r16, r16
    1638:	11 1f       	adc	r17, r17
    163a:	00 0f       	add	r16, r16
    163c:	11 1f       	adc	r17, r17
    163e:	02 0f       	add	r16, r18
    1640:	13 1f       	adc	r17, r19
    1642:	a8 01       	movw	r20, r16
    1644:	4f 5f       	subi	r20, 0xFF	; 255
    1646:	5f 4f       	sbci	r21, 0xFF	; 255
    1648:	4e 0d       	add	r20, r14
    164a:	5f 1d       	adc	r21, r15
	struct adp_msg_format msg_format;
	
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&stream_data->number_of_streams, 1);
	/* find packet size */
	for (stream_num = 0; stream_num < stream_data->number_of_streams; stream_num++) {
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
    164c:	22 e0       	ldi	r18, 0x02	; 2
    164e:	30 e0       	ldi	r19, 0x00	; 0
    1650:	68 2f       	mov	r22, r24
    1652:	ce 01       	movw	r24, r28
    1654:	89 5f       	subi	r24, 0xF9	; 249
    1656:	9e 4f       	sbci	r25, 0xFE	; 254
    1658:	c1 db       	rcall	.-2174   	; 0xddc <adp_add_send_byte>
						(uint8_t*)&stream_data->stream[stream_num].stream_id, 2);
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
    165a:	a8 01       	movw	r20, r16
    165c:	4d 5f       	subi	r20, 0xFD	; 253
    165e:	5f 4f       	sbci	r21, 0xFF	; 255
    1660:	4e 0d       	add	r20, r14
    1662:	5f 1d       	adc	r21, r15
    1664:	21 e0       	ldi	r18, 0x01	; 1
    1666:	30 e0       	ldi	r19, 0x00	; 0
    1668:	68 2f       	mov	r22, r24
    166a:	ce 01       	movw	r24, r28
    166c:	89 5f       	subi	r24, 0xF9	; 249
    166e:	9e 4f       	sbci	r25, 0xFE	; 254
    1670:	b5 db       	rcall	.-2198   	; 0xddc <adp_add_send_byte>
						(uint8_t*)&stream_data->stream[stream_num].data_size, 1);
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
						stream_data->stream[stream_num].data, \
						stream_data->stream[stream_num].data_size);
    1672:	f7 01       	movw	r30, r14
    1674:	e0 0f       	add	r30, r16
    1676:	f1 1f       	adc	r31, r17
	for (stream_num = 0; stream_num < stream_data->number_of_streams; stream_num++) {
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
						(uint8_t*)&stream_data->stream[stream_num].stream_id, 2);
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
						(uint8_t*)&stream_data->stream[stream_num].data_size, 1);
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
    1678:	23 81       	ldd	r18, Z+3	; 0x03
    167a:	30 e0       	ldi	r19, 0x00	; 0
    167c:	44 81       	ldd	r20, Z+4	; 0x04
    167e:	55 81       	ldd	r21, Z+5	; 0x05
    1680:	68 2f       	mov	r22, r24
    1682:	ce 01       	movw	r24, r28
    1684:	89 5f       	subi	r24, 0xF9	; 249
    1686:	9e 4f       	sbci	r25, 0xFE	; 254
    1688:	a9 db       	rcall	.-2222   	; 0xddc <adp_add_send_byte>
	
	struct adp_msg_format msg_format;
	
	index = adp_add_send_byte((uint8_t*)&msg_format.data, index, (uint8_t*)&stream_data->number_of_streams, 1);
	/* find packet size */
	for (stream_num = 0; stream_num < stream_data->number_of_streams; stream_num++) {
    168a:	d3 94       	inc	r13
    168c:	f7 01       	movw	r30, r14
    168e:	20 81       	ld	r18, Z
    1690:	d2 16       	cp	r13, r18
    1692:	70 f2       	brcs	.-100    	; 0x1630 <adp_transceive_stream+0x56>
		index = adp_add_send_byte((uint8_t*)&msg_format.data, index, \
						stream_data->stream[stream_num].data, \
						stream_data->stream[stream_num].data_size);
	}
	
	msg_format.protocol_token = ADP_TOKEN;
    1694:	2f ef       	ldi	r18, 0xFF	; 255
    1696:	cd 5f       	subi	r28, 0xFD	; 253
    1698:	de 4f       	sbci	r29, 0xFE	; 254
    169a:	28 83       	st	Y, r18
    169c:	c3 50       	subi	r28, 0x03	; 3
    169e:	d1 40       	sbci	r29, 0x01	; 1
	msg_format.protocol_msg_id = MSG_DATA_STREAM;
    16a0:	20 e4       	ldi	r18, 0x40	; 64
    16a2:	cc 5f       	subi	r28, 0xFC	; 252
    16a4:	de 4f       	sbci	r29, 0xFE	; 254
    16a6:	28 83       	st	Y, r18
    16a8:	c4 50       	subi	r28, 0x04	; 4
    16aa:	d1 40       	sbci	r29, 0x01	; 1
	msg_format.data_length = index;
    16ac:	cb 5f       	subi	r28, 0xFB	; 251
    16ae:	de 4f       	sbci	r29, 0xFE	; 254
    16b0:	99 83       	std	Y+1, r25	; 0x01
    16b2:	88 83       	st	Y, r24
    16b4:	c5 50       	subi	r28, 0x05	; 5
    16b6:	d1 40       	sbci	r29, 0x01	; 1
	data_length = ADP_LENGTH_PACKET_HEADER + index;
    16b8:	8c 01       	movw	r16, r24
    16ba:	0c 5f       	subi	r16, 0xFC	; 252
    16bc:	1f 4f       	sbci	r17, 0xFF	; 255
	
	/* Send the protocol packet data */
	adp_interface_transceive_procotol((uint8_t*)&msg_format, data_length, rx_buf);
    16be:	ae 01       	movw	r20, r28
    16c0:	4f 5f       	subi	r20, 0xFF	; 255
    16c2:	5f 4f       	sbci	r21, 0xFF	; 255
    16c4:	b8 01       	movw	r22, r16
    16c6:	ce 01       	movw	r24, r28
    16c8:	8d 5f       	subi	r24, 0xFD	; 253
    16ca:	9e 4f       	sbci	r25, 0xFE	; 254
    16cc:	88 d0       	rcall	.+272    	; 0x17de <adp_interface_transceive_procotol>
	
	return adp_protocol_add_byte(MSG_RES_DATA, rx_buf, data_length, protocol_buf);
    16ce:	95 01       	movw	r18, r10
    16d0:	40 2f       	mov	r20, r16
    16d2:	be 01       	movw	r22, r28
    16d4:	6f 5f       	subi	r22, 0xFF	; 255
    16d6:	7f 4f       	sbci	r23, 0xFF	; 255
    16d8:	84 e1       	ldi	r24, 0x14	; 20
    16da:	6c d9       	rcall	.-3368   	; 0x9b4 <adp_protocol_add_byte>
}
    16dc:	cc 5f       	subi	r28, 0xFC	; 252
    16de:	dd 4f       	sbci	r29, 0xFD	; 253
    16e0:	0f b6       	in	r0, 0x3f	; 63
    16e2:	f8 94       	cli
    16e4:	de bf       	out	0x3e, r29	; 62
    16e6:	0f be       	out	0x3f, r0	; 63
    16e8:	cd bf       	out	0x3d, r28	; 61
    16ea:	df 91       	pop	r29
    16ec:	cf 91       	pop	r28
    16ee:	1f 91       	pop	r17
    16f0:	0f 91       	pop	r16
    16f2:	ff 90       	pop	r15
    16f4:	ef 90       	pop	r14
    16f6:	df 90       	pop	r13
    16f8:	bf 90       	pop	r11
    16fa:	af 90       	pop	r10
    16fc:	08 95       	ret

000016fe <adp_transceive_single_stream>:
* \param[in] data_size Size of data to send
*
* \return None
*/
bool adp_transceive_single_stream(uint16_t stream_id, uint8_t* data, uint8_t data_size, uint8_t* protocol_buf)
{
    16fe:	cf 93       	push	r28
    1700:	df 93       	push	r29
    1702:	cd b7       	in	r28, 0x3d	; 61
    1704:	de b7       	in	r29, 0x3e	; 62
    1706:	6b 97       	sbiw	r28, 0x1b	; 27
    1708:	0f b6       	in	r0, 0x3f	; 63
    170a:	f8 94       	cli
    170c:	de bf       	out	0x3e, r29	; 62
    170e:	0f be       	out	0x3f, r0	; 63
    1710:	cd bf       	out	0x3d, r28	; 61
	struct adp_msg_data_stream data_stream;
	volatile uint8_t status;

	data_stream.number_of_streams = 1;
    1712:	51 e0       	ldi	r21, 0x01	; 1
    1714:	59 83       	std	Y+1, r21	; 0x01
	data_stream.stream[0].stream_id = stream_id;
    1716:	9b 83       	std	Y+3, r25	; 0x03
    1718:	8a 83       	std	Y+2, r24	; 0x02
	data_stream.stream[0].data_size = data_size;
    171a:	4c 83       	std	Y+4, r20	; 0x04
	data_stream.stream[0].data = data;
    171c:	7e 83       	std	Y+6, r23	; 0x06
    171e:	6d 83       	std	Y+5, r22	; 0x05
	status = adp_transceive_stream(&data_stream, protocol_buf);
    1720:	b9 01       	movw	r22, r18
    1722:	ce 01       	movw	r24, r28
    1724:	01 96       	adiw	r24, 0x01	; 1
    1726:	59 df       	rcall	.-334    	; 0x15da <adp_transceive_stream>
    1728:	8b 8f       	std	Y+27, r24	; 0x1b
	
	return status;
    172a:	9b 8d       	ldd	r25, Y+27	; 0x1b
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	91 11       	cpse	r25, r1
    1730:	01 c0       	rjmp	.+2      	; 0x1734 <adp_transceive_single_stream+0x36>
    1732:	80 e0       	ldi	r24, 0x00	; 0
}
    1734:	6b 96       	adiw	r28, 0x1b	; 27
    1736:	0f b6       	in	r0, 0x3f	; 63
    1738:	f8 94       	cli
    173a:	de bf       	out	0x3e, r29	; 62
    173c:	0f be       	out	0x3f, r0	; 63
    173e:	cd bf       	out	0x3d, r28	; 61
    1740:	df 91       	pop	r29
    1742:	cf 91       	pop	r28
    1744:	08 95       	ret

00001746 <adp_interface_read_response>:

/**
* \brief Read response on UART from PC
*/
enum status_code adp_interface_read_response(uint8_t* rx_buf, uint16_t length)
{
    1746:	1f 93       	push	r17
    1748:	cf 93       	push	r28
    174a:	df 93       	push	r29
    174c:	ec 01       	movw	r28, r24
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    174e:	ea e4       	ldi	r30, 0x4A	; 74
    1750:	f4 e0       	ldi	r31, 0x04	; 4
    1752:	91 81       	ldd	r25, Z+1	; 0x01
    1754:	80 81       	ld	r24, Z
	uint16_t i=0;
	uint8_t get_buffer_size;

	if(ring_buffer_is_empty(&ring_buffer_in))
    1756:	98 17       	cp	r25, r24
    1758:	79 f1       	breq	.+94     	; 0x17b8 <adp_interface_read_response+0x72>
	{
		return ERR_TIMEOUT;
	}	
	//--------------------
	if(ring_buffer_in.write_offset < ring_buffer_in.read_offset )  
    175a:	90 81       	ld	r25, Z
    175c:	81 81       	ldd	r24, Z+1	; 0x01
    175e:	98 17       	cp	r25, r24
    1760:	48 f4       	brcc	.+18     	; 0x1774 <adp_interface_read_response+0x2e>
	{
		get_buffer_size =  ring_buffer_in.read_offset   -    ring_buffer_out.write_offset;
    1762:	90 91 4b 04 	lds	r25, 0x044B	; 0x80044b <ring_buffer_in+0x1>
    1766:	e4 e5       	ldi	r30, 0x54	; 84
    1768:	f4 e0       	ldi	r31, 0x04	; 4
    176a:	80 81       	ld	r24, Z
    176c:	98 1b       	sub	r25, r24
		get_buffer_size =  ring_buffer_out.size          -    get_buffer_size;
    176e:	82 81       	ldd	r24, Z+2	; 0x02
    1770:	89 1b       	sub	r24, r25
    1772:	26 c0       	rjmp	.+76     	; 0x17c0 <adp_interface_read_response+0x7a>
	}
	else
	{
		get_buffer_size =  ring_buffer_in.write_offset  -    ring_buffer_in.read_offset;
    1774:	ea e4       	ldi	r30, 0x4A	; 74
    1776:	f4 e0       	ldi	r31, 0x04	; 4
    1778:	80 81       	ld	r24, Z
    177a:	91 81       	ldd	r25, Z+1	; 0x01
    177c:	89 1b       	sub	r24, r25
    177e:	20 c0       	rjmp	.+64     	; 0x17c0 <adp_interface_read_response+0x7a>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1780:	81 81       	ldd	r24, Z+1	; 0x01
    1782:	a3 81       	ldd	r26, Z+3	; 0x03
    1784:	b4 81       	ldd	r27, Z+4	; 0x04
    1786:	a8 0f       	add	r26, r24
    1788:	b1 1d       	adc	r27, r1
    178a:	8c 91       	ld	r24, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    178c:	91 81       	ldd	r25, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    178e:	a9 2f       	mov	r26, r25
    1790:	b0 e0       	ldi	r27, 0x00	; 0
    1792:	22 81       	ldd	r18, Z+2	; 0x02
    1794:	30 e0       	ldi	r19, 0x00	; 0
    1796:	21 50       	subi	r18, 0x01	; 1
    1798:	31 09       	sbc	r19, r1
    179a:	a2 17       	cp	r26, r18
    179c:	b3 07       	cpc	r27, r19
    179e:	11 f0       	breq	.+4      	; 0x17a4 <adp_interface_read_response+0x5e>
    17a0:	9f 5f       	subi	r25, 0xFF	; 255
    17a2:	01 c0       	rjmp	.+2      	; 0x17a6 <adp_interface_read_response+0x60>
    17a4:	91 2f       	mov	r25, r17
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    17a6:	91 83       	std	Z+1, r25	; 0x01
		return ERR_BUSY;
	}
	//--------------------
	for(i=0;i<=length;i++)
	{
			*rx_buf=ring_buffer_get(&ring_buffer_in);
    17a8:	89 93       	st	Y+, r24
	if(get_buffer_size-1 != length)
	{
		return ERR_BUSY;
	}
	//--------------------
	for(i=0;i<=length;i++)
    17aa:	4f 5f       	subi	r20, 0xFF	; 255
    17ac:	5f 4f       	sbci	r21, 0xFF	; 255
    17ae:	64 17       	cp	r22, r20
    17b0:	75 07       	cpc	r23, r21
    17b2:	30 f7       	brcc	.-52     	; 0x1780 <adp_interface_read_response+0x3a>
	{
			*rx_buf=ring_buffer_get(&ring_buffer_in);
			rx_buf++;
	}
	//--------------------
	return STATUS_OK;
    17b4:	80 e0       	ldi	r24, 0x00	; 0
    17b6:	0f c0       	rjmp	.+30     	; 0x17d6 <adp_interface_read_response+0x90>
	uint16_t i=0;
	uint8_t get_buffer_size;

	if(ring_buffer_is_empty(&ring_buffer_in))
	{
		return ERR_TIMEOUT;
    17b8:	8d ef       	ldi	r24, 0xFD	; 253
    17ba:	0d c0       	rjmp	.+26     	; 0x17d6 <adp_interface_read_response+0x90>
		get_buffer_size =  ring_buffer_in.write_offset  -    ring_buffer_in.read_offset;
	}
	//--------------------
	if(get_buffer_size-1 != length)
	{
		return ERR_BUSY;
    17bc:	86 ef       	ldi	r24, 0xF6	; 246
    17be:	0b c0       	rjmp	.+22     	; 0x17d6 <adp_interface_read_response+0x90>
	else
	{
		get_buffer_size =  ring_buffer_in.write_offset  -    ring_buffer_in.read_offset;
	}
	//--------------------
	if(get_buffer_size-1 != length)
    17c0:	90 e0       	ldi	r25, 0x00	; 0
    17c2:	01 97       	sbiw	r24, 0x01	; 1
    17c4:	68 17       	cp	r22, r24
    17c6:	79 07       	cpc	r23, r25
    17c8:	c9 f7       	brne	.-14     	; 0x17bc <adp_interface_read_response+0x76>
    17ca:	40 e0       	ldi	r20, 0x00	; 0
    17cc:	50 e0       	ldi	r21, 0x00	; 0
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    17ce:	ea e4       	ldi	r30, 0x4A	; 74
    17d0:	f4 e0       	ldi	r31, 0x04	; 4
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    17d2:	10 e0       	ldi	r17, 0x00	; 0
    17d4:	d5 cf       	rjmp	.-86     	; 0x1780 <adp_interface_read_response+0x3a>
			*rx_buf=ring_buffer_get(&ring_buffer_in);
			rx_buf++;
	}
	//--------------------
	return STATUS_OK;
}
    17d6:	df 91       	pop	r29
    17d8:	cf 91       	pop	r28
    17da:	1f 91       	pop	r17
    17dc:	08 95       	ret

000017de <adp_interface_transceive_procotol>:

/**
* \brief Sends and reads protocol packet data byte on UART
*/
void adp_interface_transceive_procotol(uint8_t* tx_buf, uint16_t length, uint8_t* rx_buf)
{
    17de:	0f 93       	push	r16
    17e0:	1f 93       	push	r17
    17e2:	cf 93       	push	r28
    17e4:	df 93       	push	r29

static enum status_code adp_interface_send(uint8_t* tx_buf, uint16_t length)
{
	enum status_code status;
	
	while(length--)
    17e6:	61 15       	cp	r22, r1
    17e8:	71 05       	cpc	r23, r1
    17ea:	49 f0       	breq	.+18     	; 0x17fe <adp_interface_transceive_procotol+0x20>
    17ec:	08 2f       	mov	r16, r24
    17ee:	19 2f       	mov	r17, r25
    17f0:	eb 01       	movw	r28, r22
	{
		uart_putchar(*tx_buf++);	 
    17f2:	f8 01       	movw	r30, r16
    17f4:	81 91       	ld	r24, Z+
    17f6:	8f 01       	movw	r16, r30
    17f8:	32 d1       	rcall	.+612    	; 0x1a5e <uart_putchar>
    17fa:	21 97       	sbiw	r28, 0x01	; 1

static enum status_code adp_interface_send(uint8_t* tx_buf, uint16_t length)
{
	enum status_code status;
	
	while(length--)
    17fc:	d1 f7       	brne	.-12     	; 0x17f2 <adp_interface_transceive_procotol+0x14>
* \brief Sends and reads protocol packet data byte on UART
*/
void adp_interface_transceive_procotol(uint8_t* tx_buf, uint16_t length, uint8_t* rx_buf)
{
	adp_interface_send(tx_buf, length);	
}
    17fe:	df 91       	pop	r29
    1800:	cf 91       	pop	r28
    1802:	1f 91       	pop	r17
    1804:	0f 91       	pop	r16
    1806:	08 95       	ret

00001808 <calendar_leapyear>:
		}
	}
	// Calculate number of seconds
	date_out->second = date_end->second - date_start->second;

}
    1808:	ac 01       	movw	r20, r24
    180a:	83 70       	andi	r24, 0x03	; 3
    180c:	99 27       	eor	r25, r25
    180e:	89 2b       	or	r24, r25
    1810:	61 f5       	brne	.+88     	; 0x186a <calendar_leapyear+0x62>
    1812:	9a 01       	movw	r18, r20
    1814:	36 95       	lsr	r19
    1816:	27 95       	ror	r18
    1818:	36 95       	lsr	r19
    181a:	27 95       	ror	r18
    181c:	ab e7       	ldi	r26, 0x7B	; 123
    181e:	b4 e1       	ldi	r27, 0x14	; 20
    1820:	43 d7       	rcall	.+3718   	; 0x26a8 <__umulhisi3>
    1822:	96 95       	lsr	r25
    1824:	87 95       	ror	r24
    1826:	64 e6       	ldi	r22, 0x64	; 100
    1828:	68 9f       	mul	r22, r24
    182a:	90 01       	movw	r18, r0
    182c:	69 9f       	mul	r22, r25
    182e:	30 0d       	add	r19, r0
    1830:	11 24       	eor	r1, r1
    1832:	42 17       	cp	r20, r18
    1834:	53 07       	cpc	r21, r19
    1836:	d9 f4       	brne	.+54     	; 0x186e <calendar_leapyear+0x66>
    1838:	9a 01       	movw	r18, r20
    183a:	32 95       	swap	r19
    183c:	22 95       	swap	r18
    183e:	2f 70       	andi	r18, 0x0F	; 15
    1840:	23 27       	eor	r18, r19
    1842:	3f 70       	andi	r19, 0x0F	; 15
    1844:	23 27       	eor	r18, r19
    1846:	ae e3       	ldi	r26, 0x3E	; 62
    1848:	ba e0       	ldi	r27, 0x0A	; 10
    184a:	2e d7       	rcall	.+3676   	; 0x26a8 <__umulhisi3>
    184c:	60 e9       	ldi	r22, 0x90	; 144
    184e:	71 e0       	ldi	r23, 0x01	; 1
    1850:	86 9f       	mul	r24, r22
    1852:	90 01       	movw	r18, r0
    1854:	87 9f       	mul	r24, r23
    1856:	30 0d       	add	r19, r0
    1858:	96 9f       	mul	r25, r22
    185a:	30 0d       	add	r19, r0
    185c:	11 24       	eor	r1, r1
    185e:	81 e0       	ldi	r24, 0x01	; 1
    1860:	42 17       	cp	r20, r18
    1862:	53 07       	cpc	r21, r19
    1864:	29 f0       	breq	.+10     	; 0x1870 <calendar_leapyear+0x68>
    1866:	80 e0       	ldi	r24, 0x00	; 0
    1868:	08 95       	ret
    186a:	80 e0       	ldi	r24, 0x00	; 0
    186c:	08 95       	ret
    186e:	81 e0       	ldi	r24, 0x01	; 1
    1870:	08 95       	ret

00001872 <Find_WeekDay>:
    1872:	cf 93       	push	r28
    1874:	df 93       	push	r29
    1876:	cd b7       	in	r28, 0x3d	; 61
    1878:	de b7       	in	r29, 0x3e	; 62
    187a:	2c 97       	sbiw	r28, 0x0c	; 12
    187c:	0f b6       	in	r0, 0x3f	; 63
    187e:	f8 94       	cli
    1880:	de bf       	out	0x3e, r29	; 62
    1882:	0f be       	out	0x3f, r0	; 63
    1884:	cd bf       	out	0x3d, r28	; 61
    1886:	2c e0       	ldi	r18, 0x0C	; 12
    1888:	e3 e6       	ldi	r30, 0x63	; 99
    188a:	f1 e0       	ldi	r31, 0x01	; 1
    188c:	de 01       	movw	r26, r28
    188e:	11 96       	adiw	r26, 0x01	; 1
    1890:	01 90       	ld	r0, Z+
    1892:	0d 92       	st	X+, r0
    1894:	2a 95       	dec	r18
    1896:	e1 f7       	brne	.-8      	; 0x1890 <Find_WeekDay+0x1e>
    1898:	63 30       	cpi	r22, 0x03	; 3
    189a:	08 f4       	brcc	.+2      	; 0x189e <Find_WeekDay+0x2c>
    189c:	01 97       	sbiw	r24, 0x01	; 1
    189e:	fe 01       	movw	r30, r28
    18a0:	e6 0f       	add	r30, r22
    18a2:	f1 1d       	adc	r31, r1
    18a4:	20 81       	ld	r18, Z
    18a6:	50 e0       	ldi	r21, 0x00	; 0
    18a8:	42 0f       	add	r20, r18
    18aa:	51 1d       	adc	r21, r1
    18ac:	48 0f       	add	r20, r24
    18ae:	59 1f       	adc	r21, r25
    18b0:	fc 01       	movw	r30, r24
    18b2:	f6 95       	lsr	r31
    18b4:	e7 95       	ror	r30
    18b6:	f6 95       	lsr	r31
    18b8:	e7 95       	ror	r30
    18ba:	4e 0f       	add	r20, r30
    18bc:	5f 1f       	adc	r21, r31
    18be:	9c 01       	movw	r18, r24
    18c0:	32 95       	swap	r19
    18c2:	22 95       	swap	r18
    18c4:	2f 70       	andi	r18, 0x0F	; 15
    18c6:	23 27       	eor	r18, r19
    18c8:	3f 70       	andi	r19, 0x0F	; 15
    18ca:	23 27       	eor	r18, r19
    18cc:	ae e3       	ldi	r26, 0x3E	; 62
    18ce:	ba e0       	ldi	r27, 0x0A	; 10
    18d0:	eb d6       	rcall	.+3542   	; 0x26a8 <__umulhisi3>
    18d2:	48 0f       	add	r20, r24
    18d4:	59 1f       	adc	r21, r25
    18d6:	9f 01       	movw	r18, r30
    18d8:	ab e7       	ldi	r26, 0x7B	; 123
    18da:	b4 e1       	ldi	r27, 0x14	; 20
    18dc:	e5 d6       	rcall	.+3530   	; 0x26a8 <__umulhisi3>
    18de:	96 95       	lsr	r25
    18e0:	87 95       	ror	r24
    18e2:	48 1b       	sub	r20, r24
    18e4:	59 0b       	sbc	r21, r25
    18e6:	9a 01       	movw	r18, r20
    18e8:	a3 e9       	ldi	r26, 0x93	; 147
    18ea:	b4 e2       	ldi	r27, 0x24	; 36
    18ec:	dd d6       	rcall	.+3514   	; 0x26a8 <__umulhisi3>
    18ee:	28 1b       	sub	r18, r24
    18f0:	39 0b       	sbc	r19, r25
    18f2:	36 95       	lsr	r19
    18f4:	27 95       	ror	r18
    18f6:	82 0f       	add	r24, r18
    18f8:	93 1f       	adc	r25, r19
    18fa:	96 95       	lsr	r25
    18fc:	87 95       	ror	r24
    18fe:	96 95       	lsr	r25
    1900:	87 95       	ror	r24
    1902:	9c 01       	movw	r18, r24
    1904:	22 0f       	add	r18, r18
    1906:	33 1f       	adc	r19, r19
    1908:	22 0f       	add	r18, r18
    190a:	33 1f       	adc	r19, r19
    190c:	22 0f       	add	r18, r18
    190e:	33 1f       	adc	r19, r19
    1910:	b9 01       	movw	r22, r18
    1912:	68 1b       	sub	r22, r24
    1914:	79 0b       	sbc	r23, r25
    1916:	cb 01       	movw	r24, r22
    1918:	74 2f       	mov	r23, r20
    191a:	78 1b       	sub	r23, r24
    191c:	87 2f       	mov	r24, r23
    191e:	2c 96       	adiw	r28, 0x0c	; 12
    1920:	0f b6       	in	r0, 0x3f	; 63
    1922:	f8 94       	cli
    1924:	de bf       	out	0x3e, r29	; 62
    1926:	0f be       	out	0x3f, r0	; 63
    1928:	cd bf       	out	0x3d, r28	; 61
    192a:	df 91       	pop	r29
    192c:	cf 91       	pop	r28
    192e:	08 95       	ret

00001930 <Calc_WeekDay>:
    1930:	cf 93       	push	r28
    1932:	df 93       	push	r29
    1934:	ec 01       	movw	r28, r24
    1936:	4b 81       	ldd	r20, Y+3	; 0x03
    1938:	4f 5f       	subi	r20, 0xFF	; 255
    193a:	6c 81       	ldd	r22, Y+4	; 0x04
    193c:	6f 5f       	subi	r22, 0xFF	; 255
    193e:	8d 81       	ldd	r24, Y+5	; 0x05
    1940:	9e 81       	ldd	r25, Y+6	; 0x06
    1942:	97 df       	rcall	.-210    	; 0x1872 <Find_WeekDay>
    1944:	8f 83       	std	Y+7, r24	; 0x07
    1946:	df 91       	pop	r29
    1948:	cf 91       	pop	r28
    194a:	08 95       	ret

0000194c <calendar_add_second_to_date>:
 *
 * \param date The date to add a second to
 *
 */
void calendar_add_second_to_date(struct calendar_date *date)
{
    194c:	ef 92       	push	r14
    194e:	ff 92       	push	r15
    1950:	0f 93       	push	r16
    1952:	1f 93       	push	r17
    1954:	cf 93       	push	r28
    1956:	df 93       	push	r29
    1958:	fc 01       	movw	r30, r24
	// Check if input date is valid
	Assert(calendar_is_date_valid(date));

	if (++date->second == 60) {
    195a:	90 81       	ld	r25, Z
    195c:	9f 5f       	subi	r25, 0xFF	; 255
    195e:	9c 33       	cpi	r25, 0x3C	; 60
    1960:	11 f0       	breq	.+4      	; 0x1966 <calendar_add_second_to_date+0x1a>
    1962:	90 83       	st	Z, r25
    1964:	3b c0       	rjmp	.+118    	; 0x19dc <calendar_add_second_to_date+0x90>
    1966:	ef 01       	movw	r28, r30
		date->second = 0;
    1968:	10 82       	st	Z, r1
 * \param *date the date to add a minute to
 *
 */
static void calendar_add_minute_to_date(struct calendar_date *date)
{
	uint8_t minute = date->minute;
    196a:	81 81       	ldd	r24, Z+1	; 0x01
	minute++;
    196c:	8f 5f       	subi	r24, 0xFF	; 255
	if (minute == 60){
    196e:	8c 33       	cpi	r24, 0x3C	; 60
    1970:	a1 f5       	brne	.+104    	; 0x19da <calendar_add_second_to_date+0x8e>
 *
 */
static void calendar_add_hour_to_date(struct calendar_date *date)
{
	int8_t hour = date->hour;
	hour++;
    1972:	82 81       	ldd	r24, Z+2	; 0x02
    1974:	8f 5f       	subi	r24, 0xFF	; 255
	if (hour == 24){
    1976:	88 31       	cpi	r24, 0x18	; 24
    1978:	71 f5       	brne	.+92     	; 0x19d6 <calendar_add_second_to_date+0x8a>
 * \param *date the date to add a day to
 *
 */
static void calendar_add_day_to_date(struct calendar_date *date)
{
	uint8_t dates = date->date;
    197a:	f3 80       	ldd	r15, Z+3	; 0x03
	uint8_t months = date->month;
    197c:	e4 80       	ldd	r14, Z+4	; 0x04
	uint8_t year = date->year;
    197e:	05 81       	ldd	r16, Z+5	; 0x05
    1980:	16 81       	ldd	r17, Z+6	; 0x06

	dates++;
    1982:	f3 94       	inc	r15
	if (dates == month[calendar_leapyear(year)][months]) {
    1984:	c8 01       	movw	r24, r16
    1986:	99 27       	eor	r25, r25
    1988:	3f df       	rcall	.-386    	; 0x1808 <calendar_leapyear>
    198a:	90 e0       	ldi	r25, 0x00	; 0
    198c:	fc 01       	movw	r30, r24
    198e:	ee 0f       	add	r30, r30
    1990:	ff 1f       	adc	r31, r31
    1992:	e8 0f       	add	r30, r24
    1994:	f9 1f       	adc	r31, r25
    1996:	ee 0f       	add	r30, r30
    1998:	ff 1f       	adc	r31, r31
    199a:	ee 0f       	add	r30, r30
    199c:	ff 1f       	adc	r31, r31
    199e:	ec 5c       	subi	r30, 0xCC	; 204
    19a0:	fd 4f       	sbci	r31, 0xFD	; 253
    19a2:	ee 0d       	add	r30, r14
    19a4:	f1 1d       	adc	r31, r1
    19a6:	80 81       	ld	r24, Z
    19a8:	f8 12       	cpse	r15, r24
    19aa:	11 c0       	rjmp	.+34     	; 0x19ce <calendar_add_second_to_date+0x82>
 *
 */
static void calendar_add_month_to_date(struct calendar_date *date)
{
	uint8_t months = date->month;
	months++;
    19ac:	81 e0       	ldi	r24, 0x01	; 1
    19ae:	8e 0d       	add	r24, r14
	if (months == 12){
    19b0:	8c 30       	cpi	r24, 0x0C	; 12
    19b2:	59 f4       	brne	.+22     	; 0x19ca <calendar_add_second_to_date+0x7e>
 * \param *date the date to add a year to
 *
 */
static void calendar_add_year_to_date(struct calendar_date *date)
{
	if (date->year < 2105) {
    19b4:	09 33       	cpi	r16, 0x39	; 57
    19b6:	88 e0       	ldi	r24, 0x08	; 8
    19b8:	18 07       	cpc	r17, r24
    19ba:	30 f4       	brcc	.+12     	; 0x19c8 <calendar_add_second_to_date+0x7c>
		date->year++;
    19bc:	0f 5f       	subi	r16, 0xFF	; 255
    19be:	1f 4f       	sbci	r17, 0xFF	; 255
    19c0:	1e 83       	std	Y+6, r17	; 0x06
    19c2:	0d 83       	std	Y+5, r16	; 0x05
static void calendar_add_month_to_date(struct calendar_date *date)
{
	uint8_t months = date->month;
	months++;
	if (months == 12){
		months = 0;
    19c4:	80 e0       	ldi	r24, 0x00	; 0
    19c6:	01 c0       	rjmp	.+2      	; 0x19ca <calendar_add_second_to_date+0x7e>
    19c8:	80 e0       	ldi	r24, 0x00	; 0
		calendar_add_year_to_date(date);
	}
	date->month = months;
    19ca:	8c 83       	std	Y+4, r24	; 0x04
	uint8_t months = date->month;
	uint8_t year = date->year;

	dates++;
	if (dates == month[calendar_leapyear(year)][months]) {
		dates = 0;
    19cc:	f1 2c       	mov	r15, r1
		calendar_add_month_to_date(date);
	}
	
	date->date = dates;	
	Calc_WeekDay(date);
    19ce:	fb 82       	std	Y+3, r15	; 0x03
    19d0:	ce 01       	movw	r24, r28
static void calendar_add_hour_to_date(struct calendar_date *date)
{
	int8_t hour = date->hour;
	hour++;
	if (hour == 24){
		hour = 0;
    19d2:	ae df       	rcall	.-164    	; 0x1930 <Calc_WeekDay>
		calendar_add_day_to_date(date);
	}
	date->hour = hour;
    19d4:	80 e0       	ldi	r24, 0x00	; 0
static void calendar_add_minute_to_date(struct calendar_date *date)
{
	uint8_t minute = date->minute;
	minute++;
	if (minute == 60){
		minute = 0;
    19d6:	8a 83       	std	Y+2, r24	; 0x02
		calendar_add_hour_to_date(date);
	}
	date->minute = minute;
    19d8:	80 e0       	ldi	r24, 0x00	; 0

	if (++date->second == 60) {
		date->second = 0;
		calendar_add_minute_to_date(date);
	}
}
    19da:	89 83       	std	Y+1, r24	; 0x01
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	0f 91       	pop	r16
    19e4:	ff 90       	pop	r15
    19e6:	ef 90       	pop	r14
    19e8:	08 95       	ret

000019ea <sysclk_init>:

/**
 *  Function to initialize the clock and disable clock for not required modules.
 */
void sysclk_init(void)
{
    19ea:	cf 93       	push	r28
    19ec:	df 93       	push	r29
    19ee:	1f 92       	push	r1
    19f0:	cd b7       	in	r28, 0x3d	; 61
    19f2:	de b7       	in	r29, 0x3e	; 62
	/* Turn off all peripheral clocks that can be turned off.
	 * The debugWIRE system of some devices that shares system clock with the SPI module.
	 * Thus the PRSPI bit in the PRR register must not be set when debugging.
	 */
	for (i = 0; i < NUMBER_OF_POWER_REG; i++) {
		*(reg++) = 0xFF;
    19f4:	8f ef       	ldi	r24, 0xFF	; 255
    19f6:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__TEXT_REGION_LENGTH__+0x7e0064>

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    19fa:	8f b7       	in	r24, 0x3f	; 63
    19fc:	89 83       	std	Y+1, r24	; 0x01
	cpu_irq_disable();
    19fe:	f8 94       	cli
	return flags;
    1a00:	89 81       	ldd	r24, Y+1	; 0x01
static inline void sysclk_set_prescalers(uint8_t psdiv)
{
#if !MEGA_UNSPECIFIED
	irqflags_t flags = cpu_irq_save();

	ASM(
    1a02:	5f 93       	push	r21
    1a04:	50 e8       	ldi	r21, 0x80	; 128
    1a06:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1a0a:	50 e0       	ldi	r21, 0x00	; 0
    1a0c:	50 93 61 00 	sts	0x0061, r21	; 0x800061 <__TEXT_REGION_LENGTH__+0x7e0061>
    1a10:	5f 91       	pop	r21
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a12:	8f bf       	out	0x3f, r24	; 63
	if ((CONFIG_SYSCLK_PSDIV != SYSCLK_PSDIV_8) ||
			(SYSCLK_PSDIV_8 != CLKPR)) {
		sysclk_set_prescalers(CONFIG_SYSCLK_PSDIV);
	}
#endif
}
    1a14:	0f 90       	pop	r0
    1a16:	df 91       	pop	r29
    1a18:	cf 91       	pop	r28
    1a1a:	08 95       	ret

00001a1c <sysclk_enable_module>:
 * \param port ID of the port to which the module is connected (one of
 * the \c power_red_id *definitions).
 * \param id The ID (bitmask) of the peripheral module to be enabled.
 */
void sysclk_enable_module(enum power_red_id port, uint8_t id)
{
    1a1c:	cf 93       	push	r28
    1a1e:	df 93       	push	r29
    1a20:	1f 92       	push	r1
    1a22:	cd b7       	in	r28, 0x3d	; 61
    1a24:	de b7       	in	r29, 0x3e	; 62

typedef uint8_t irqflags_t;

static inline irqflags_t cpu_irq_save(void)
{
	volatile irqflags_t flags = SREG;
    1a26:	9f b7       	in	r25, 0x3f	; 63
    1a28:	99 83       	std	Y+1, r25	; 0x01
	cpu_irq_disable();
    1a2a:	f8 94       	cli
	return flags;
    1a2c:	99 81       	ldd	r25, Y+1	; 0x01
#if !MEGA_UNSPECIFIED && !MEGA_XX
	uint8_t *reg = (uint8_t *)&(POWER_REG_ADD);
	irqflags_t flags = cpu_irq_save();

	if (port < NUMBER_OF_POWER_REG) {
    1a2e:	81 11       	cpse	r24, r1
    1a30:	06 c0       	rjmp	.+12     	; 0x1a3e <sysclk_enable_module+0x22>
		*(reg + port)  &= ~id;
    1a32:	e4 e6       	ldi	r30, 0x64	; 100
    1a34:	f0 e0       	ldi	r31, 0x00	; 0
    1a36:	60 95       	com	r22
    1a38:	80 81       	ld	r24, Z
    1a3a:	68 23       	and	r22, r24
    1a3c:	60 83       	st	Z, r22
}

static inline void cpu_irq_restore(irqflags_t flags)
{
	barrier();
	SREG = flags;
    1a3e:	9f bf       	out	0x3f, r25	; 63
	}
	cpu_irq_restore(flags);
#endif
}
    1a40:	0f 90       	pop	r0
    1a42:	df 91       	pop	r29
    1a44:	cf 91       	pop	r28
    1a46:	08 95       	ret

00001a48 <__portable_avr_delay_cycles>:
 *
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
    1a48:	04 c0       	rjmp	.+8      	; 0x1a52 <__portable_avr_delay_cycles+0xa>
	while (n) {
		barrier();
		n--;
    1a4a:	61 50       	subi	r22, 0x01	; 1
    1a4c:	71 09       	sbc	r23, r1
    1a4e:	81 09       	sbc	r24, r1
    1a50:	91 09       	sbc	r25, r1
 * @{
 */
__always_optimize
static inline void __portable_avr_delay_cycles(unsigned long n)
{
	while (n) {
    1a52:	61 15       	cp	r22, r1
    1a54:	71 05       	cpc	r23, r1
    1a56:	81 05       	cpc	r24, r1
    1a58:	91 05       	cpc	r25, r1
    1a5a:	b9 f7       	brne	.-18     	; 0x1a4a <__portable_avr_delay_cycles+0x2>
    1a5c:	08 95       	ret

00001a5e <uart_putchar>:
	do{
		
		if(ring_buffer_out.write_offset < ring_buffer_out.read_offset ) // ring buffer overback olmuþ ise
		{
			buffer_use_size =  ring_buffer_out.read_offset   -    ring_buffer_out.write_offset;
			buffer_use_size =  ring_buffer_out.size          -    buffer_use_size;
    1a5e:	60 91 56 04 	lds	r22, 0x0456	; 0x800456 <ring_buffer_out+0x2>
		}else
		{
			buffer_use_size =  ring_buffer_out.write_offset  -    ring_buffer_out.read_offset;
		}
		
	}while( ring_buffer_out.size-1 ==  buffer_use_size );// buffer da yeterince yer açýlana kadar bekle.
    1a62:	46 2f       	mov	r20, r22
    1a64:	50 e0       	ldi	r21, 0x00	; 0
    1a66:	41 50       	subi	r20, 0x01	; 1
    1a68:	51 09       	sbc	r21, r1
{
	uint8_t buffer_use_size;

	do{
		
		if(ring_buffer_out.write_offset < ring_buffer_out.read_offset ) // ring buffer overback olmuþ ise
    1a6a:	e4 e5       	ldi	r30, 0x54	; 84
    1a6c:	f4 e0       	ldi	r31, 0x04	; 4
    1a6e:	20 81       	ld	r18, Z
    1a70:	91 81       	ldd	r25, Z+1	; 0x01
    1a72:	29 17       	cp	r18, r25
    1a74:	30 f4       	brcc	.+12     	; 0x1a82 <uart_putchar+0x24>
		{
			buffer_use_size =  ring_buffer_out.read_offset   -    ring_buffer_out.write_offset;
    1a76:	91 81       	ldd	r25, Z+1	; 0x01
    1a78:	20 81       	ld	r18, Z
    1a7a:	92 1b       	sub	r25, r18
			buffer_use_size =  ring_buffer_out.size          -    buffer_use_size;
    1a7c:	26 2f       	mov	r18, r22
    1a7e:	29 1b       	sub	r18, r25
    1a80:	03 c0       	rjmp	.+6      	; 0x1a88 <uart_putchar+0x2a>
		}else
		{
			buffer_use_size =  ring_buffer_out.write_offset  -    ring_buffer_out.read_offset;
    1a82:	20 81       	ld	r18, Z
    1a84:	91 81       	ldd	r25, Z+1	; 0x01
    1a86:	29 1b       	sub	r18, r25
		}
		
	}while( ring_buffer_out.size-1 ==  buffer_use_size );// buffer da yeterince yer açýlana kadar bekle.
    1a88:	30 e0       	ldi	r19, 0x00	; 0
    1a8a:	42 17       	cp	r20, r18
    1a8c:	53 07       	cpc	r21, r19
    1a8e:	79 f3       	breq	.-34     	; 0x1a6e <uart_putchar+0x10>
	
	// Disable interrupts to get exclusive access to ring_buffer_out.
	cli();
    1a90:	f8 94       	cli
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1a92:	e4 e5       	ldi	r30, 0x54	; 84
    1a94:	f4 e0       	ldi	r31, 0x04	; 4
    1a96:	21 81       	ldd	r18, Z+1	; 0x01
    1a98:	90 81       	ld	r25, Z
	if (ring_buffer_is_empty(&ring_buffer_out)) {
    1a9a:	29 13       	cpse	r18, r25
    1a9c:	05 c0       	rjmp	.+10     	; 0x1aa8 <uart_putchar+0x4a>
		// First data in buffer, enable data ready interrupt
		UCSR0B |=  (1 << UDRIE0);
    1a9e:	e1 ec       	ldi	r30, 0xC1	; 193
    1aa0:	f0 e0       	ldi	r31, 0x00	; 0
    1aa2:	90 81       	ld	r25, Z
    1aa4:	90 62       	ori	r25, 0x20	; 32
    1aa6:	90 83       	st	Z, r25
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1aa8:	e4 e5       	ldi	r30, 0x54	; 84
    1aaa:	f4 e0       	ldi	r31, 0x04	; 4
    1aac:	90 81       	ld	r25, Z
    1aae:	a3 81       	ldd	r26, Z+3	; 0x03
    1ab0:	b4 81       	ldd	r27, Z+4	; 0x04
    1ab2:	a9 0f       	add	r26, r25
    1ab4:	b1 1d       	adc	r27, r1
    1ab6:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1ab8:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1aba:	42 2f       	mov	r20, r18
    1abc:	50 e0       	ldi	r21, 0x00	; 0
    1abe:	82 81       	ldd	r24, Z+2	; 0x02
    1ac0:	90 e0       	ldi	r25, 0x00	; 0
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	48 17       	cp	r20, r24
    1ac6:	59 07       	cpc	r21, r25
    1ac8:	11 f0       	breq	.+4      	; 0x1ace <uart_putchar+0x70>
    1aca:	2f 5f       	subi	r18, 0xFF	; 255
    1acc:	01 c0       	rjmp	.+2      	; 0x1ad0 <uart_putchar+0x72>
    1ace:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1ad0:	20 93 54 04 	sts	0x0454, r18	; 0x800454 <ring_buffer_out>
	}
	// Put data in buffer
	ring_buffer_put(&ring_buffer_out, data);

	// Re-enable interrupts
	sei();
    1ad4:	78 94       	sei
    1ad6:	08 95       	ret

00001ad8 <__vector_16>:
void uart_putchar(uint8_t data);
struct ring_buffer ring_buffer_out;
struct ring_buffer ring_buffer_in;
/****************************************************************************/
ISR(TIMER0_OVF_vect)// tick timer (10ms)
{
    1ad8:	1f 92       	push	r1
    1ada:	0f 92       	push	r0
    1adc:	0f b6       	in	r0, 0x3f	; 63
    1ade:	0f 92       	push	r0
    1ae0:	11 24       	eor	r1, r1
    1ae2:	2f 93       	push	r18
    1ae4:	3f 93       	push	r19
    1ae6:	4f 93       	push	r20
    1ae8:	5f 93       	push	r21
    1aea:	6f 93       	push	r22
    1aec:	7f 93       	push	r23
    1aee:	8f 93       	push	r24
    1af0:	9f 93       	push	r25
    1af2:	af 93       	push	r26
    1af4:	bf 93       	push	r27
    1af6:	ef 93       	push	r30
    1af8:	ff 93       	push	r31
	TICK_TIMER_COUNTER=TICK_TIMER_RELOAD;
    1afa:	83 e6       	ldi	r24, 0x63	; 99
	Tick_Timer_Process();
    1afc:	86 bd       	out	0x26, r24	; 38
}
    1afe:	76 d5       	rcall	.+2796   	; 0x25ec <Tick_Timer_Process>
    1b00:	ff 91       	pop	r31
    1b02:	ef 91       	pop	r30
    1b04:	bf 91       	pop	r27
    1b06:	af 91       	pop	r26
    1b08:	9f 91       	pop	r25
    1b0a:	8f 91       	pop	r24
    1b0c:	7f 91       	pop	r23
    1b0e:	6f 91       	pop	r22
    1b10:	5f 91       	pop	r21
    1b12:	4f 91       	pop	r20
    1b14:	3f 91       	pop	r19
    1b16:	2f 91       	pop	r18
    1b18:	0f 90       	pop	r0
    1b1a:	0f be       	out	0x3f, r0	; 63
    1b1c:	0f 90       	pop	r0
    1b1e:	1f 90       	pop	r1
    1b20:	18 95       	reti

00001b22 <__vector_13>:
/****************************************************************************/
ISR(TIMER1_OVF_vect) // second timer (1sn)
{
    1b22:	1f 92       	push	r1
    1b24:	0f 92       	push	r0
    1b26:	0f b6       	in	r0, 0x3f	; 63
    1b28:	0f 92       	push	r0
    1b2a:	11 24       	eor	r1, r1
    1b2c:	2f 93       	push	r18
    1b2e:	3f 93       	push	r19
    1b30:	4f 93       	push	r20
    1b32:	5f 93       	push	r21
    1b34:	6f 93       	push	r22
    1b36:	7f 93       	push	r23
    1b38:	8f 93       	push	r24
    1b3a:	9f 93       	push	r25
    1b3c:	af 93       	push	r26
    1b3e:	bf 93       	push	r27
    1b40:	ef 93       	push	r30
    1b42:	ff 93       	push	r31
	SEC_TIMER_COUNTER = SEC_TIMER_RELOAD;
    1b44:	8b ef       	ldi	r24, 0xFB	; 251
    1b46:	9b e0       	ldi	r25, 0x0B	; 11
    1b48:	90 93 85 00 	sts	0x0085, r25	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
    1b4c:	80 93 84 00 	sts	0x0084, r24	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	
	Second_Timer_Process();
	
	calendar_add_second_to_date(&real_date);
    1b50:	50 d5       	rcall	.+2720   	; 0x25f2 <Second_Timer_Process>
    1b52:	88 e4       	ldi	r24, 0x48	; 72
    1b54:	91 e0       	ldi	r25, 0x01	; 1
}
    1b56:	fa de       	rcall	.-524    	; 0x194c <calendar_add_second_to_date>
    1b58:	ff 91       	pop	r31
    1b5a:	ef 91       	pop	r30
    1b5c:	bf 91       	pop	r27
    1b5e:	af 91       	pop	r26
    1b60:	9f 91       	pop	r25
    1b62:	8f 91       	pop	r24
    1b64:	7f 91       	pop	r23
    1b66:	6f 91       	pop	r22
    1b68:	5f 91       	pop	r21
    1b6a:	4f 91       	pop	r20
    1b6c:	3f 91       	pop	r19
    1b6e:	2f 91       	pop	r18
    1b70:	0f 90       	pop	r0
    1b72:	0f be       	out	0x3f, r0	; 63
    1b74:	0f 90       	pop	r0
    1b76:	1f 90       	pop	r1
    1b78:	18 95       	reti

00001b7a <Send_to_Cpu_Information>:
/****************************************************************************/
void Send_to_Cpu_Information(void)
{
    1b7a:	cf 92       	push	r12
    1b7c:	df 92       	push	r13
    1b7e:	ff 92       	push	r15
    1b80:	0f 93       	push	r16
    1b82:	1f 93       	push	r17
    1b84:	cf 93       	push	r28
    1b86:	df 93       	push	r29
    1b88:	1f 92       	push	r1
    1b8a:	cd b7       	in	r28, 0x3d	; 61
    1b8c:	de b7       	in	r29, 0x3e	; 62
	uint8_t temp=CPU_PERCENT_AVG;
    1b8e:	20 91 4f 04 	lds	r18, 0x044F	; 0x80044f <cpu_avg>
    1b92:	30 91 50 04 	lds	r19, 0x0450	; 0x800450 <cpu_avg+0x1>
    1b96:	40 91 51 04 	lds	r20, 0x0451	; 0x800451 <cpu_avg+0x2>
    1b9a:	50 91 52 04 	lds	r21, 0x0452	; 0x800452 <cpu_avg+0x3>
    1b9e:	a4 e6       	ldi	r26, 0x64	; 100
    1ba0:	b0 e0       	ldi	r27, 0x00	; 0
    1ba2:	91 d5       	rcall	.+2850   	; 0x26c6 <__muluhisi3>
    1ba4:	2c e9       	ldi	r18, 0x9C	; 156
    1ba6:	30 e0       	ldi	r19, 0x00	; 0
    1ba8:	40 e0       	ldi	r20, 0x00	; 0
    1baa:	50 e0       	ldi	r21, 0x00	; 0
    1bac:	55 d5       	rcall	.+2730   	; 0x2658 <__udivmodsi4>
    1bae:	29 83       	std	Y+1, r18	; 0x01
			
	adp_transceive_single_stream(STREAM_ID_CPU_USAGE,&temp , 1, receive_packet_data);
    1bb0:	21 eb       	ldi	r18, 0xB1	; 177
    1bb2:	33 e0       	ldi	r19, 0x03	; 3
    1bb4:	41 e0       	ldi	r20, 0x01	; 1
    1bb6:	be 01       	movw	r22, r28
    1bb8:	6f 5f       	subi	r22, 0xFF	; 255
    1bba:	7f 4f       	sbci	r23, 0xFF	; 255
    1bbc:	81 e0       	ldi	r24, 0x01	; 1
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	9e dd       	rcall	.-1220   	; 0x16fe <adp_transceive_single_stream>
	sprintf(receive_packet_data,"Cpu_Max:%%%d\r",CPU_PERCENT_MAX);
    1bc2:	80 91 49 04 	lds	r24, 0x0449	; 0x800449 <cpu_max>
    1bc6:	0f 2e       	mov	r0, r31
    1bc8:	f4 e6       	ldi	r31, 0x64	; 100
    1bca:	ff 2e       	mov	r15, r31
    1bcc:	f0 2d       	mov	r31, r0
    1bce:	f8 9e       	mul	r15, r24
    1bd0:	c0 01       	movw	r24, r0
    1bd2:	11 24       	eor	r1, r1
    1bd4:	0f 2e       	mov	r0, r31
    1bd6:	fc e9       	ldi	r31, 0x9C	; 156
    1bd8:	cf 2e       	mov	r12, r31
    1bda:	d1 2c       	mov	r13, r1
    1bdc:	f0 2d       	mov	r31, r0
    1bde:	b6 01       	movw	r22, r12
    1be0:	28 d5       	rcall	.+2640   	; 0x2632 <__divmodhi4>
    1be2:	77 27       	eor	r23, r23
    1be4:	7f 93       	push	r23
    1be6:	6f 93       	push	r22
    1be8:	8c e4       	ldi	r24, 0x4C	; 76
    1bea:	92 e0       	ldi	r25, 0x02	; 2
    1bec:	9f 93       	push	r25
    1bee:	8f 93       	push	r24
    1bf0:	01 eb       	ldi	r16, 0xB1	; 177
    1bf2:	13 e0       	ldi	r17, 0x03	; 3
    1bf4:	1f 93       	push	r17
    1bf6:	0f 93       	push	r16
    1bf8:	c0 d5       	rcall	.+2944   	; 0x277a <sprintf>
	adp_transceive_single_stream(STREAM_ID_STATUS_MESSAGE,receive_packet_data,strlen(receive_packet_data),receive_packet_data);
    1bfa:	f8 01       	movw	r30, r16
    1bfc:	01 90       	ld	r0, Z+
    1bfe:	00 20       	and	r0, r0
    1c00:	e9 f7       	brne	.-6      	; 0x1bfc <Send_to_Cpu_Information+0x82>
    1c02:	31 97       	sbiw	r30, 0x01	; 1
    1c04:	af 01       	movw	r20, r30
    1c06:	41 5b       	subi	r20, 0xB1	; 177
    1c08:	53 40       	sbci	r21, 0x03	; 3
    1c0a:	98 01       	movw	r18, r16
    1c0c:	b8 01       	movw	r22, r16
    1c0e:	80 e0       	ldi	r24, 0x00	; 0
    1c10:	90 e0       	ldi	r25, 0x00	; 0
	sprintf(receive_packet_data,"Cpu_Min:%%%d\r\r",CPU_PERCENT_MIN);
    1c12:	75 dd       	rcall	.-1302   	; 0x16fe <adp_transceive_single_stream>
    1c14:	80 91 53 04 	lds	r24, 0x0453	; 0x800453 <cpu_min>
    1c18:	f8 9e       	mul	r15, r24
    1c1a:	c0 01       	movw	r24, r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	b6 01       	movw	r22, r12
    1c20:	08 d5       	rcall	.+2576   	; 0x2632 <__divmodhi4>
    1c22:	77 27       	eor	r23, r23
    1c24:	7f 93       	push	r23
    1c26:	6f 93       	push	r22
    1c28:	8a e5       	ldi	r24, 0x5A	; 90
    1c2a:	92 e0       	ldi	r25, 0x02	; 2
    1c2c:	9f 93       	push	r25
    1c2e:	8f 93       	push	r24
    1c30:	1f 93       	push	r17
    1c32:	0f 93       	push	r16
	adp_transceive_single_stream(STREAM_ID_STATUS_MESSAGE,receive_packet_data,strlen(receive_packet_data),receive_packet_data);
    1c34:	a2 d5       	rcall	.+2884   	; 0x277a <sprintf>
    1c36:	f8 01       	movw	r30, r16
    1c38:	01 90       	ld	r0, Z+
    1c3a:	00 20       	and	r0, r0
    1c3c:	e9 f7       	brne	.-6      	; 0x1c38 <Send_to_Cpu_Information+0xbe>
    1c3e:	31 97       	sbiw	r30, 0x01	; 1
    1c40:	af 01       	movw	r20, r30
    1c42:	41 5b       	subi	r20, 0xB1	; 177
    1c44:	53 40       	sbci	r21, 0x03	; 3
    1c46:	98 01       	movw	r18, r16
    1c48:	b8 01       	movw	r22, r16
    1c4a:	80 e0       	ldi	r24, 0x00	; 0
    1c4c:	90 e0       	ldi	r25, 0x00	; 0
}
    1c4e:	57 dd       	rcall	.-1362   	; 0x16fe <adp_transceive_single_stream>
    1c50:	0f b6       	in	r0, 0x3f	; 63
    1c52:	f8 94       	cli
    1c54:	de bf       	out	0x3e, r29	; 62
    1c56:	0f be       	out	0x3f, r0	; 63
    1c58:	cd bf       	out	0x3d, r28	; 61
    1c5a:	0f 90       	pop	r0
    1c5c:	df 91       	pop	r29
    1c5e:	cf 91       	pop	r28
    1c60:	1f 91       	pop	r17
    1c62:	0f 91       	pop	r16
    1c64:	ff 90       	pop	r15
    1c66:	df 90       	pop	r13
    1c68:	cf 90       	pop	r12
    1c6a:	08 95       	ret

00001c6c <Restart_Cpu_Measurement>:
/****************************************************************************/
void Restart_Cpu_Measurement(void)
{
	cpu_measurement_restart=true;	
    1c6c:	81 e0       	ldi	r24, 0x01	; 1
    1c6e:	80 93 5a 01 	sts	0x015A, r24	; 0x80015a <cpu_measurement_restart>
    1c72:	08 95       	ret

00001c74 <__vector_19>:
}
/****************************************************************************/
ISR(UART0_DATA_EMPTY_IRQ)
{
    1c74:	1f 92       	push	r1
    1c76:	0f 92       	push	r0
    1c78:	0f b6       	in	r0, 0x3f	; 63
    1c7a:	0f 92       	push	r0
    1c7c:	11 24       	eor	r1, r1
    1c7e:	2f 93       	push	r18
    1c80:	3f 93       	push	r19
    1c82:	4f 93       	push	r20
    1c84:	5f 93       	push	r21
    1c86:	8f 93       	push	r24
    1c88:	9f 93       	push	r25
    1c8a:	af 93       	push	r26
    1c8c:	bf 93       	push	r27
    1c8e:	ef 93       	push	r30
    1c90:	ff 93       	push	r31
 * \retval true   if the buffer is empty
 * \retval false  if there is still data in the buffer
 */
static inline bool ring_buffer_is_empty(const struct ring_buffer *ring)
{
	return (ring->read_offset == ring->write_offset);
    1c92:	e4 e5       	ldi	r30, 0x54	; 84
    1c94:	f4 e0       	ldi	r31, 0x04	; 4
    1c96:	91 81       	ldd	r25, Z+1	; 0x01
    1c98:	80 81       	ld	r24, Z
	// if there is data in the ring buffer, fetch it and send it
	if (!ring_buffer_is_empty(&ring_buffer_out)) {
    1c9a:	98 17       	cp	r25, r24
    1c9c:	b9 f0       	breq	.+46     	; 0x1ccc <__vector_19+0x58>
 * \returns next data byte in buffer
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
    1c9e:	81 81       	ldd	r24, Z+1	; 0x01
    1ca0:	a3 81       	ldd	r26, Z+3	; 0x03
    1ca2:	b4 81       	ldd	r27, Z+4	; 0x04
    1ca4:	a8 0f       	add	r26, r24
    1ca6:	b1 1d       	adc	r27, r1
    1ca8:	3c 91       	ld	r19, X
 *
 * \returns the next read offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_read(const struct ring_buffer *ring)
{
	return get_next(ring->read_offset, ring->size);
    1caa:	21 81       	ldd	r18, Z+1	; 0x01
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1cac:	42 2f       	mov	r20, r18
    1cae:	50 e0       	ldi	r21, 0x00	; 0
    1cb0:	82 81       	ldd	r24, Z+2	; 0x02
    1cb2:	90 e0       	ldi	r25, 0x00	; 0
    1cb4:	01 97       	sbiw	r24, 0x01	; 1
    1cb6:	48 17       	cp	r20, r24
    1cb8:	59 07       	cpc	r21, r25
    1cba:	11 f0       	breq	.+4      	; 0x1cc0 <__vector_19+0x4c>
    1cbc:	2f 5f       	subi	r18, 0xFF	; 255
    1cbe:	01 c0       	rjmp	.+2      	; 0x1cc2 <__vector_19+0x4e>
    1cc0:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline uint8_t ring_buffer_get(struct ring_buffer *ring)
{
	Assert(!ring_buffer_is_empty(ring));
	uint8_t data = ring->buffer[ring->read_offset];
	ring->read_offset = ring_buffer_get_next_read(ring);
    1cc2:	20 93 55 04 	sts	0x0455, r18	; 0x800455 <ring_buffer_out+0x1>
		UDR0 = ring_buffer_get(&ring_buffer_out);
    1cc6:	30 93 c6 00 	sts	0x00C6, r19	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
    1cca:	05 c0       	rjmp	.+10     	; 0x1cd6 <__vector_19+0x62>
	}
	else {
		// no more data to send, turn off data ready interrupt
		UCSR0B &= ~(1 << UDRIE0);
    1ccc:	e1 ec       	ldi	r30, 0xC1	; 193
    1cce:	f0 e0       	ldi	r31, 0x00	; 0
    1cd0:	80 81       	ld	r24, Z
    1cd2:	8f 7d       	andi	r24, 0xDF	; 223
    1cd4:	80 83       	st	Z, r24
	}
}
    1cd6:	ff 91       	pop	r31
    1cd8:	ef 91       	pop	r30
    1cda:	bf 91       	pop	r27
    1cdc:	af 91       	pop	r26
    1cde:	9f 91       	pop	r25
    1ce0:	8f 91       	pop	r24
    1ce2:	5f 91       	pop	r21
    1ce4:	4f 91       	pop	r20
    1ce6:	3f 91       	pop	r19
    1ce8:	2f 91       	pop	r18
    1cea:	0f 90       	pop	r0
    1cec:	0f be       	out	0x3f, r0	; 63
    1cee:	0f 90       	pop	r0
    1cf0:	1f 90       	pop	r1
    1cf2:	18 95       	reti

00001cf4 <__vector_18>:
/****************************************************************************/
ISR(UART0_RX_IRQ)
{
    1cf4:	1f 92       	push	r1
    1cf6:	0f 92       	push	r0
    1cf8:	0f b6       	in	r0, 0x3f	; 63
    1cfa:	0f 92       	push	r0
    1cfc:	11 24       	eor	r1, r1
    1cfe:	2f 93       	push	r18
    1d00:	4f 93       	push	r20
    1d02:	5f 93       	push	r21
    1d04:	8f 93       	push	r24
    1d06:	9f 93       	push	r25
    1d08:	af 93       	push	r26
    1d0a:	bf 93       	push	r27
    1d0c:	ef 93       	push	r30
    1d0e:	ff 93       	push	r31
	ring_buffer_put(&ring_buffer_in, UDR0);
    1d10:	80 91 c6 00 	lds	r24, 0x00C6	; 0x8000c6 <__TEXT_REGION_LENGTH__+0x7e00c6>
 *
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
    1d14:	ea e4       	ldi	r30, 0x4A	; 74
    1d16:	f4 e0       	ldi	r31, 0x04	; 4
    1d18:	90 81       	ld	r25, Z
    1d1a:	a3 81       	ldd	r26, Z+3	; 0x03
    1d1c:	b4 81       	ldd	r27, Z+4	; 0x04
    1d1e:	a9 0f       	add	r26, r25
    1d20:	b1 1d       	adc	r27, r1
    1d22:	8c 93       	st	X, r24
 *
 * \returns the next write offset in the ring buffer
 */
static inline uint8_t ring_buffer_get_next_write(const struct ring_buffer *ring)
{
	return get_next(ring->write_offset, ring->size);
    1d24:	20 81       	ld	r18, Z
 *
 * \returns next offset or 0 if we are wrapping
 */
static inline uint8_t get_next(uint8_t cur_offset, uint8_t size)
{
	return (cur_offset == (size - 1) ? 0 : cur_offset + 1);
    1d26:	42 2f       	mov	r20, r18
    1d28:	50 e0       	ldi	r21, 0x00	; 0
    1d2a:	82 81       	ldd	r24, Z+2	; 0x02
    1d2c:	90 e0       	ldi	r25, 0x00	; 0
    1d2e:	01 97       	sbiw	r24, 0x01	; 1
    1d30:	48 17       	cp	r20, r24
    1d32:	59 07       	cpc	r21, r25
    1d34:	11 f0       	breq	.+4      	; 0x1d3a <__vector_18+0x46>
    1d36:	2f 5f       	subi	r18, 0xFF	; 255
    1d38:	01 c0       	rjmp	.+2      	; 0x1d3c <__vector_18+0x48>
    1d3a:	20 e0       	ldi	r18, 0x00	; 0
 */
static inline void ring_buffer_put(struct ring_buffer *ring, uint8_t data)
{
	Assert(!ring_buffer_is_full(ring));
	ring->buffer[ring->write_offset] = data;
	ring->write_offset = ring_buffer_get_next_write(ring);
    1d3c:	20 93 4a 04 	sts	0x044A, r18	; 0x80044a <ring_buffer_in>
}
    1d40:	ff 91       	pop	r31
    1d42:	ef 91       	pop	r30
    1d44:	bf 91       	pop	r27
    1d46:	af 91       	pop	r26
    1d48:	9f 91       	pop	r25
    1d4a:	8f 91       	pop	r24
    1d4c:	5f 91       	pop	r21
    1d4e:	4f 91       	pop	r20
    1d50:	2f 91       	pop	r18
    1d52:	0f 90       	pop	r0
    1d54:	0f be       	out	0x3f, r0	; 63
    1d56:	0f 90       	pop	r0
    1d58:	1f 90       	pop	r1
    1d5a:	18 95       	reti

00001d5c <adp_window_add_terminal>:
	TCCR2A=0x00;
	TCCR2B=0x07;  // Timer mode with 1024 prescler (clock böleni en tick timer böleni ile ayný olmalýdýr.)
}
/****************************************************************************/
void adp_window_add_terminal(void)
{
    1d5c:	cf 93       	push	r28
    1d5e:	df 93       	push	r29
    1d60:	cd b7       	in	r28, 0x3d	; 61
    1d62:	de b7       	in	r29, 0x3e	; 62
    1d64:	60 97       	sbiw	r28, 0x10	; 16
    1d66:	0f b6       	in	r0, 0x3f	; 63
    1d68:	f8 94       	cli
    1d6a:	de bf       	out	0x3e, r29	; 62
    1d6c:	0f be       	out	0x3f, r0	; 63
    1d6e:	cd bf       	out	0x3d, r28	; 61
	//terminal_config.height = 50;
	//memcpy(terminal_config.background_color, ADP_COLOR_WHITE, 3);
	//memcpy(terminal_config.foreground_color, ADP_COLOR_GREEN, 3);
	
	/* Add terminal stream */
	stream.stream_id = STREAM_ID_STATUS_MESSAGE;
    1d70:	1a 82       	std	Y+2, r1	; 0x02
    1d72:	19 82       	std	Y+1, r1	; 0x01
	stream.type = ADP_STREAM_UINT_8;
    1d74:	82 e0       	ldi	r24, 0x02	; 2
    1d76:	8b 83       	std	Y+3, r24	; 0x03
	stream.mode = ADP_STREAM_OUT;
    1d78:	8c 83       	std	Y+4, r24	; 0x04
	stream.state = ADP_STREAM_ON;
    1d7a:	81 e0       	ldi	r24, 0x01	; 1
    1d7c:	8d 83       	std	Y+5, r24	; 0x05
	
	adp_configure_stream(&stream, "Status messages");
    1d7e:	69 e6       	ldi	r22, 0x69	; 105
    1d80:	72 e0       	ldi	r23, 0x02	; 2
    1d82:	ce 01       	movw	r24, r28
    1d84:	01 96       	adiw	r24, 0x01	; 1
    1d86:	ac d8       	rcall	.-3752   	; 0xee0 <adp_configure_stream>
	
	adp_configure_terminal(&terminal_config, "Status terminal");
    1d88:	69 e7       	ldi	r22, 0x79	; 121
    1d8a:	72 e0       	ldi	r23, 0x02	; 2
    1d8c:	80 e5       	ldi	r24, 0x50	; 80
    1d8e:	91 e0       	ldi	r25, 0x01	; 1
    1d90:	3c d9       	rcall	.-3464   	; 0x100a <adp_configure_terminal>
	
	/* Connect stream and terminal */
	struct adp_msg_add_stream_to_terminal conf_stream = {
    1d92:	8b e0       	ldi	r24, 0x0B	; 11
    1d94:	ef e6       	ldi	r30, 0x6F	; 111
    1d96:	f1 e0       	ldi	r31, 0x01	; 1
    1d98:	de 01       	movw	r26, r28
    1d9a:	16 96       	adiw	r26, 0x06	; 6
    1d9c:	01 90       	ld	r0, Z+
    1d9e:	0d 92       	st	X+, r0
    1da0:	8a 95       	dec	r24
    1da2:	e1 f7       	brne	.-8      	; 0x1d9c <adp_window_add_terminal+0x40>
		.stream_id = STREAM_ID_STATUS_MESSAGE,
		.mode = 0xFF,
		.text_color = {ADP_COLOR_RED},
		.tag_text_color = {ADP_COLOR_BLACK}
	};
	adp_add_stream_to_terminal(&conf_stream, "Status messages");
    1da4:	69 e6       	ldi	r22, 0x69	; 105
    1da6:	72 e0       	ldi	r23, 0x02	; 2
    1da8:	ce 01       	movw	r24, r28
    1daa:	06 96       	adiw	r24, 0x06	; 6
    1dac:	b3 d9       	rcall	.-3226   	; 0x1114 <adp_add_stream_to_terminal>
}
    1dae:	60 96       	adiw	r28, 0x10	; 16
    1db0:	0f b6       	in	r0, 0x3f	; 63
    1db2:	f8 94       	cli
    1db4:	de bf       	out	0x3e, r29	; 62
    1db6:	0f be       	out	0x3f, r0	; 63
    1db8:	cd bf       	out	0x3d, r28	; 61
    1dba:	df 91       	pop	r29
    1dbc:	cf 91       	pop	r28
    1dbe:	08 95       	ret

00001dc0 <adp_window_add_dashboard_control>:
/****************************************************************************/
void adp_window_add_dashboard_control(void)
{
    1dc0:	af 92       	push	r10
    1dc2:	bf 92       	push	r11
    1dc4:	cf 92       	push	r12
    1dc6:	df 92       	push	r13
    1dc8:	ef 92       	push	r14
    1dca:	ff 92       	push	r15
    1dcc:	0f 93       	push	r16
    1dce:	1f 93       	push	r17
    1dd0:	cf 93       	push	r28
    1dd2:	df 93       	push	r29
    1dd4:	cd b7       	in	r28, 0x3d	; 61
    1dd6:	de b7       	in	r29, 0x3e	; 62
    1dd8:	eb 97       	sbiw	r28, 0x3b	; 59
    1dda:	0f b6       	in	r0, 0x3f	; 63
    1ddc:	f8 94       	cli
    1dde:	de bf       	out	0x3e, r29	; 62
    1de0:	0f be       	out	0x3f, r0	; 63
    1de2:	cd bf       	out	0x3d, r28	; 61
	/* Add a dashboard */
	struct adp_msg_conf_dashboard dashboard_con = {
    1de4:	87 e0       	ldi	r24, 0x07	; 7
    1de6:	ea e7       	ldi	r30, 0x7A	; 122
    1de8:	f1 e0       	ldi	r31, 0x01	; 1
    1dea:	de 01       	movw	r26, r28
    1dec:	11 96       	adiw	r26, 0x01	; 1
    1dee:	01 90       	ld	r0, Z+
    1df0:	0d 92       	st	X+, r0
    1df2:	8a 95       	dec	r24
    1df4:	e1 f7       	brne	.-8      	; 0x1dee <adp_window_add_dashboard_control+0x2e>
		.dashboard_id = DASHBOARD_ID_CPU_USAGE,
		.color = {ADP_COLOR_WHITE},
		.height = 300,
	};
	adp_add_dashboard(&dashboard_con, "Genel");
    1df6:	69 e8       	ldi	r22, 0x89	; 137
    1df8:	72 e0       	ldi	r23, 0x02	; 2
    1dfa:	ce 01       	movw	r24, r28
    1dfc:	01 96       	adiw	r24, 0x01	; 1
    1dfe:	27 da       	rcall	.-2994   	; 0x124e <adp_add_dashboard>
	
	struct adp_msg_configure_stream stream;
	struct adp_conf_add_stream_to_element element_stream = {
    1e00:	0f 2e       	mov	r0, r31
    1e02:	f6 e0       	ldi	r31, 0x06	; 6
    1e04:	af 2e       	mov	r10, r31
    1e06:	f0 2d       	mov	r31, r0
    1e08:	8e 01       	movw	r16, r28
    1e0a:	03 5f       	subi	r16, 0xF3	; 243
    1e0c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e0e:	d8 01       	movw	r26, r16
    1e10:	ea 2d       	mov	r30, r10
    1e12:	1d 92       	st	X+, r1
    1e14:	ea 95       	dec	r30
    1e16:	e9 f7       	brne	.-6      	; 0x1e12 <adp_window_add_dashboard_control+0x52>
		.dashboard_id = DASHBOARD_ID_CPU_USAGE,
	};
	
	/* Add segment to dashboard, use light sensor stream */
	/* Add segment stream(light sensor ADC value) */
	stream.stream_id = STREAM_ID_CPU_USAGE;
    1e18:	ee 24       	eor	r14, r14
    1e1a:	e3 94       	inc	r14
    1e1c:	f1 2c       	mov	r15, r1
    1e1e:	f9 86       	std	Y+9, r15	; 0x09
    1e20:	e8 86       	std	Y+8, r14	; 0x08
	stream.type = ADP_STREAM_UINT_8;
    1e22:	82 e0       	ldi	r24, 0x02	; 2
    1e24:	8a 87       	std	Y+10, r24	; 0x0a
	stream.mode = ADP_STREAM_OUT;
    1e26:	8b 87       	std	Y+11, r24	; 0x0b
	stream.state = ADP_STREAM_ON;
    1e28:	bb 24       	eor	r11, r11
    1e2a:	b3 94       	inc	r11
    1e2c:	bc 86       	std	Y+12, r11	; 0x0c
	adp_configure_stream(&stream, "CPU Usage Value");
    1e2e:	6f e8       	ldi	r22, 0x8F	; 143
    1e30:	72 e0       	ldi	r23, 0x02	; 2
    1e32:	ce 01       	movw	r24, r28
    1e34:	08 96       	adiw	r24, 0x08	; 8
    1e36:	54 d8       	rcall	.-3928   	; 0xee0 <adp_configure_stream>
	
	/* Add a graph to dashboard */
	struct adp_msg_conf_dashboard_element_graph graph_value = {
    1e38:	fe 01       	movw	r30, r28
    1e3a:	73 96       	adiw	r30, 0x13	; 19
    1e3c:	89 e2       	ldi	r24, 0x29	; 41
    1e3e:	df 01       	movw	r26, r30
    1e40:	1d 92       	st	X+, r1
    1e42:	8a 95       	dec	r24
    1e44:	e9 f7       	brne	.-6      	; 0x1e40 <adp_window_add_dashboard_control+0x80>
    1e46:	0f 2e       	mov	r0, r31
    1e48:	f7 e0       	ldi	r31, 0x07	; 7
    1e4a:	cf 2e       	mov	r12, r31
    1e4c:	d1 2c       	mov	r13, r1
    1e4e:	f0 2d       	mov	r31, r0
    1e50:	de 8a       	std	Y+22, r13	; 0x16
    1e52:	cd 8a       	std	Y+21, r12	; 0x15
    1e54:	86 e3       	ldi	r24, 0x36	; 54
    1e56:	91 e0       	ldi	r25, 0x01	; 1
    1e58:	99 8f       	std	Y+25, r25	; 0x19
    1e5a:	88 8f       	std	Y+24, r24	; 0x18
    1e5c:	8a e0       	ldi	r24, 0x0A	; 10
    1e5e:	90 e0       	ldi	r25, 0x00	; 0
    1e60:	9b 8f       	std	Y+27, r25	; 0x1b
    1e62:	8a 8f       	std	Y+26, r24	; 0x1a
    1e64:	80 e4       	ldi	r24, 0x40	; 64
    1e66:	91 e0       	ldi	r25, 0x01	; 1
    1e68:	9d 8f       	std	Y+29, r25	; 0x1d
    1e6a:	8c 8f       	std	Y+28, r24	; 0x1c
    1e6c:	80 ef       	ldi	r24, 0xF0	; 240
    1e6e:	90 e0       	ldi	r25, 0x00	; 0
    1e70:	9f 8f       	std	Y+31, r25	; 0x1f
    1e72:	8e 8f       	std	Y+30, r24	; 0x1e
    1e74:	a8 a2       	std	Y+32, r10	; 0x20
    1e76:	9f ef       	ldi	r25, 0xFF	; 255
    1e78:	99 a3       	std	Y+33, r25	; 0x21
    1e7a:	9a a3       	std	Y+34, r25	; 0x22
    1e7c:	9b a3       	std	Y+35, r25	; 0x23
    1e7e:	ba a6       	std	Y+42, r11	; 0x2a
    1e80:	80 e0       	ldi	r24, 0x00	; 0
    1e82:	90 e0       	ldi	r25, 0x00	; 0
    1e84:	a0 e2       	ldi	r26, 0x20	; 32
    1e86:	b1 e4       	ldi	r27, 0x41	; 65
    1e88:	8f a7       	std	Y+47, r24	; 0x2f
    1e8a:	98 ab       	std	Y+48, r25	; 0x30
    1e8c:	a9 ab       	std	Y+49, r26	; 0x31
    1e8e:	ba ab       	std	Y+50, r27	; 0x32
    1e90:	80 e0       	ldi	r24, 0x00	; 0
    1e92:	90 e0       	ldi	r25, 0x00	; 0
    1e94:	af e7       	ldi	r26, 0x7F	; 127
    1e96:	b3 e4       	ldi	r27, 0x43	; 67
    1e98:	8f ab       	std	Y+55, r24	; 0x37
    1e9a:	98 af       	std	Y+56, r25	; 0x38
    1e9c:	a9 af       	std	Y+57, r26	; 0x39
    1e9e:	ba af       	std	Y+58, r27	; 0x3a
		.y_min = 0,
		.y_max = 255,
		.mode.bit.mouse = 0,
		.mode.bit.fit_graph = 0,
	};
	adp_add_graph_to_dashboard(&graph_value, "CPU Usage");
    1ea0:	6f e9       	ldi	r22, 0x9F	; 159
    1ea2:	72 e0       	ldi	r23, 0x02	; 2
    1ea4:	cf 01       	movw	r24, r30
    1ea6:	60 da       	rcall	.-2880   	; 0x1368 <adp_add_graph_to_dashboard>
	
	element_stream.element_id = ELEMENT_ID_GRAPH;
    1ea8:	d8 8a       	std	Y+16, r13	; 0x10
    1eaa:	cf 86       	std	Y+15, r12	; 0x0f
	element_stream.stream_id = STREAM_ID_CPU_USAGE;
    1eac:	fa 8a       	std	Y+18, r15	; 0x12
	adp_add_stream_to_element(&element_stream);
    1eae:	e9 8a       	std	Y+17, r14	; 0x11
    1eb0:	c8 01       	movw	r24, r16
    1eb2:	1e db       	rcall	.-2500   	; 0x14f0 <adp_add_stream_to_element>
	
}
    1eb4:	eb 96       	adiw	r28, 0x3b	; 59
    1eb6:	0f b6       	in	r0, 0x3f	; 63
    1eb8:	f8 94       	cli
    1eba:	de bf       	out	0x3e, r29	; 62
    1ebc:	0f be       	out	0x3f, r0	; 63
    1ebe:	cd bf       	out	0x3d, r28	; 61
    1ec0:	df 91       	pop	r29
    1ec2:	cf 91       	pop	r28
    1ec4:	1f 91       	pop	r17
    1ec6:	0f 91       	pop	r16
    1ec8:	ff 90       	pop	r15
    1eca:	ef 90       	pop	r14
    1ecc:	df 90       	pop	r13
    1ece:	cf 90       	pop	r12
    1ed0:	bf 90       	pop	r11
    1ed2:	af 90       	pop	r10
    1ed4:	08 95       	ret

00001ed6 <Cpu_Measurement>:
/****************************************************************************/
void Cpu_Measurement(void)
{
    1ed6:	0f 93       	push	r16
    1ed8:	1f 93       	push	r17
    1eda:	cf 93       	push	r28
	static uint8_t cpu_timer_t;
	static uint32_t cpu_avg_t,cpu_cycle;
	uint8_t temp,cpu_timer;

	cpu_timer=CPU_TIMER_COUNTER;// timer counter hep buradan okunur
    1edc:	c0 91 b2 00 	lds	r28, 0x00B2	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>

	if(cpu_measurement_restart==false)// eger resetleme olursa yada ilk baslangýc ise ilk deger temp de tutulacagý için flag kullanýlýr
    1ee0:	80 91 5a 01 	lds	r24, 0x015A	; 0x80015a <cpu_measurement_restart>
    1ee4:	81 11       	cpse	r24, r1
    1ee6:	63 c0       	rjmp	.+198    	; 0x1fae <Cpu_Measurement+0xd8>
	{
		if(cpu_timer >= cpu_timer_t)
    1ee8:	80 91 b0 03 	lds	r24, 0x03B0	; 0x8003b0 <cpu_timer_t.3613>
    1eec:	c8 17       	cp	r28, r24
    1eee:	20 f0       	brcs	.+8      	; 0x1ef8 <Cpu_Measurement+0x22>
		{
			temp= cpu_timer - cpu_timer_t;
    1ef0:	0c 2f       	mov	r16, r28
    1ef2:	08 1b       	sub	r16, r24
    1ef4:	80 2f       	mov	r24, r16
    1ef6:	02 c0       	rjmp	.+4      	; 0x1efc <Cpu_Measurement+0x26>
		}
		else
		{
			temp= cpu_timer_t - cpu_timer;
    1ef8:	8c 1b       	sub	r24, r28
			temp= CPU_TIMER_PERIOD - temp;
    1efa:	80 95       	com	r24
		}
		if(temp < cpu_min)
    1efc:	90 91 53 04 	lds	r25, 0x0453	; 0x800453 <cpu_min>
    1f00:	89 17       	cp	r24, r25
    1f02:	10 f4       	brcc	.+4      	; 0x1f08 <Cpu_Measurement+0x32>
		{
			cpu_min=temp;
    1f04:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <cpu_min>
		}
		if(temp > cpu_max)
    1f08:	90 91 49 04 	lds	r25, 0x0449	; 0x800449 <cpu_max>
    1f0c:	98 17       	cp	r25, r24
    1f0e:	10 f4       	brcc	.+4      	; 0x1f14 <Cpu_Measurement+0x3e>
		{
			cpu_max=temp;
    1f10:	80 93 49 04 	sts	0x0449, r24	; 0x800449 <cpu_max>
		}

		cpu_avg_t += temp;
    1f14:	40 91 ac 03 	lds	r20, 0x03AC	; 0x8003ac <cpu_avg_t.3614>
    1f18:	50 91 ad 03 	lds	r21, 0x03AD	; 0x8003ad <cpu_avg_t.3614+0x1>
    1f1c:	60 91 ae 03 	lds	r22, 0x03AE	; 0x8003ae <cpu_avg_t.3614+0x2>
    1f20:	70 91 af 03 	lds	r23, 0x03AF	; 0x8003af <cpu_avg_t.3614+0x3>
    1f24:	8a 01       	movw	r16, r20
    1f26:	9b 01       	movw	r18, r22
    1f28:	08 0f       	add	r16, r24
    1f2a:	11 1d       	adc	r17, r1
    1f2c:	21 1d       	adc	r18, r1
    1f2e:	31 1d       	adc	r19, r1
    1f30:	c9 01       	movw	r24, r18
    1f32:	b8 01       	movw	r22, r16
    1f34:	00 93 ac 03 	sts	0x03AC, r16	; 0x8003ac <cpu_avg_t.3614>
    1f38:	10 93 ad 03 	sts	0x03AD, r17	; 0x8003ad <cpu_avg_t.3614+0x1>
    1f3c:	20 93 ae 03 	sts	0x03AE, r18	; 0x8003ae <cpu_avg_t.3614+0x2>
    1f40:	30 93 af 03 	sts	0x03AF, r19	; 0x8003af <cpu_avg_t.3614+0x3>

		if(++cpu_cycle > CPU_AVG_CYCLE)
    1f44:	00 91 a8 03 	lds	r16, 0x03A8	; 0x8003a8 <cpu_cycle.3615>
    1f48:	10 91 a9 03 	lds	r17, 0x03A9	; 0x8003a9 <cpu_cycle.3615+0x1>
    1f4c:	20 91 aa 03 	lds	r18, 0x03AA	; 0x8003aa <cpu_cycle.3615+0x2>
    1f50:	30 91 ab 03 	lds	r19, 0x03AB	; 0x8003ab <cpu_cycle.3615+0x3>
    1f54:	a9 01       	movw	r20, r18
    1f56:	98 01       	movw	r18, r16
    1f58:	2f 5f       	subi	r18, 0xFF	; 255
    1f5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1f5c:	4f 4f       	sbci	r20, 0xFF	; 255
    1f5e:	5f 4f       	sbci	r21, 0xFF	; 255
    1f60:	20 93 a8 03 	sts	0x03A8, r18	; 0x8003a8 <cpu_cycle.3615>
    1f64:	30 93 a9 03 	sts	0x03A9, r19	; 0x8003a9 <cpu_cycle.3615+0x1>
    1f68:	40 93 aa 03 	sts	0x03AA, r20	; 0x8003aa <cpu_cycle.3615+0x2>
    1f6c:	50 93 ab 03 	sts	0x03AB, r21	; 0x8003ab <cpu_cycle.3615+0x3>
    1f70:	25 36       	cpi	r18, 0x65	; 101
    1f72:	31 05       	cpc	r19, r1
    1f74:	41 05       	cpc	r20, r1
    1f76:	51 05       	cpc	r21, r1
		{
			cpu_avg = cpu_avg_t/cpu_cycle;
    1f78:	c8 f1       	brcs	.+114    	; 0x1fec <Cpu_Measurement+0x116>
    1f7a:	6e d3       	rcall	.+1756   	; 0x2658 <__udivmodsi4>
    1f7c:	20 93 4f 04 	sts	0x044F, r18	; 0x80044f <cpu_avg>
    1f80:	30 93 50 04 	sts	0x0450, r19	; 0x800450 <cpu_avg+0x1>
    1f84:	40 93 51 04 	sts	0x0451, r20	; 0x800451 <cpu_avg+0x2>
    1f88:	50 93 52 04 	sts	0x0452, r21	; 0x800452 <cpu_avg+0x3>
			cpu_avg_t=0;
    1f8c:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <cpu_avg_t.3614>
    1f90:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <cpu_avg_t.3614+0x1>
    1f94:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <cpu_avg_t.3614+0x2>
    1f98:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <cpu_avg_t.3614+0x3>
			cpu_cycle=0;
    1f9c:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <cpu_cycle.3615>
    1fa0:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <cpu_cycle.3615+0x1>
    1fa4:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <cpu_cycle.3615+0x2>
    1fa8:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <cpu_cycle.3615+0x3>
		}
	}
	else// registerlarýn reset durumlarý
	{
		cpu_min=CPU_TIMER_PERIOD;
    1fac:	1f c0       	rjmp	.+62     	; 0x1fec <Cpu_Measurement+0x116>
    1fae:	8f ef       	ldi	r24, 0xFF	; 255
    1fb0:	80 93 53 04 	sts	0x0453, r24	; 0x800453 <cpu_min>
		cpu_max=0;
    1fb4:	10 92 49 04 	sts	0x0449, r1	; 0x800449 <cpu_max>
		cpu_avg=0;
    1fb8:	10 92 4f 04 	sts	0x044F, r1	; 0x80044f <cpu_avg>
    1fbc:	10 92 50 04 	sts	0x0450, r1	; 0x800450 <cpu_avg+0x1>
    1fc0:	10 92 51 04 	sts	0x0451, r1	; 0x800451 <cpu_avg+0x2>
    1fc4:	10 92 52 04 	sts	0x0452, r1	; 0x800452 <cpu_avg+0x3>
		cpu_avg_t=0;
    1fc8:	10 92 ac 03 	sts	0x03AC, r1	; 0x8003ac <cpu_avg_t.3614>
    1fcc:	10 92 ad 03 	sts	0x03AD, r1	; 0x8003ad <cpu_avg_t.3614+0x1>
    1fd0:	10 92 ae 03 	sts	0x03AE, r1	; 0x8003ae <cpu_avg_t.3614+0x2>
    1fd4:	10 92 af 03 	sts	0x03AF, r1	; 0x8003af <cpu_avg_t.3614+0x3>
		cpu_cycle=0;
    1fd8:	10 92 a8 03 	sts	0x03A8, r1	; 0x8003a8 <cpu_cycle.3615>
    1fdc:	10 92 a9 03 	sts	0x03A9, r1	; 0x8003a9 <cpu_cycle.3615+0x1>
    1fe0:	10 92 aa 03 	sts	0x03AA, r1	; 0x8003aa <cpu_cycle.3615+0x2>
    1fe4:	10 92 ab 03 	sts	0x03AB, r1	; 0x8003ab <cpu_cycle.3615+0x3>
		cpu_measurement_restart=false;
    1fe8:	10 92 5a 01 	sts	0x015A, r1	; 0x80015a <cpu_measurement_restart>
	}
	cpu_timer_t=cpu_timer;
    1fec:	c0 93 b0 03 	sts	0x03B0, r28	; 0x8003b0 <cpu_timer_t.3613>
}
    1ff0:	cf 91       	pop	r28
    1ff2:	1f 91       	pop	r17
    1ff4:	0f 91       	pop	r16
    1ff6:	08 95       	ret

00001ff8 <Cpu_Hardware_Init>:
/****************************************************************************/
/****************************************************************************/
/****************************************************************************/
void Cpu_Hardware_Init(void)
{
    1ff8:	cf 93       	push	r28
    1ffa:	df 93       	push	r29
    1ffc:	cd b7       	in	r28, 0x3d	; 61
    1ffe:	de b7       	in	r29, 0x3e	; 62
    2000:	69 97       	sbiw	r28, 0x19	; 25
    2002:	0f b6       	in	r0, 0x3f	; 63
    2004:	f8 94       	cli
    2006:	de bf       	out	0x3e, r29	; 62
    2008:	0f be       	out	0x3f, r0	; 63
	// iþlemci 16 Mhz ile koþmaktadýr
	// usart 115200 e ayarlanmýþtýr.
	sysclk_init();
    200a:	cd bf       	out	0x3d, r28	; 61
		sysclk_enable_module(POWER_RED_REG0, PRPGA_bm);
#endif
	}
#if !MEGA_UNCATEGORIZED
	else if (module == &UCSR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRUSART0_bm);
    200c:	ee dc       	rcall	.-1572   	; 0x19ea <sysclk_init>
    200e:	62 e0       	ldi	r22, 0x02	; 2

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
	} else if (module == &TCCR2A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM2_bm);
    2010:	80 e0       	ldi	r24, 0x00	; 0
    2012:	04 dd       	rcall	.-1528   	; 0x1a1c <sysclk_enable_module>
		sysclk_enable_module(POWER_RED_REG0, PRSPI_bm);
	}
#endif

	else if (module == &TCCR1A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM1_bm);
    2014:	60 e4       	ldi	r22, 0x40	; 64
    2016:	80 e0       	ldi	r24, 0x00	; 0
    2018:	01 dd       	rcall	.-1534   	; 0x1a1c <sysclk_enable_module>
	}
#endif

#if !MEGA_XX_UN2 && !MEGA_UNCATEGORIZED
	else if (module == &TCCR0A) {
		sysclk_enable_module(POWER_RED_REG0, PRTIM0_bm);
    201a:	68 e0       	ldi	r22, 0x08	; 8
    201c:	80 e0       	ldi	r24, 0x00	; 0
    201e:	fe dc       	rcall	.-1540   	; 0x1a1c <sysclk_enable_module>
    2020:	60 e2       	ldi	r22, 0x20	; 32
	sysclk_enable_peripheral_clock(&UCSR0A);// usart peripheral clock enable
	sysclk_enable_peripheral_clock(&TCCR2A);// timer2 peripheral clock enable
	sysclk_enable_peripheral_clock(&TCCR1A);// timer1 peripheral clock enable
	sysclk_enable_peripheral_clock(&TCCR0A);// timer0 peripheral clock enable
	
	board_init();
    2022:	80 e0       	ldi	r24, 0x00	; 0
    2024:	fb dc       	rcall	.-1546   	; 0x1a1c <sysclk_enable_module>
	
	cli();
    2026:	0e 94 c9 04 	call	0x992	; 0x992 <board_init>
/****************************************************************************/
static void uart_init(void)
{
	#if defined UBRR0H
	// get the values from the setbaud tool
	UBRR0H = UBRRH_VALUE;
    202a:	f8 94       	cli
	UBRR0L = UBRRL_VALUE;
    202c:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__TEXT_REGION_LENGTH__+0x7e00c5>
    2030:	80 e1       	ldi	r24, 0x10	; 16
	#else
	#error "Device is not supported by the driver"
	#endif

	#if USE_2X
	UCSR0A |= (1 << U2X0);
    2032:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__TEXT_REGION_LENGTH__+0x7e00c4>
    2036:	e0 ec       	ldi	r30, 0xC0	; 192
    2038:	f0 e0       	ldi	r31, 0x00	; 0
    203a:	80 81       	ld	r24, Z
	#endif

	// enable RX and TX and set interrupts on rx complete
	UCSR0B = (1 << RXEN0) | (1 << TXEN0) | (1 << RXCIE0);
    203c:	82 60       	ori	r24, 0x02	; 2
    203e:	80 83       	st	Z, r24
    2040:	88 e9       	ldi	r24, 0x98	; 152

	// 8-bit, 1 stop bit, no parity, asynchronous UART
	UCSR0C = (1 << UCSZ01) | (1 << UCSZ00) | (0 << USBS0) |
    2042:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__TEXT_REGION_LENGTH__+0x7e00c1>
    2046:	86 e0       	ldi	r24, 0x06	; 6
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    2048:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__TEXT_REGION_LENGTH__+0x7e00c2>
	ring.read_offset = 0;
	ring.size = size;
    204c:	1d 8a       	std	Y+21, r1	; 0x15
    204e:	1e 8a       	std	Y+22, r1	; 0x16
	ring.buffer = buffer;
    2050:	80 e4       	ldi	r24, 0x40	; 64
    2052:	8f 8b       	std	Y+23, r24	; 0x17
    2054:	29 ec       	ldi	r18, 0xC9	; 201
    2056:	33 e0       	ldi	r19, 0x03	; 3
	return ring;
    2058:	39 8f       	std	Y+25, r19	; 0x19
    205a:	28 8f       	std	Y+24, r18	; 0x18
    205c:	95 e0       	ldi	r25, 0x05	; 5
    205e:	fe 01       	movw	r30, r28
    2060:	75 96       	adiw	r30, 0x15	; 21
    2062:	de 01       	movw	r26, r28
    2064:	50 96       	adiw	r26, 0x10	; 16
    2066:	01 90       	ld	r0, Z+
    2068:	0d 92       	st	X+, r0
    206a:	9a 95       	dec	r25
    206c:	e1 f7       	brne	.-8      	; 0x2066 <Cpu_Hardware_Init+0x6e>
    206e:	95 e0       	ldi	r25, 0x05	; 5
    2070:	fe 01       	movw	r30, r28
    2072:	70 96       	adiw	r30, 0x10	; 16
    2074:	de 01       	movw	r26, r28
    2076:	1b 96       	adiw	r26, 0x0b	; 11
    2078:	01 90       	ld	r0, Z+
    207a:	0d 92       	st	X+, r0
	(0 << UPM01) | (0 << UPM00) | (0 << UMSEL01) |
	(0 << UMSEL00);

	// initialize the in and out buffer for the UART
	ring_buffer_out = ring_buffer_init(out_buffer, BUFFER_SIZE);
    207c:	9a 95       	dec	r25
    207e:	e1 f7       	brne	.-8      	; 0x2078 <Cpu_Hardware_Init+0x80>
    2080:	95 e0       	ldi	r25, 0x05	; 5
    2082:	fe 01       	movw	r30, r28
    2084:	3b 96       	adiw	r30, 0x0b	; 11
    2086:	a4 e5       	ldi	r26, 0x54	; 84
    2088:	b4 e0       	ldi	r27, 0x04	; 4
    208a:	01 90       	ld	r0, Z+
    208c:	0d 92       	st	X+, r0
 * \retval struct ring_buffer a struct containing the ring buffer
 */
static inline struct ring_buffer ring_buffer_init(uint8_t *buffer, uint8_t size)
{
	struct ring_buffer ring;
	ring.write_offset = 0;
    208e:	9a 95       	dec	r25
	ring.read_offset = 0;
    2090:	e1 f7       	brne	.-8      	; 0x208a <Cpu_Hardware_Init+0x92>
	ring.size = size;
    2092:	1d 8a       	std	Y+21, r1	; 0x15
	ring.buffer = buffer;
    2094:	1e 8a       	std	Y+22, r1	; 0x16
    2096:	8f 8b       	std	Y+23, r24	; 0x17
    2098:	89 e0       	ldi	r24, 0x09	; 9
    209a:	94 e0       	ldi	r25, 0x04	; 4
	return ring;
    209c:	99 8f       	std	Y+25, r25	; 0x19
    209e:	88 8f       	std	Y+24, r24	; 0x18
    20a0:	85 e0       	ldi	r24, 0x05	; 5
    20a2:	fe 01       	movw	r30, r28
    20a4:	75 96       	adiw	r30, 0x15	; 21
    20a6:	de 01       	movw	r26, r28
    20a8:	16 96       	adiw	r26, 0x06	; 6
    20aa:	01 90       	ld	r0, Z+
    20ac:	0d 92       	st	X+, r0
    20ae:	8a 95       	dec	r24
    20b0:	e1 f7       	brne	.-8      	; 0x20aa <Cpu_Hardware_Init+0xb2>
    20b2:	85 e0       	ldi	r24, 0x05	; 5
    20b4:	fe 01       	movw	r30, r28
    20b6:	36 96       	adiw	r30, 0x06	; 6
    20b8:	de 01       	movw	r26, r28
    20ba:	11 96       	adiw	r26, 0x01	; 1
    20bc:	01 90       	ld	r0, Z+
    20be:	0d 92       	st	X+, r0
	ring_buffer_in = ring_buffer_init(in_buffer, BUFFER_SIZE);
    20c0:	8a 95       	dec	r24
    20c2:	e1 f7       	brne	.-8      	; 0x20bc <Cpu_Hardware_Init+0xc4>
    20c4:	85 e0       	ldi	r24, 0x05	; 5
    20c6:	fe 01       	movw	r30, r28
    20c8:	31 96       	adiw	r30, 0x01	; 1
    20ca:	aa e4       	ldi	r26, 0x4A	; 74
    20cc:	b4 e0       	ldi	r27, 0x04	; 4
    20ce:	01 90       	ld	r0, Z+
    20d0:	0d 92       	st	X+, r0
	return ring_buffer_get(&ring_buffer_in);
}
/****************************************************************************/
static inline void timers_init(void)
{
	TCNT0=TICK_TIMER_RELOAD;//for 10mS  at 16 MHz Tick Timer
    20d2:	8a 95       	dec	r24
    20d4:	e1 f7       	brne	.-8      	; 0x20ce <Cpu_Hardware_Init+0xd6>
	TCCR0A=0x00;
    20d6:	83 e6       	ldi	r24, 0x63	; 99
	TCCR0B=0x05;  // Timer mode with 1024 prescler (clock böleni en yavas haline ayarlý daha fazla yavaslatilamaz)
    20d8:	86 bd       	out	0x26, r24	; 38
    20da:	14 bc       	out	0x24, r1	; 36
	TIMSK0=1;// int enable
    20dc:	85 e0       	ldi	r24, 0x05	; 5
    20de:	85 bd       	out	0x25, r24	; 37
    20e0:	81 e0       	ldi	r24, 0x01	; 1

	TCNT1 = SEC_TIMER_RELOAD;  //for 1 sec at 16 MHz
    20e2:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__TEXT_REGION_LENGTH__+0x7e006e>
    20e6:	2b ef       	ldi	r18, 0xFB	; 251
    20e8:	3b e0       	ldi	r19, 0x0B	; 11
    20ea:	30 93 85 00 	sts	0x0085, r19	; 0x800085 <__TEXT_REGION_LENGTH__+0x7e0085>
	TCCR1A=0x00;
    20ee:	20 93 84 00 	sts	0x0084, r18	; 0x800084 <__TEXT_REGION_LENGTH__+0x7e0084>
	TCCR1B=0x04;  // Timer mode with 512 prescler (clock böleni 16 bit de 1 sn yi hesaplayan en iyi degerde )
    20f2:	10 92 80 00 	sts	0x0080, r1	; 0x800080 <__TEXT_REGION_LENGTH__+0x7e0080>
    20f6:	94 e0       	ldi	r25, 0x04	; 4
	TIMSK1=0x01;  // int enable
    20f8:	90 93 81 00 	sts	0x0081, r25	; 0x800081 <__TEXT_REGION_LENGTH__+0x7e0081>
	
	TCNT2=0; //for 10mS  at 16 MHz CPU timer
    20fc:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <__TEXT_REGION_LENGTH__+0x7e006f>
	TCCR2A=0x00;
    2100:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__TEXT_REGION_LENGTH__+0x7e00b2>
	TCCR2B=0x07;  // Timer mode with 1024 prescler (clock böleni en tick timer böleni ile ayný olmalýdýr.)
    2104:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <__TEXT_REGION_LENGTH__+0x7e00b0>
	board_init();
	
	cli();
	uart_init();
	timers_init();
	sei();
    2108:	87 e0       	ldi	r24, 0x07	; 7
	
	Calc_WeekDay(&real_date);
    210a:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__TEXT_REGION_LENGTH__+0x7e00b1>
    210e:	78 94       	sei
    2110:	88 e4       	ldi	r24, 0x48	; 72
	
	xdev_out(uart_putchar);
    2112:	91 e0       	ldi	r25, 0x01	; 1
    2114:	0d dc       	rcall	.-2022   	; 0x1930 <Calc_WeekDay>
    2116:	8f e2       	ldi	r24, 0x2F	; 47
    2118:	9d e0       	ldi	r25, 0x0D	; 13
    211a:	90 93 5c 04 	sts	0x045C, r25	; 0x80045c <xfunc_out+0x1>

	gpio_set_pin_high(BUZZER_PIN);
	delay_ms(5);
    211e:	80 93 5b 04 	sts	0x045B, r24	; 0x80045b <xfunc_out>
    2122:	42 9a       	sbi	0x08, 2	; 8
    2124:	66 e1       	ldi	r22, 0x16	; 22
    2126:	74 e3       	ldi	r23, 0x34	; 52
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    2128:	80 e0       	ldi	r24, 0x00	; 0
	gpio_set_pin_low(BUZZER_PIN);
	delay_ms(100);
    212a:	90 e0       	ldi	r25, 0x00	; 0
    212c:	8d dc       	rcall	.-1766   	; 0x1a48 <__portable_avr_delay_cycles>
    212e:	42 98       	cbi	0x08, 2	; 8
    2130:	6b ea       	ldi	r22, 0xAB	; 171
    2132:	71 e1       	ldi	r23, 0x11	; 17
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    2134:	84 e0       	ldi	r24, 0x04	; 4
	gpio_set_pin_high(BUZZER_PIN);
	delay_ms(5);
    2136:	90 e0       	ldi	r25, 0x00	; 0
    2138:	87 dc       	rcall	.-1778   	; 0x1a48 <__portable_avr_delay_cycles>
    213a:	42 9a       	sbi	0x08, 2	; 8
    213c:	66 e1       	ldi	r22, 0x16	; 22
    213e:	74 e3       	ldi	r23, 0x34	; 52
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    2140:	80 e0       	ldi	r24, 0x00	; 0
	gpio_set_pin_low(BUZZER_PIN);
	delay_ms(100);
    2142:	90 e0       	ldi	r25, 0x00	; 0
    2144:	81 dc       	rcall	.-1790   	; 0x1a48 <__portable_avr_delay_cycles>
    2146:	42 98       	cbi	0x08, 2	; 8
    2148:	6b ea       	ldi	r22, 0xAB	; 171
    214a:	71 e1       	ldi	r23, 0x11	; 17
{
	PORT_t *base_add = arch_ioport_port_to_base(pin >> 3);

	if (level) {
		base_add->PORTDATA
			= (base_add->PORTDATA  | arch_ioport_pin_to_mask
    214c:	84 e0       	ldi	r24, 0x04	; 4
	gpio_set_pin_high(BUZZER_PIN);
	delay_ms(5);
    214e:	90 e0       	ldi	r25, 0x00	; 0
    2150:	7b dc       	rcall	.-1802   	; 0x1a48 <__portable_avr_delay_cycles>
    2152:	42 9a       	sbi	0x08, 2	; 8
    2154:	66 e1       	ldi	r22, 0x16	; 22
    2156:	74 e3       	ldi	r23, 0x34	; 52
    2158:	80 e0       	ldi	r24, 0x00	; 0
					(pin));
	} else {
		base_add->PORTDATA
			= (base_add->PORTDATA  & (~arch_ioport_pin_to_mask
    215a:	90 e0       	ldi	r25, 0x00	; 0
	gpio_set_pin_low(BUZZER_PIN);
	
	//button_2=ioport_get_pin_level(BUTTON_2);
	//uart_putstr(test_string,strlen(test_string));
}
    215c:	75 dc       	rcall	.-1814   	; 0x1a48 <__portable_avr_delay_cycles>
    215e:	42 98       	cbi	0x08, 2	; 8
    2160:	69 96       	adiw	r28, 0x19	; 25
    2162:	0f b6       	in	r0, 0x3f	; 63
    2164:	f8 94       	cli
    2166:	de bf       	out	0x3e, r29	; 62
    2168:	0f be       	out	0x3f, r0	; 63
    216a:	cd bf       	out	0x3d, r28	; 61
    216c:	df 91       	pop	r29
    216e:	cf 91       	pop	r28
    2170:	08 95       	ret

00002172 <xputc>:
	xfunc_out = func;	/* Switch output to specified device */
	while (*str) {		/* Put the string */
		xputc(*str++);
	}
	xfunc_out = pf;		/* Restore output device */
}
    2172:	cf 93       	push	r28
    2174:	c8 2f       	mov	r28, r24
    2176:	8a 30       	cpi	r24, 0x0A	; 10
    2178:	11 f4       	brne	.+4      	; 0x217e <xputc+0xc>
    217a:	8d e0       	ldi	r24, 0x0D	; 13
    217c:	fa df       	rcall	.-12     	; 0x2172 <xputc>
    217e:	e0 91 c7 03 	lds	r30, 0x03C7	; 0x8003c7 <outptr>
    2182:	f0 91 c8 03 	lds	r31, 0x03C8	; 0x8003c8 <outptr+0x1>
    2186:	30 97       	sbiw	r30, 0x00	; 0
    2188:	41 f0       	breq	.+16     	; 0x219a <xputc+0x28>
    218a:	cf 01       	movw	r24, r30
    218c:	01 96       	adiw	r24, 0x01	; 1
    218e:	90 93 c8 03 	sts	0x03C8, r25	; 0x8003c8 <outptr+0x1>
    2192:	80 93 c7 03 	sts	0x03C7, r24	; 0x8003c7 <outptr>
    2196:	c0 83       	st	Z, r28
    2198:	08 c0       	rjmp	.+16     	; 0x21aa <xputc+0x38>
    219a:	e0 91 5b 04 	lds	r30, 0x045B	; 0x80045b <xfunc_out>
    219e:	f0 91 5c 04 	lds	r31, 0x045C	; 0x80045c <xfunc_out+0x1>
    21a2:	30 97       	sbiw	r30, 0x00	; 0
    21a4:	11 f0       	breq	.+4      	; 0x21aa <xputc+0x38>
    21a6:	8c 2f       	mov	r24, r28
    21a8:	09 95       	icall
    21aa:	cf 91       	pop	r28
    21ac:	08 95       	ret

000021ae <xputs>:
    21ae:	cf 93       	push	r28
    21b0:	df 93       	push	r29
    21b2:	ec 01       	movw	r28, r24
    21b4:	88 81       	ld	r24, Y
    21b6:	88 23       	and	r24, r24
    21b8:	29 f0       	breq	.+10     	; 0x21c4 <xputs+0x16>
    21ba:	21 96       	adiw	r28, 0x01	; 1
    21bc:	da df       	rcall	.-76     	; 0x2172 <xputc>
    21be:	89 91       	ld	r24, Y+
    21c0:	81 11       	cpse	r24, r1
    21c2:	fc cf       	rjmp	.-8      	; 0x21bc <xputs+0xe>
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	08 95       	ret

000021ca <xvprintf>:
    21ca:	2f 92       	push	r2
    21cc:	3f 92       	push	r3
    21ce:	4f 92       	push	r4
    21d0:	5f 92       	push	r5
    21d2:	6f 92       	push	r6
    21d4:	7f 92       	push	r7
    21d6:	8f 92       	push	r8
    21d8:	9f 92       	push	r9
    21da:	af 92       	push	r10
    21dc:	bf 92       	push	r11
    21de:	cf 92       	push	r12
    21e0:	df 92       	push	r13
    21e2:	ef 92       	push	r14
    21e4:	ff 92       	push	r15
    21e6:	0f 93       	push	r16
    21e8:	1f 93       	push	r17
    21ea:	cf 93       	push	r28
    21ec:	df 93       	push	r29
    21ee:	cd b7       	in	r28, 0x3d	; 61
    21f0:	de b7       	in	r29, 0x3e	; 62
    21f2:	6c 97       	sbiw	r28, 0x1c	; 28
    21f4:	0f b6       	in	r0, 0x3f	; 63
    21f6:	f8 94       	cli
    21f8:	de bf       	out	0x3e, r29	; 62
    21fa:	0f be       	out	0x3f, r0	; 63
    21fc:	cd bf       	out	0x3d, r28	; 61
    21fe:	1c 01       	movw	r2, r24
    2200:	7a 8f       	std	Y+26, r23	; 0x1a
    2202:	69 8f       	std	Y+25, r22	; 0x19
    2204:	02 c0       	rjmp	.+4      	; 0x220a <xvprintf+0x40>
    2206:	ba 8e       	std	Y+26, r11	; 0x1a
    2208:	a9 8e       	std	Y+25, r10	; 0x19
    220a:	d1 01       	movw	r26, r2
    220c:	8c 91       	ld	r24, X
    220e:	88 23       	and	r24, r24
    2210:	09 f4       	brne	.+2      	; 0x2214 <xvprintf+0x4a>
    2212:	c4 c1       	rjmp	.+904    	; 0x259c <xvprintf+0x3d2>
    2214:	85 32       	cpi	r24, 0x25	; 37
    2216:	29 f0       	breq	.+10     	; 0x2222 <xvprintf+0x58>
    2218:	bf ef       	ldi	r27, 0xFF	; 255
    221a:	2b 1a       	sub	r2, r27
    221c:	3b 0a       	sbc	r3, r27
    221e:	a9 df       	rcall	.-174    	; 0x2172 <xputc>
    2220:	f4 cf       	rjmp	.-24     	; 0x220a <xvprintf+0x40>
    2222:	f1 01       	movw	r30, r2
    2224:	41 81       	ldd	r20, Z+1	; 0x01
    2226:	40 33       	cpi	r20, 0x30	; 48
    2228:	49 f4       	brne	.+18     	; 0x223c <xvprintf+0x72>
    222a:	42 81       	ldd	r20, Z+2	; 0x02
    222c:	91 01       	movw	r18, r2
    222e:	2d 5f       	subi	r18, 0xFD	; 253
    2230:	3f 4f       	sbci	r19, 0xFF	; 255
    2232:	19 01       	movw	r2, r18
    2234:	ee 24       	eor	r14, r14
    2236:	e3 94       	inc	r14
    2238:	f1 2c       	mov	r15, r1
    223a:	10 c0       	rjmp	.+32     	; 0x225c <xvprintf+0x92>
    223c:	4d 32       	cpi	r20, 0x2D	; 45
    223e:	31 f0       	breq	.+12     	; 0x224c <xvprintf+0x82>
    2240:	32 e0       	ldi	r19, 0x02	; 2
    2242:	23 0e       	add	r2, r19
    2244:	31 1c       	adc	r3, r1
    2246:	e1 2c       	mov	r14, r1
    2248:	f1 2c       	mov	r15, r1
    224a:	08 c0       	rjmp	.+16     	; 0x225c <xvprintf+0x92>
    224c:	42 81       	ldd	r20, Z+2	; 0x02
    224e:	f1 01       	movw	r30, r2
    2250:	33 96       	adiw	r30, 0x03	; 3
    2252:	1f 01       	movw	r2, r30
    2254:	68 94       	set
    2256:	ee 24       	eor	r14, r14
    2258:	e1 f8       	bld	r14, 1
    225a:	f1 2c       	mov	r15, r1
    225c:	80 ed       	ldi	r24, 0xD0	; 208
    225e:	84 0f       	add	r24, r20
    2260:	8a 30       	cpi	r24, 0x0A	; 10
    2262:	f0 f4       	brcc	.+60     	; 0x22a0 <xvprintf+0xd6>
    2264:	00 e0       	ldi	r16, 0x00	; 0
    2266:	10 e0       	ldi	r17, 0x00	; 0
    2268:	c8 01       	movw	r24, r16
    226a:	88 0f       	add	r24, r24
    226c:	99 1f       	adc	r25, r25
    226e:	00 0f       	add	r16, r16
    2270:	11 1f       	adc	r17, r17
    2272:	00 0f       	add	r16, r16
    2274:	11 1f       	adc	r17, r17
    2276:	00 0f       	add	r16, r16
    2278:	11 1f       	adc	r17, r17
    227a:	08 0f       	add	r16, r24
    227c:	19 1f       	adc	r17, r25
    227e:	04 0f       	add	r16, r20
    2280:	11 1d       	adc	r17, r1
    2282:	47 fd       	sbrc	r20, 7
    2284:	1a 95       	dec	r17
    2286:	00 53       	subi	r16, 0x30	; 48
    2288:	11 09       	sbc	r17, r1
    228a:	ff ef       	ldi	r31, 0xFF	; 255
    228c:	2f 1a       	sub	r2, r31
    228e:	3f 0a       	sbc	r3, r31
    2290:	f1 01       	movw	r30, r2
    2292:	31 97       	sbiw	r30, 0x01	; 1
    2294:	40 81       	ld	r20, Z
    2296:	80 ed       	ldi	r24, 0xD0	; 208
    2298:	84 0f       	add	r24, r20
    229a:	8a 30       	cpi	r24, 0x0A	; 10
    229c:	28 f3       	brcs	.-54     	; 0x2268 <xvprintf+0x9e>
    229e:	02 c0       	rjmp	.+4      	; 0x22a4 <xvprintf+0xda>
    22a0:	00 e0       	ldi	r16, 0x00	; 0
    22a2:	10 e0       	ldi	r17, 0x00	; 0
    22a4:	84 2f       	mov	r24, r20
    22a6:	8f 7d       	andi	r24, 0xDF	; 223
    22a8:	8c 34       	cpi	r24, 0x4C	; 76
    22aa:	39 f4       	brne	.+14     	; 0x22ba <xvprintf+0xf0>
    22ac:	68 94       	set
    22ae:	e2 f8       	bld	r14, 2
    22b0:	d1 01       	movw	r26, r2
    22b2:	4c 91       	ld	r20, X
    22b4:	f1 01       	movw	r30, r2
    22b6:	31 96       	adiw	r30, 0x01	; 1
    22b8:	1f 01       	movw	r2, r30
    22ba:	44 23       	and	r20, r20
    22bc:	09 f4       	brne	.+2      	; 0x22c0 <xvprintf+0xf6>
    22be:	6e c1       	rjmp	.+732    	; 0x259c <xvprintf+0x3d2>
    22c0:	41 36       	cpi	r20, 0x61	; 97
    22c2:	1c f0       	brlt	.+6      	; 0x22ca <xvprintf+0x100>
    22c4:	20 ee       	ldi	r18, 0xE0	; 224
    22c6:	24 0f       	add	r18, r20
    22c8:	01 c0       	rjmp	.+2      	; 0x22cc <xvprintf+0x102>
    22ca:	24 2f       	mov	r18, r20
    22cc:	82 2f       	mov	r24, r18
    22ce:	02 2e       	mov	r0, r18
    22d0:	00 0c       	add	r0, r0
    22d2:	99 0b       	sbc	r25, r25
    22d4:	aa 0b       	sbc	r26, r26
    22d6:	bb 0b       	sbc	r27, r27
    22d8:	fc 01       	movw	r30, r24
    22da:	e2 54       	subi	r30, 0x42	; 66
    22dc:	f1 09       	sbc	r31, r1
    22de:	e7 31       	cpi	r30, 0x17	; 23
    22e0:	f1 05       	cpc	r31, r1
    22e2:	08 f0       	brcs	.+2      	; 0x22e6 <xvprintf+0x11c>
    22e4:	4e c0       	rjmp	.+156    	; 0x2382 <xvprintf+0x1b8>
    22e6:	ec 5c       	subi	r30, 0xCC	; 204
    22e8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ea:	d8 c1       	rjmp	.+944    	; 0x269c <__tablejump2__>
    22ec:	a9 8c       	ldd	r10, Y+25	; 0x19
    22ee:	ba 8c       	ldd	r11, Y+26	; 0x1a
    22f0:	f2 e0       	ldi	r31, 0x02	; 2
    22f2:	af 0e       	add	r10, r31
    22f4:	b1 1c       	adc	r11, r1
    22f6:	a9 8d       	ldd	r26, Y+25	; 0x19
    22f8:	ba 8d       	ldd	r27, Y+26	; 0x1a
    22fa:	cd 90       	ld	r12, X+
    22fc:	dc 90       	ld	r13, X
    22fe:	f6 01       	movw	r30, r12
    2300:	80 81       	ld	r24, Z
    2302:	88 23       	and	r24, r24
    2304:	51 f0       	breq	.+20     	; 0x231a <xvprintf+0x150>
    2306:	31 96       	adiw	r30, 0x01	; 1
    2308:	81 2c       	mov	r8, r1
    230a:	91 2c       	mov	r9, r1
    230c:	2f ef       	ldi	r18, 0xFF	; 255
    230e:	82 1a       	sub	r8, r18
    2310:	92 0a       	sbc	r9, r18
    2312:	81 91       	ld	r24, Z+
    2314:	81 11       	cpse	r24, r1
    2316:	fa cf       	rjmp	.-12     	; 0x230c <xvprintf+0x142>
    2318:	02 c0       	rjmp	.+4      	; 0x231e <xvprintf+0x154>
    231a:	81 2c       	mov	r8, r1
    231c:	91 2c       	mov	r9, r1
    231e:	e1 fc       	sbrc	r14, 1
    2320:	13 c0       	rjmp	.+38     	; 0x2348 <xvprintf+0x17e>
    2322:	c4 01       	movw	r24, r8
    2324:	01 96       	adiw	r24, 0x01	; 1
    2326:	80 16       	cp	r8, r16
    2328:	91 06       	cpc	r9, r17
    232a:	08 f4       	brcc	.+2      	; 0x232e <xvprintf+0x164>
    232c:	09 c1       	rjmp	.+530    	; 0x2540 <xvprintf+0x376>
    232e:	4c 01       	movw	r8, r24
    2330:	0b c0       	rjmp	.+22     	; 0x2348 <xvprintf+0x17e>
    2332:	3f ef       	ldi	r19, 0xFF	; 255
    2334:	e3 1a       	sub	r14, r19
    2336:	f3 0a       	sbc	r15, r19
    2338:	e0 16       	cp	r14, r16
    233a:	f1 06       	cpc	r15, r17
    233c:	08 f4       	brcc	.+2      	; 0x2340 <xvprintf+0x176>
    233e:	fd c0       	rjmp	.+506    	; 0x253a <xvprintf+0x370>
    2340:	48 01       	movw	r8, r16
    2342:	4f ef       	ldi	r20, 0xFF	; 255
    2344:	84 1a       	sub	r8, r20
    2346:	94 0a       	sbc	r9, r20
    2348:	c6 01       	movw	r24, r12
    234a:	31 df       	rcall	.-414    	; 0x21ae <xputs>
    234c:	80 16       	cp	r8, r16
    234e:	91 06       	cpc	r9, r17
    2350:	08 f0       	brcs	.+2      	; 0x2354 <xvprintf+0x18a>
    2352:	59 cf       	rjmp	.-334    	; 0x2206 <xvprintf+0x3c>
    2354:	74 01       	movw	r14, r8
    2356:	80 e2       	ldi	r24, 0x20	; 32
    2358:	0c df       	rcall	.-488    	; 0x2172 <xputc>
    235a:	5f ef       	ldi	r21, 0xFF	; 255
    235c:	e5 1a       	sub	r14, r21
    235e:	f5 0a       	sbc	r15, r21
    2360:	e0 16       	cp	r14, r16
    2362:	f1 06       	cpc	r15, r17
    2364:	c0 f3       	brcs	.-16     	; 0x2356 <xvprintf+0x18c>
    2366:	ba 8e       	std	Y+26, r11	; 0x1a
    2368:	a9 8e       	std	Y+25, r10	; 0x19
    236a:	4f cf       	rjmp	.-354    	; 0x220a <xvprintf+0x40>
    236c:	09 8d       	ldd	r16, Y+25	; 0x19
    236e:	1a 8d       	ldd	r17, Y+26	; 0x1a
    2370:	0e 5f       	subi	r16, 0xFE	; 254
    2372:	1f 4f       	sbci	r17, 0xFF	; 255
    2374:	a9 8d       	ldd	r26, Y+25	; 0x19
    2376:	ba 8d       	ldd	r27, Y+26	; 0x1a
    2378:	8c 91       	ld	r24, X
    237a:	fb de       	rcall	.-522    	; 0x2172 <xputc>
    237c:	1a 8f       	std	Y+26, r17	; 0x1a
    237e:	09 8f       	std	Y+25, r16	; 0x19
    2380:	44 cf       	rjmp	.-376    	; 0x220a <xvprintf+0x40>
    2382:	84 2f       	mov	r24, r20
    2384:	f6 de       	rcall	.-532    	; 0x2172 <xputc>
    2386:	41 cf       	rjmp	.-382    	; 0x220a <xvprintf+0x40>
    2388:	e2 fe       	sbrs	r14, 2
    238a:	19 c0       	rjmp	.+50     	; 0x23be <xvprintf+0x1f4>
    238c:	0f 2e       	mov	r0, r31
    238e:	fa e0       	ldi	r31, 0x0A	; 10
    2390:	4f 2e       	mov	r4, r31
    2392:	f0 2d       	mov	r31, r0
    2394:	51 2c       	mov	r5, r1
    2396:	04 c0       	rjmp	.+8      	; 0x23a0 <xvprintf+0x1d6>
    2398:	68 94       	set
    239a:	44 24       	eor	r4, r4
    239c:	44 f8       	bld	r4, 4
    239e:	51 2c       	mov	r5, r1
    23a0:	69 8d       	ldd	r22, Y+25	; 0x19
    23a2:	7a 8d       	ldd	r23, Y+26	; 0x1a
    23a4:	6c 5f       	subi	r22, 0xFC	; 252
    23a6:	7f 4f       	sbci	r23, 0xFF	; 255
    23a8:	e9 8d       	ldd	r30, Y+25	; 0x19
    23aa:	fa 8d       	ldd	r31, Y+26	; 0x1a
    23ac:	80 81       	ld	r24, Z
    23ae:	91 81       	ldd	r25, Z+1	; 0x01
    23b0:	a2 81       	ldd	r26, Z+2	; 0x02
    23b2:	b3 81       	ldd	r27, Z+3	; 0x03
    23b4:	24 34       	cpi	r18, 0x44	; 68
    23b6:	29 f1       	breq	.+74     	; 0x2402 <xvprintf+0x238>
    23b8:	7a 8f       	std	Y+26, r23	; 0x1a
    23ba:	69 8f       	std	Y+25, r22	; 0x19
    23bc:	2f c0       	rjmp	.+94     	; 0x241c <xvprintf+0x252>
    23be:	0f 2e       	mov	r0, r31
    23c0:	fa e0       	ldi	r31, 0x0A	; 10
    23c2:	4f 2e       	mov	r4, r31
    23c4:	f0 2d       	mov	r31, r0
    23c6:	51 2c       	mov	r5, r1
    23c8:	24 34       	cpi	r18, 0x44	; 68
    23ca:	71 f4       	brne	.+28     	; 0x23e8 <xvprintf+0x21e>
    23cc:	a9 8d       	ldd	r26, Y+25	; 0x19
    23ce:	ba 8d       	ldd	r27, Y+26	; 0x1a
    23d0:	6d 91       	ld	r22, X+
    23d2:	7c 91       	ld	r23, X
    23d4:	cb 01       	movw	r24, r22
    23d6:	77 0f       	add	r23, r23
    23d8:	aa 0b       	sbc	r26, r26
    23da:	bb 0b       	sbc	r27, r27
    23dc:	e9 8d       	ldd	r30, Y+25	; 0x19
    23de:	fa 8d       	ldd	r31, Y+26	; 0x1a
    23e0:	32 96       	adiw	r30, 0x02	; 2
    23e2:	fa 8f       	std	Y+26, r31	; 0x1a
    23e4:	e9 8f       	std	Y+25, r30	; 0x19
    23e6:	0f c0       	rjmp	.+30     	; 0x2406 <xvprintf+0x23c>
    23e8:	a9 8d       	ldd	r26, Y+25	; 0x19
    23ea:	ba 8d       	ldd	r27, Y+26	; 0x1a
    23ec:	6d 91       	ld	r22, X+
    23ee:	7c 91       	ld	r23, X
    23f0:	cb 01       	movw	r24, r22
    23f2:	a0 e0       	ldi	r26, 0x00	; 0
    23f4:	b0 e0       	ldi	r27, 0x00	; 0
    23f6:	e9 8d       	ldd	r30, Y+25	; 0x19
    23f8:	fa 8d       	ldd	r31, Y+26	; 0x1a
    23fa:	32 96       	adiw	r30, 0x02	; 2
    23fc:	fa 8f       	std	Y+26, r31	; 0x1a
    23fe:	e9 8f       	std	Y+25, r30	; 0x19
    2400:	0d c0       	rjmp	.+26     	; 0x241c <xvprintf+0x252>
    2402:	7a 8f       	std	Y+26, r23	; 0x1a
    2404:	69 8f       	std	Y+25, r22	; 0x19
    2406:	bb 23       	and	r27, r27
    2408:	4c f4       	brge	.+18     	; 0x241c <xvprintf+0x252>
    240a:	b0 95       	com	r27
    240c:	a0 95       	com	r26
    240e:	90 95       	com	r25
    2410:	81 95       	neg	r24
    2412:	9f 4f       	sbci	r25, 0xFF	; 255
    2414:	af 4f       	sbci	r26, 0xFF	; 255
    2416:	bf 4f       	sbci	r27, 0xFF	; 255
    2418:	68 94       	set
    241a:	e4 f8       	bld	r14, 4
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	48 37       	cpi	r20, 0x78	; 120
    2422:	11 f4       	brne	.+4      	; 0x2428 <xvprintf+0x25e>
    2424:	27 e2       	ldi	r18, 0x27	; 39
    2426:	01 c0       	rjmp	.+2      	; 0x242a <xvprintf+0x260>
    2428:	27 e0       	ldi	r18, 0x07	; 7
    242a:	ae 01       	movw	r20, r28
    242c:	4f 5f       	subi	r20, 0xFF	; 255
    242e:	5f 4f       	sbci	r21, 0xFF	; 255
    2430:	4a 01       	movw	r8, r20
    2432:	a1 2c       	mov	r10, r1
    2434:	b1 2c       	mov	r11, r1
    2436:	61 2c       	mov	r6, r1
    2438:	71 2c       	mov	r7, r1
    243a:	1c 8f       	std	Y+28, r17	; 0x1c
    243c:	0b 8f       	std	Y+27, r16	; 0x1b
    243e:	12 2f       	mov	r17, r18
    2440:	01 c0       	rjmp	.+2      	; 0x2444 <xvprintf+0x27a>
    2442:	56 01       	movw	r10, r12
    2444:	a3 01       	movw	r20, r6
    2446:	92 01       	movw	r18, r4
    2448:	07 d1       	rcall	.+526    	; 0x2658 <__udivmodsi4>
    244a:	f6 2f       	mov	r31, r22
    244c:	e6 2f       	mov	r30, r22
    244e:	62 2f       	mov	r22, r18
    2450:	73 2f       	mov	r23, r19
    2452:	84 2f       	mov	r24, r20
    2454:	95 2f       	mov	r25, r21
    2456:	fa 30       	cpi	r31, 0x0A	; 10
    2458:	14 f0       	brlt	.+4      	; 0x245e <xvprintf+0x294>
    245a:	e1 2f       	mov	r30, r17
    245c:	ef 0f       	add	r30, r31
    245e:	65 01       	movw	r12, r10
    2460:	5f ef       	ldi	r21, 0xFF	; 255
    2462:	c5 1a       	sub	r12, r21
    2464:	d5 0a       	sbc	r13, r21
    2466:	e0 5d       	subi	r30, 0xD0	; 208
    2468:	d4 01       	movw	r26, r8
    246a:	ed 93       	st	X+, r30
    246c:	4d 01       	movw	r8, r26
    246e:	61 15       	cp	r22, r1
    2470:	71 05       	cpc	r23, r1
    2472:	81 05       	cpc	r24, r1
    2474:	91 05       	cpc	r25, r1
    2476:	21 f0       	breq	.+8      	; 0x2480 <xvprintf+0x2b6>
    2478:	b8 e1       	ldi	r27, 0x18	; 24
    247a:	cb 16       	cp	r12, r27
    247c:	d1 04       	cpc	r13, r1
    247e:	09 f7       	brne	.-62     	; 0x2442 <xvprintf+0x278>
    2480:	0b 8d       	ldd	r16, Y+27	; 0x1b
    2482:	1c 8d       	ldd	r17, Y+28	; 0x1c
    2484:	e4 fe       	sbrs	r14, 4
    2486:	0c c0       	rjmp	.+24     	; 0x24a0 <xvprintf+0x2d6>
    2488:	e1 e0       	ldi	r30, 0x01	; 1
    248a:	f0 e0       	ldi	r31, 0x00	; 0
    248c:	ec 0f       	add	r30, r28
    248e:	fd 1f       	adc	r31, r29
    2490:	ec 0d       	add	r30, r12
    2492:	fd 1d       	adc	r31, r13
    2494:	2d e2       	ldi	r18, 0x2D	; 45
    2496:	20 83       	st	Z, r18
    2498:	a5 01       	movw	r20, r10
    249a:	4e 5f       	subi	r20, 0xFE	; 254
    249c:	5f 4f       	sbci	r21, 0xFF	; 255
    249e:	6a 01       	movw	r12, r20
    24a0:	e0 fc       	sbrc	r14, 0
    24a2:	04 c0       	rjmp	.+8      	; 0x24ac <xvprintf+0x2e2>
    24a4:	68 94       	set
    24a6:	99 24       	eor	r9, r9
    24a8:	95 f8       	bld	r9, 5
    24aa:	04 c0       	rjmp	.+8      	; 0x24b4 <xvprintf+0x2ea>
    24ac:	0f 2e       	mov	r0, r31
    24ae:	f0 e3       	ldi	r31, 0x30	; 48
    24b0:	9f 2e       	mov	r9, r31
    24b2:	f0 2d       	mov	r31, r0
    24b4:	e1 fc       	sbrc	r14, 1
    24b6:	13 c0       	rjmp	.+38     	; 0x24de <xvprintf+0x314>
    24b8:	56 01       	movw	r10, r12
    24ba:	5f ef       	ldi	r21, 0xFF	; 255
    24bc:	a5 1a       	sub	r10, r21
    24be:	b5 0a       	sbc	r11, r21
    24c0:	c0 16       	cp	r12, r16
    24c2:	d1 06       	cpc	r13, r17
    24c4:	b0 f1       	brcs	.+108    	; 0x2532 <xvprintf+0x368>
    24c6:	0c c0       	rjmp	.+24     	; 0x24e0 <xvprintf+0x316>
    24c8:	8f ef       	ldi	r24, 0xFF	; 255
    24ca:	e8 1a       	sub	r14, r24
    24cc:	f8 0a       	sbc	r15, r24
    24ce:	e0 16       	cp	r14, r16
    24d0:	f1 06       	cpc	r15, r17
    24d2:	60 f1       	brcs	.+88     	; 0x252c <xvprintf+0x362>
    24d4:	58 01       	movw	r10, r16
    24d6:	9f ef       	ldi	r25, 0xFF	; 255
    24d8:	a9 1a       	sub	r10, r25
    24da:	b9 0a       	sbc	r11, r25
    24dc:	01 c0       	rjmp	.+2      	; 0x24e0 <xvprintf+0x316>
    24de:	56 01       	movw	r10, r12
    24e0:	ee 24       	eor	r14, r14
    24e2:	e3 94       	inc	r14
    24e4:	f1 2c       	mov	r15, r1
    24e6:	ec 0e       	add	r14, r28
    24e8:	fd 1e       	adc	r15, r29
    24ea:	ec 0c       	add	r14, r12
    24ec:	fd 1c       	adc	r15, r13
    24ee:	a1 e0       	ldi	r26, 0x01	; 1
    24f0:	ca 1a       	sub	r12, r26
    24f2:	d1 08       	sbc	r13, r1
    24f4:	f7 01       	movw	r30, r14
    24f6:	82 91       	ld	r24, -Z
    24f8:	7f 01       	movw	r14, r30
    24fa:	3b de       	rcall	.-906    	; 0x2172 <xputc>
    24fc:	c1 14       	cp	r12, r1
    24fe:	d1 04       	cpc	r13, r1
    2500:	b1 f7       	brne	.-20     	; 0x24ee <xvprintf+0x324>
    2502:	a0 16       	cp	r10, r16
    2504:	b1 06       	cpc	r11, r17
    2506:	08 f0       	brcs	.+2      	; 0x250a <xvprintf+0x340>
    2508:	80 ce       	rjmp	.-768    	; 0x220a <xvprintf+0x40>
    250a:	75 01       	movw	r14, r10
    250c:	80 e2       	ldi	r24, 0x20	; 32
    250e:	31 de       	rcall	.-926    	; 0x2172 <xputc>
    2510:	ff ef       	ldi	r31, 0xFF	; 255
    2512:	ef 1a       	sub	r14, r31
    2514:	ff 0a       	sbc	r15, r31
    2516:	e0 16       	cp	r14, r16
    2518:	f1 06       	cpc	r15, r17
    251a:	c0 f3       	brcs	.-16     	; 0x250c <xvprintf+0x342>
    251c:	76 ce       	rjmp	.-788    	; 0x220a <xvprintf+0x40>
    251e:	e2 fc       	sbrc	r14, 2
    2520:	3b cf       	rjmp	.-394    	; 0x2398 <xvprintf+0x1ce>
    2522:	68 94       	set
    2524:	44 24       	eor	r4, r4
    2526:	44 f8       	bld	r4, 4
    2528:	51 2c       	mov	r5, r1
    252a:	5e cf       	rjmp	.-324    	; 0x23e8 <xvprintf+0x21e>
    252c:	89 2d       	mov	r24, r9
    252e:	21 de       	rcall	.-958    	; 0x2172 <xputc>
    2530:	cb cf       	rjmp	.-106    	; 0x24c8 <xvprintf+0x2fe>
    2532:	89 2d       	mov	r24, r9
    2534:	1e de       	rcall	.-964    	; 0x2172 <xputc>
    2536:	76 01       	movw	r14, r12
    2538:	c7 cf       	rjmp	.-114    	; 0x24c8 <xvprintf+0x2fe>
    253a:	80 e2       	ldi	r24, 0x20	; 32
    253c:	1a de       	rcall	.-972    	; 0x2172 <xputc>
    253e:	f9 ce       	rjmp	.-526    	; 0x2332 <xvprintf+0x168>
    2540:	80 e2       	ldi	r24, 0x20	; 32
    2542:	17 de       	rcall	.-978    	; 0x2172 <xputc>
    2544:	74 01       	movw	r14, r8
    2546:	f5 ce       	rjmp	.-534    	; 0x2332 <xvprintf+0x168>
    2548:	e9 8d       	ldd	r30, Y+25	; 0x19
    254a:	fa 8d       	ldd	r31, Y+26	; 0x1a
    254c:	80 81       	ld	r24, Z
    254e:	91 81       	ldd	r25, Z+1	; 0x01
    2550:	a2 81       	ldd	r26, Z+2	; 0x02
    2552:	b3 81       	ldd	r27, Z+3	; 0x03
    2554:	34 96       	adiw	r30, 0x04	; 4
    2556:	fa 8f       	std	Y+26, r31	; 0x1a
    2558:	e9 8f       	std	Y+25, r30	; 0x19
    255a:	68 94       	set
    255c:	44 24       	eor	r4, r4
    255e:	41 f8       	bld	r4, 1
    2560:	51 2c       	mov	r5, r1
    2562:	5c cf       	rjmp	.-328    	; 0x241c <xvprintf+0x252>
    2564:	e2 fc       	sbrc	r14, 2
    2566:	f0 cf       	rjmp	.-32     	; 0x2548 <xvprintf+0x37e>
    2568:	68 94       	set
    256a:	44 24       	eor	r4, r4
    256c:	41 f8       	bld	r4, 1
    256e:	51 2c       	mov	r5, r1
    2570:	2b cf       	rjmp	.-426    	; 0x23c8 <xvprintf+0x1fe>
    2572:	e9 8d       	ldd	r30, Y+25	; 0x19
    2574:	fa 8d       	ldd	r31, Y+26	; 0x1a
    2576:	80 81       	ld	r24, Z
    2578:	91 81       	ldd	r25, Z+1	; 0x01
    257a:	a2 81       	ldd	r26, Z+2	; 0x02
    257c:	b3 81       	ldd	r27, Z+3	; 0x03
    257e:	34 96       	adiw	r30, 0x04	; 4
    2580:	fa 8f       	std	Y+26, r31	; 0x1a
    2582:	e9 8f       	std	Y+25, r30	; 0x19
    2584:	68 94       	set
    2586:	44 24       	eor	r4, r4
    2588:	43 f8       	bld	r4, 3
    258a:	51 2c       	mov	r5, r1
    258c:	47 cf       	rjmp	.-370    	; 0x241c <xvprintf+0x252>
    258e:	e2 fc       	sbrc	r14, 2
    2590:	f0 cf       	rjmp	.-32     	; 0x2572 <xvprintf+0x3a8>
    2592:	68 94       	set
    2594:	44 24       	eor	r4, r4
    2596:	43 f8       	bld	r4, 3
    2598:	51 2c       	mov	r5, r1
    259a:	26 cf       	rjmp	.-436    	; 0x23e8 <xvprintf+0x21e>
    259c:	6c 96       	adiw	r28, 0x1c	; 28
    259e:	0f b6       	in	r0, 0x3f	; 63
    25a0:	f8 94       	cli
    25a2:	de bf       	out	0x3e, r29	; 62
    25a4:	0f be       	out	0x3f, r0	; 63
    25a6:	cd bf       	out	0x3d, r28	; 61
    25a8:	df 91       	pop	r29
    25aa:	cf 91       	pop	r28
    25ac:	1f 91       	pop	r17
    25ae:	0f 91       	pop	r16
    25b0:	ff 90       	pop	r15
    25b2:	ef 90       	pop	r14
    25b4:	df 90       	pop	r13
    25b6:	cf 90       	pop	r12
    25b8:	bf 90       	pop	r11
    25ba:	af 90       	pop	r10
    25bc:	9f 90       	pop	r9
    25be:	8f 90       	pop	r8
    25c0:	7f 90       	pop	r7
    25c2:	6f 90       	pop	r6
    25c4:	5f 90       	pop	r5
    25c6:	4f 90       	pop	r4
    25c8:	3f 90       	pop	r3
    25ca:	2f 90       	pop	r2
    25cc:	08 95       	ret

000025ce <xprintf>:

void xprintf (			/* Put a formatted string to the default device */
	const char*	fmt,	/* Pointer to the format string */
	...					/* Optional arguments */
)
{
    25ce:	cf 93       	push	r28
    25d0:	df 93       	push	r29
    25d2:	cd b7       	in	r28, 0x3d	; 61
    25d4:	de b7       	in	r29, 0x3e	; 62
    25d6:	be 01       	movw	r22, r28
    25d8:	6b 5f       	subi	r22, 0xFB	; 251
    25da:	7f 4f       	sbci	r23, 0xFF	; 255
    25dc:	fb 01       	movw	r30, r22
    25de:	81 91       	ld	r24, Z+
    25e0:	91 91       	ld	r25, Z+
	va_list arp;


	va_start(arp, fmt);
	xvprintf(fmt, arp);
    25e2:	bf 01       	movw	r22, r30
	va_end(arp);
}
    25e4:	f2 dd       	rcall	.-1052   	; 0x21ca <xvprintf>
    25e6:	df 91       	pop	r29
    25e8:	cf 91       	pop	r28
    25ea:	08 95       	ret

000025ec <Tick_Timer_Process>:
#include "ecos.h"

/****************************************************************************/
void Tick_Timer_Process(void)
{
	ecos_tick();
    25ec:	0c 94 81 01 	jmp	0x302	; 0x302 <ecos_tick>
    25f0:	08 95       	ret

000025f2 <Second_Timer_Process>:
}
/****************************************************************************/
void Second_Timer_Process(void)
{
	ecos_second_tick();
    25f2:	0c 94 99 01 	jmp	0x332	; 0x332 <ecos_second_tick>
    25f6:	08 95       	ret

000025f8 <main>:
}
/****************************************************************************/
/****************************************************************************/
/****************************************************************************/
int main (void)
{
    25f8:	ff dc       	rcall	.-1538   	; 0x1ff8 <Cpu_Hardware_Init>
    25fa:	89 ea       	ldi	r24, 0xA9	; 169
    25fc:	92 e0       	ldi	r25, 0x02	; 2
    25fe:	9f 93       	push	r25
    2600:	8f 93       	push	r24
    2602:	e5 df       	rcall	.-54     	; 0x25ce <xprintf>
    2604:	0e 94 c2 03 	call	0x784	; 0x784 <process_init>
    2608:	60 e0       	ldi	r22, 0x00	; 0
    260a:	70 e0       	ldi	r23, 0x00	; 0
    260c:	89 e2       	ldi	r24, 0x29	; 41
    260e:	91 e0       	ldi	r25, 0x01	; 1
    2610:	0e 94 60 04 	call	0x8c0	; 0x8c0 <process_start>
    2614:	82 eb       	ldi	r24, 0xB2	; 178
    2616:	92 e0       	ldi	r25, 0x02	; 2
    2618:	9f 93       	push	r25
    261a:	8f 93       	push	r24
    261c:	d8 df       	rcall	.-80     	; 0x25ce <xprintf>
    261e:	0f 90       	pop	r0
    2620:	0f 90       	pop	r0
    2622:	0f 90       	pop	r0
    2624:	0f 90       	pop	r0
    2626:	c4 e0       	ldi	r28, 0x04	; 4
    2628:	56 dc       	rcall	.-1876   	; 0x1ed6 <Cpu_Measurement>
    262a:	0e 94 d2 03 	call	0x7a4	; 0x7a4 <process_run>
    262e:	c9 b9       	out	0x09, r28	; 9
    2630:	fb cf       	rjmp	.-10     	; 0x2628 <main+0x30>

00002632 <__divmodhi4>:
    2632:	97 fb       	bst	r25, 7
    2634:	07 2e       	mov	r0, r23
    2636:	16 f4       	brtc	.+4      	; 0x263c <__divmodhi4+0xa>
    2638:	00 94       	com	r0
    263a:	06 d0       	rcall	.+12     	; 0x2648 <__divmodhi4_neg1>
    263c:	77 fd       	sbrc	r23, 7
    263e:	08 d0       	rcall	.+16     	; 0x2650 <__divmodhi4_neg2>
    2640:	4c d0       	rcall	.+152    	; 0x26da <__udivmodhi4>
    2642:	07 fc       	sbrc	r0, 7
    2644:	05 d0       	rcall	.+10     	; 0x2650 <__divmodhi4_neg2>
    2646:	3e f4       	brtc	.+14     	; 0x2656 <__divmodhi4_exit>

00002648 <__divmodhi4_neg1>:
    2648:	90 95       	com	r25
    264a:	81 95       	neg	r24
    264c:	9f 4f       	sbci	r25, 0xFF	; 255
    264e:	08 95       	ret

00002650 <__divmodhi4_neg2>:
    2650:	70 95       	com	r23
    2652:	61 95       	neg	r22
    2654:	7f 4f       	sbci	r23, 0xFF	; 255

00002656 <__divmodhi4_exit>:
    2656:	08 95       	ret

00002658 <__udivmodsi4>:
    2658:	a1 e2       	ldi	r26, 0x21	; 33
    265a:	1a 2e       	mov	r1, r26
    265c:	aa 1b       	sub	r26, r26
    265e:	bb 1b       	sub	r27, r27
    2660:	fd 01       	movw	r30, r26
    2662:	0d c0       	rjmp	.+26     	; 0x267e <__udivmodsi4_ep>

00002664 <__udivmodsi4_loop>:
    2664:	aa 1f       	adc	r26, r26
    2666:	bb 1f       	adc	r27, r27
    2668:	ee 1f       	adc	r30, r30
    266a:	ff 1f       	adc	r31, r31
    266c:	a2 17       	cp	r26, r18
    266e:	b3 07       	cpc	r27, r19
    2670:	e4 07       	cpc	r30, r20
    2672:	f5 07       	cpc	r31, r21
    2674:	20 f0       	brcs	.+8      	; 0x267e <__udivmodsi4_ep>
    2676:	a2 1b       	sub	r26, r18
    2678:	b3 0b       	sbc	r27, r19
    267a:	e4 0b       	sbc	r30, r20
    267c:	f5 0b       	sbc	r31, r21

0000267e <__udivmodsi4_ep>:
    267e:	66 1f       	adc	r22, r22
    2680:	77 1f       	adc	r23, r23
    2682:	88 1f       	adc	r24, r24
    2684:	99 1f       	adc	r25, r25
    2686:	1a 94       	dec	r1
    2688:	69 f7       	brne	.-38     	; 0x2664 <__udivmodsi4_loop>
    268a:	60 95       	com	r22
    268c:	70 95       	com	r23
    268e:	80 95       	com	r24
    2690:	90 95       	com	r25
    2692:	9b 01       	movw	r18, r22
    2694:	ac 01       	movw	r20, r24
    2696:	bd 01       	movw	r22, r26
    2698:	cf 01       	movw	r24, r30
    269a:	08 95       	ret

0000269c <__tablejump2__>:
    269c:	ee 0f       	add	r30, r30
    269e:	ff 1f       	adc	r31, r31
    26a0:	05 90       	lpm	r0, Z+
    26a2:	f4 91       	lpm	r31, Z
    26a4:	e0 2d       	mov	r30, r0
    26a6:	09 94       	ijmp

000026a8 <__umulhisi3>:
    26a8:	a2 9f       	mul	r26, r18
    26aa:	b0 01       	movw	r22, r0
    26ac:	b3 9f       	mul	r27, r19
    26ae:	c0 01       	movw	r24, r0
    26b0:	a3 9f       	mul	r26, r19
    26b2:	70 0d       	add	r23, r0
    26b4:	81 1d       	adc	r24, r1
    26b6:	11 24       	eor	r1, r1
    26b8:	91 1d       	adc	r25, r1
    26ba:	b2 9f       	mul	r27, r18
    26bc:	70 0d       	add	r23, r0
    26be:	81 1d       	adc	r24, r1
    26c0:	11 24       	eor	r1, r1
    26c2:	91 1d       	adc	r25, r1
    26c4:	08 95       	ret

000026c6 <__muluhisi3>:
    26c6:	f0 df       	rcall	.-32     	; 0x26a8 <__umulhisi3>
    26c8:	a5 9f       	mul	r26, r21
    26ca:	90 0d       	add	r25, r0
    26cc:	b4 9f       	mul	r27, r20
    26ce:	90 0d       	add	r25, r0
    26d0:	a4 9f       	mul	r26, r20
    26d2:	80 0d       	add	r24, r0
    26d4:	91 1d       	adc	r25, r1
    26d6:	11 24       	eor	r1, r1
    26d8:	08 95       	ret

000026da <__udivmodhi4>:
    26da:	aa 1b       	sub	r26, r26
    26dc:	bb 1b       	sub	r27, r27
    26de:	51 e1       	ldi	r21, 0x11	; 17
    26e0:	07 c0       	rjmp	.+14     	; 0x26f0 <__udivmodhi4_ep>

000026e2 <__udivmodhi4_loop>:
    26e2:	aa 1f       	adc	r26, r26
    26e4:	bb 1f       	adc	r27, r27
    26e6:	a6 17       	cp	r26, r22
    26e8:	b7 07       	cpc	r27, r23
    26ea:	10 f0       	brcs	.+4      	; 0x26f0 <__udivmodhi4_ep>
    26ec:	a6 1b       	sub	r26, r22
    26ee:	b7 0b       	sbc	r27, r23

000026f0 <__udivmodhi4_ep>:
    26f0:	88 1f       	adc	r24, r24
    26f2:	99 1f       	adc	r25, r25
    26f4:	5a 95       	dec	r21
    26f6:	a9 f7       	brne	.-22     	; 0x26e2 <__udivmodhi4_loop>
    26f8:	80 95       	com	r24
    26fa:	90 95       	com	r25
    26fc:	bc 01       	movw	r22, r24
    26fe:	cd 01       	movw	r24, r26
    2700:	08 95       	ret

00002702 <fputc>:
    2702:	0f 93       	push	r16
    2704:	1f 93       	push	r17
    2706:	cf 93       	push	r28
    2708:	df 93       	push	r29
    270a:	fb 01       	movw	r30, r22
    270c:	23 81       	ldd	r18, Z+3	; 0x03
    270e:	21 fd       	sbrc	r18, 1
    2710:	03 c0       	rjmp	.+6      	; 0x2718 <fputc+0x16>
    2712:	8f ef       	ldi	r24, 0xFF	; 255
    2714:	9f ef       	ldi	r25, 0xFF	; 255
    2716:	2c c0       	rjmp	.+88     	; 0x2770 <fputc+0x6e>
    2718:	22 ff       	sbrs	r18, 2
    271a:	16 c0       	rjmp	.+44     	; 0x2748 <fputc+0x46>
    271c:	46 81       	ldd	r20, Z+6	; 0x06
    271e:	57 81       	ldd	r21, Z+7	; 0x07
    2720:	24 81       	ldd	r18, Z+4	; 0x04
    2722:	35 81       	ldd	r19, Z+5	; 0x05
    2724:	42 17       	cp	r20, r18
    2726:	53 07       	cpc	r21, r19
    2728:	44 f4       	brge	.+16     	; 0x273a <fputc+0x38>
    272a:	a0 81       	ld	r26, Z
    272c:	b1 81       	ldd	r27, Z+1	; 0x01
    272e:	9d 01       	movw	r18, r26
    2730:	2f 5f       	subi	r18, 0xFF	; 255
    2732:	3f 4f       	sbci	r19, 0xFF	; 255
    2734:	31 83       	std	Z+1, r19	; 0x01
    2736:	20 83       	st	Z, r18
    2738:	8c 93       	st	X, r24
    273a:	26 81       	ldd	r18, Z+6	; 0x06
    273c:	37 81       	ldd	r19, Z+7	; 0x07
    273e:	2f 5f       	subi	r18, 0xFF	; 255
    2740:	3f 4f       	sbci	r19, 0xFF	; 255
    2742:	37 83       	std	Z+7, r19	; 0x07
    2744:	26 83       	std	Z+6, r18	; 0x06
    2746:	14 c0       	rjmp	.+40     	; 0x2770 <fputc+0x6e>
    2748:	8b 01       	movw	r16, r22
    274a:	ec 01       	movw	r28, r24
    274c:	fb 01       	movw	r30, r22
    274e:	00 84       	ldd	r0, Z+8	; 0x08
    2750:	f1 85       	ldd	r31, Z+9	; 0x09
    2752:	e0 2d       	mov	r30, r0
    2754:	09 95       	icall
    2756:	89 2b       	or	r24, r25
    2758:	e1 f6       	brne	.-72     	; 0x2712 <fputc+0x10>
    275a:	d8 01       	movw	r26, r16
    275c:	16 96       	adiw	r26, 0x06	; 6
    275e:	8d 91       	ld	r24, X+
    2760:	9c 91       	ld	r25, X
    2762:	17 97       	sbiw	r26, 0x07	; 7
    2764:	01 96       	adiw	r24, 0x01	; 1
    2766:	17 96       	adiw	r26, 0x07	; 7
    2768:	9c 93       	st	X, r25
    276a:	8e 93       	st	-X, r24
    276c:	16 97       	sbiw	r26, 0x06	; 6
    276e:	ce 01       	movw	r24, r28
    2770:	df 91       	pop	r29
    2772:	cf 91       	pop	r28
    2774:	1f 91       	pop	r17
    2776:	0f 91       	pop	r16
    2778:	08 95       	ret

0000277a <sprintf>:
    277a:	ae e0       	ldi	r26, 0x0E	; 14
    277c:	b0 e0       	ldi	r27, 0x00	; 0
    277e:	e2 ec       	ldi	r30, 0xC2	; 194
    2780:	f3 e1       	ldi	r31, 0x13	; 19
    2782:	6e c2       	rjmp	.+1244   	; 0x2c60 <__prologue_saves__+0x1c>
    2784:	0d 89       	ldd	r16, Y+21	; 0x15
    2786:	1e 89       	ldd	r17, Y+22	; 0x16
    2788:	86 e0       	ldi	r24, 0x06	; 6
    278a:	8c 83       	std	Y+4, r24	; 0x04
    278c:	1a 83       	std	Y+2, r17	; 0x02
    278e:	09 83       	std	Y+1, r16	; 0x01
    2790:	8f ef       	ldi	r24, 0xFF	; 255
    2792:	9f e7       	ldi	r25, 0x7F	; 127
    2794:	9e 83       	std	Y+6, r25	; 0x06
    2796:	8d 83       	std	Y+5, r24	; 0x05
    2798:	ae 01       	movw	r20, r28
    279a:	47 5e       	subi	r20, 0xE7	; 231
    279c:	5f 4f       	sbci	r21, 0xFF	; 255
    279e:	6f 89       	ldd	r22, Y+23	; 0x17
    27a0:	78 8d       	ldd	r23, Y+24	; 0x18
    27a2:	ce 01       	movw	r24, r28
    27a4:	01 96       	adiw	r24, 0x01	; 1
    27a6:	08 d0       	rcall	.+16     	; 0x27b8 <vfprintf>
    27a8:	ef 81       	ldd	r30, Y+7	; 0x07
    27aa:	f8 85       	ldd	r31, Y+8	; 0x08
    27ac:	e0 0f       	add	r30, r16
    27ae:	f1 1f       	adc	r31, r17
    27b0:	10 82       	st	Z, r1
    27b2:	2e 96       	adiw	r28, 0x0e	; 14
    27b4:	e4 e0       	ldi	r30, 0x04	; 4
    27b6:	70 c2       	rjmp	.+1248   	; 0x2c98 <__epilogue_restores__+0x1c>

000027b8 <vfprintf>:
    27b8:	ab e0       	ldi	r26, 0x0B	; 11
    27ba:	b0 e0       	ldi	r27, 0x00	; 0
    27bc:	e1 ee       	ldi	r30, 0xE1	; 225
    27be:	f3 e1       	ldi	r31, 0x13	; 19
    27c0:	41 c2       	rjmp	.+1154   	; 0x2c44 <__prologue_saves__>
    27c2:	6c 01       	movw	r12, r24
    27c4:	7b 01       	movw	r14, r22
    27c6:	8a 01       	movw	r16, r20
    27c8:	fc 01       	movw	r30, r24
    27ca:	17 82       	std	Z+7, r1	; 0x07
    27cc:	16 82       	std	Z+6, r1	; 0x06
    27ce:	83 81       	ldd	r24, Z+3	; 0x03
    27d0:	81 ff       	sbrs	r24, 1
    27d2:	bf c1       	rjmp	.+894    	; 0x2b52 <vfprintf+0x39a>
    27d4:	ce 01       	movw	r24, r28
    27d6:	01 96       	adiw	r24, 0x01	; 1
    27d8:	3c 01       	movw	r6, r24
    27da:	f6 01       	movw	r30, r12
    27dc:	93 81       	ldd	r25, Z+3	; 0x03
    27de:	f7 01       	movw	r30, r14
    27e0:	93 fd       	sbrc	r25, 3
    27e2:	85 91       	lpm	r24, Z+
    27e4:	93 ff       	sbrs	r25, 3
    27e6:	81 91       	ld	r24, Z+
    27e8:	7f 01       	movw	r14, r30
    27ea:	88 23       	and	r24, r24
    27ec:	09 f4       	brne	.+2      	; 0x27f0 <vfprintf+0x38>
    27ee:	ad c1       	rjmp	.+858    	; 0x2b4a <vfprintf+0x392>
    27f0:	85 32       	cpi	r24, 0x25	; 37
    27f2:	39 f4       	brne	.+14     	; 0x2802 <vfprintf+0x4a>
    27f4:	93 fd       	sbrc	r25, 3
    27f6:	85 91       	lpm	r24, Z+
    27f8:	93 ff       	sbrs	r25, 3
    27fa:	81 91       	ld	r24, Z+
    27fc:	7f 01       	movw	r14, r30
    27fe:	85 32       	cpi	r24, 0x25	; 37
    2800:	21 f4       	brne	.+8      	; 0x280a <vfprintf+0x52>
    2802:	b6 01       	movw	r22, r12
    2804:	90 e0       	ldi	r25, 0x00	; 0
    2806:	7d df       	rcall	.-262    	; 0x2702 <fputc>
    2808:	e8 cf       	rjmp	.-48     	; 0x27da <vfprintf+0x22>
    280a:	91 2c       	mov	r9, r1
    280c:	21 2c       	mov	r2, r1
    280e:	31 2c       	mov	r3, r1
    2810:	ff e1       	ldi	r31, 0x1F	; 31
    2812:	f3 15       	cp	r31, r3
    2814:	d8 f0       	brcs	.+54     	; 0x284c <vfprintf+0x94>
    2816:	8b 32       	cpi	r24, 0x2B	; 43
    2818:	79 f0       	breq	.+30     	; 0x2838 <vfprintf+0x80>
    281a:	38 f4       	brcc	.+14     	; 0x282a <vfprintf+0x72>
    281c:	80 32       	cpi	r24, 0x20	; 32
    281e:	79 f0       	breq	.+30     	; 0x283e <vfprintf+0x86>
    2820:	83 32       	cpi	r24, 0x23	; 35
    2822:	a1 f4       	brne	.+40     	; 0x284c <vfprintf+0x94>
    2824:	23 2d       	mov	r18, r3
    2826:	20 61       	ori	r18, 0x10	; 16
    2828:	1d c0       	rjmp	.+58     	; 0x2864 <vfprintf+0xac>
    282a:	8d 32       	cpi	r24, 0x2D	; 45
    282c:	61 f0       	breq	.+24     	; 0x2846 <vfprintf+0x8e>
    282e:	80 33       	cpi	r24, 0x30	; 48
    2830:	69 f4       	brne	.+26     	; 0x284c <vfprintf+0x94>
    2832:	23 2d       	mov	r18, r3
    2834:	21 60       	ori	r18, 0x01	; 1
    2836:	16 c0       	rjmp	.+44     	; 0x2864 <vfprintf+0xac>
    2838:	83 2d       	mov	r24, r3
    283a:	82 60       	ori	r24, 0x02	; 2
    283c:	38 2e       	mov	r3, r24
    283e:	e3 2d       	mov	r30, r3
    2840:	e4 60       	ori	r30, 0x04	; 4
    2842:	3e 2e       	mov	r3, r30
    2844:	2a c0       	rjmp	.+84     	; 0x289a <vfprintf+0xe2>
    2846:	f3 2d       	mov	r31, r3
    2848:	f8 60       	ori	r31, 0x08	; 8
    284a:	1d c0       	rjmp	.+58     	; 0x2886 <vfprintf+0xce>
    284c:	37 fc       	sbrc	r3, 7
    284e:	2d c0       	rjmp	.+90     	; 0x28aa <vfprintf+0xf2>
    2850:	20 ed       	ldi	r18, 0xD0	; 208
    2852:	28 0f       	add	r18, r24
    2854:	2a 30       	cpi	r18, 0x0A	; 10
    2856:	40 f0       	brcs	.+16     	; 0x2868 <vfprintf+0xb0>
    2858:	8e 32       	cpi	r24, 0x2E	; 46
    285a:	b9 f4       	brne	.+46     	; 0x288a <vfprintf+0xd2>
    285c:	36 fc       	sbrc	r3, 6
    285e:	75 c1       	rjmp	.+746    	; 0x2b4a <vfprintf+0x392>
    2860:	23 2d       	mov	r18, r3
    2862:	20 64       	ori	r18, 0x40	; 64
    2864:	32 2e       	mov	r3, r18
    2866:	19 c0       	rjmp	.+50     	; 0x289a <vfprintf+0xe2>
    2868:	36 fe       	sbrs	r3, 6
    286a:	06 c0       	rjmp	.+12     	; 0x2878 <vfprintf+0xc0>
    286c:	8a e0       	ldi	r24, 0x0A	; 10
    286e:	98 9e       	mul	r9, r24
    2870:	20 0d       	add	r18, r0
    2872:	11 24       	eor	r1, r1
    2874:	92 2e       	mov	r9, r18
    2876:	11 c0       	rjmp	.+34     	; 0x289a <vfprintf+0xe2>
    2878:	ea e0       	ldi	r30, 0x0A	; 10
    287a:	2e 9e       	mul	r2, r30
    287c:	20 0d       	add	r18, r0
    287e:	11 24       	eor	r1, r1
    2880:	22 2e       	mov	r2, r18
    2882:	f3 2d       	mov	r31, r3
    2884:	f0 62       	ori	r31, 0x20	; 32
    2886:	3f 2e       	mov	r3, r31
    2888:	08 c0       	rjmp	.+16     	; 0x289a <vfprintf+0xe2>
    288a:	8c 36       	cpi	r24, 0x6C	; 108
    288c:	21 f4       	brne	.+8      	; 0x2896 <vfprintf+0xde>
    288e:	83 2d       	mov	r24, r3
    2890:	80 68       	ori	r24, 0x80	; 128
    2892:	38 2e       	mov	r3, r24
    2894:	02 c0       	rjmp	.+4      	; 0x289a <vfprintf+0xe2>
    2896:	88 36       	cpi	r24, 0x68	; 104
    2898:	41 f4       	brne	.+16     	; 0x28aa <vfprintf+0xf2>
    289a:	f7 01       	movw	r30, r14
    289c:	93 fd       	sbrc	r25, 3
    289e:	85 91       	lpm	r24, Z+
    28a0:	93 ff       	sbrs	r25, 3
    28a2:	81 91       	ld	r24, Z+
    28a4:	7f 01       	movw	r14, r30
    28a6:	81 11       	cpse	r24, r1
    28a8:	b3 cf       	rjmp	.-154    	; 0x2810 <vfprintf+0x58>
    28aa:	98 2f       	mov	r25, r24
    28ac:	9f 7d       	andi	r25, 0xDF	; 223
    28ae:	95 54       	subi	r25, 0x45	; 69
    28b0:	93 30       	cpi	r25, 0x03	; 3
    28b2:	28 f4       	brcc	.+10     	; 0x28be <vfprintf+0x106>
    28b4:	0c 5f       	subi	r16, 0xFC	; 252
    28b6:	1f 4f       	sbci	r17, 0xFF	; 255
    28b8:	9f e3       	ldi	r25, 0x3F	; 63
    28ba:	99 83       	std	Y+1, r25	; 0x01
    28bc:	0d c0       	rjmp	.+26     	; 0x28d8 <vfprintf+0x120>
    28be:	83 36       	cpi	r24, 0x63	; 99
    28c0:	31 f0       	breq	.+12     	; 0x28ce <vfprintf+0x116>
    28c2:	83 37       	cpi	r24, 0x73	; 115
    28c4:	71 f0       	breq	.+28     	; 0x28e2 <vfprintf+0x12a>
    28c6:	83 35       	cpi	r24, 0x53	; 83
    28c8:	09 f0       	breq	.+2      	; 0x28cc <vfprintf+0x114>
    28ca:	55 c0       	rjmp	.+170    	; 0x2976 <vfprintf+0x1be>
    28cc:	20 c0       	rjmp	.+64     	; 0x290e <vfprintf+0x156>
    28ce:	f8 01       	movw	r30, r16
    28d0:	80 81       	ld	r24, Z
    28d2:	89 83       	std	Y+1, r24	; 0x01
    28d4:	0e 5f       	subi	r16, 0xFE	; 254
    28d6:	1f 4f       	sbci	r17, 0xFF	; 255
    28d8:	88 24       	eor	r8, r8
    28da:	83 94       	inc	r8
    28dc:	91 2c       	mov	r9, r1
    28de:	53 01       	movw	r10, r6
    28e0:	12 c0       	rjmp	.+36     	; 0x2906 <vfprintf+0x14e>
    28e2:	28 01       	movw	r4, r16
    28e4:	f2 e0       	ldi	r31, 0x02	; 2
    28e6:	4f 0e       	add	r4, r31
    28e8:	51 1c       	adc	r5, r1
    28ea:	f8 01       	movw	r30, r16
    28ec:	a0 80       	ld	r10, Z
    28ee:	b1 80       	ldd	r11, Z+1	; 0x01
    28f0:	36 fe       	sbrs	r3, 6
    28f2:	03 c0       	rjmp	.+6      	; 0x28fa <vfprintf+0x142>
    28f4:	69 2d       	mov	r22, r9
    28f6:	70 e0       	ldi	r23, 0x00	; 0
    28f8:	02 c0       	rjmp	.+4      	; 0x28fe <vfprintf+0x146>
    28fa:	6f ef       	ldi	r22, 0xFF	; 255
    28fc:	7f ef       	ldi	r23, 0xFF	; 255
    28fe:	c5 01       	movw	r24, r10
    2900:	38 d1       	rcall	.+624    	; 0x2b72 <strnlen>
    2902:	4c 01       	movw	r8, r24
    2904:	82 01       	movw	r16, r4
    2906:	f3 2d       	mov	r31, r3
    2908:	ff 77       	andi	r31, 0x7F	; 127
    290a:	3f 2e       	mov	r3, r31
    290c:	15 c0       	rjmp	.+42     	; 0x2938 <vfprintf+0x180>
    290e:	28 01       	movw	r4, r16
    2910:	22 e0       	ldi	r18, 0x02	; 2
    2912:	42 0e       	add	r4, r18
    2914:	51 1c       	adc	r5, r1
    2916:	f8 01       	movw	r30, r16
    2918:	a0 80       	ld	r10, Z
    291a:	b1 80       	ldd	r11, Z+1	; 0x01
    291c:	36 fe       	sbrs	r3, 6
    291e:	03 c0       	rjmp	.+6      	; 0x2926 <vfprintf+0x16e>
    2920:	69 2d       	mov	r22, r9
    2922:	70 e0       	ldi	r23, 0x00	; 0
    2924:	02 c0       	rjmp	.+4      	; 0x292a <vfprintf+0x172>
    2926:	6f ef       	ldi	r22, 0xFF	; 255
    2928:	7f ef       	ldi	r23, 0xFF	; 255
    292a:	c5 01       	movw	r24, r10
    292c:	17 d1       	rcall	.+558    	; 0x2b5c <strnlen_P>
    292e:	4c 01       	movw	r8, r24
    2930:	f3 2d       	mov	r31, r3
    2932:	f0 68       	ori	r31, 0x80	; 128
    2934:	3f 2e       	mov	r3, r31
    2936:	82 01       	movw	r16, r4
    2938:	33 fc       	sbrc	r3, 3
    293a:	19 c0       	rjmp	.+50     	; 0x296e <vfprintf+0x1b6>
    293c:	82 2d       	mov	r24, r2
    293e:	90 e0       	ldi	r25, 0x00	; 0
    2940:	88 16       	cp	r8, r24
    2942:	99 06       	cpc	r9, r25
    2944:	a0 f4       	brcc	.+40     	; 0x296e <vfprintf+0x1b6>
    2946:	b6 01       	movw	r22, r12
    2948:	80 e2       	ldi	r24, 0x20	; 32
    294a:	90 e0       	ldi	r25, 0x00	; 0
    294c:	da de       	rcall	.-588    	; 0x2702 <fputc>
    294e:	2a 94       	dec	r2
    2950:	f5 cf       	rjmp	.-22     	; 0x293c <vfprintf+0x184>
    2952:	f5 01       	movw	r30, r10
    2954:	37 fc       	sbrc	r3, 7
    2956:	85 91       	lpm	r24, Z+
    2958:	37 fe       	sbrs	r3, 7
    295a:	81 91       	ld	r24, Z+
    295c:	5f 01       	movw	r10, r30
    295e:	b6 01       	movw	r22, r12
    2960:	90 e0       	ldi	r25, 0x00	; 0
    2962:	cf de       	rcall	.-610    	; 0x2702 <fputc>
    2964:	21 10       	cpse	r2, r1
    2966:	2a 94       	dec	r2
    2968:	21 e0       	ldi	r18, 0x01	; 1
    296a:	82 1a       	sub	r8, r18
    296c:	91 08       	sbc	r9, r1
    296e:	81 14       	cp	r8, r1
    2970:	91 04       	cpc	r9, r1
    2972:	79 f7       	brne	.-34     	; 0x2952 <vfprintf+0x19a>
    2974:	e1 c0       	rjmp	.+450    	; 0x2b38 <vfprintf+0x380>
    2976:	84 36       	cpi	r24, 0x64	; 100
    2978:	11 f0       	breq	.+4      	; 0x297e <vfprintf+0x1c6>
    297a:	89 36       	cpi	r24, 0x69	; 105
    297c:	39 f5       	brne	.+78     	; 0x29cc <vfprintf+0x214>
    297e:	f8 01       	movw	r30, r16
    2980:	37 fe       	sbrs	r3, 7
    2982:	07 c0       	rjmp	.+14     	; 0x2992 <vfprintf+0x1da>
    2984:	60 81       	ld	r22, Z
    2986:	71 81       	ldd	r23, Z+1	; 0x01
    2988:	82 81       	ldd	r24, Z+2	; 0x02
    298a:	93 81       	ldd	r25, Z+3	; 0x03
    298c:	0c 5f       	subi	r16, 0xFC	; 252
    298e:	1f 4f       	sbci	r17, 0xFF	; 255
    2990:	08 c0       	rjmp	.+16     	; 0x29a2 <vfprintf+0x1ea>
    2992:	60 81       	ld	r22, Z
    2994:	71 81       	ldd	r23, Z+1	; 0x01
    2996:	07 2e       	mov	r0, r23
    2998:	00 0c       	add	r0, r0
    299a:	88 0b       	sbc	r24, r24
    299c:	99 0b       	sbc	r25, r25
    299e:	0e 5f       	subi	r16, 0xFE	; 254
    29a0:	1f 4f       	sbci	r17, 0xFF	; 255
    29a2:	f3 2d       	mov	r31, r3
    29a4:	ff 76       	andi	r31, 0x6F	; 111
    29a6:	3f 2e       	mov	r3, r31
    29a8:	97 ff       	sbrs	r25, 7
    29aa:	09 c0       	rjmp	.+18     	; 0x29be <vfprintf+0x206>
    29ac:	90 95       	com	r25
    29ae:	80 95       	com	r24
    29b0:	70 95       	com	r23
    29b2:	61 95       	neg	r22
    29b4:	7f 4f       	sbci	r23, 0xFF	; 255
    29b6:	8f 4f       	sbci	r24, 0xFF	; 255
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	f0 68       	ori	r31, 0x80	; 128
    29bc:	3f 2e       	mov	r3, r31
    29be:	2a e0       	ldi	r18, 0x0A	; 10
    29c0:	30 e0       	ldi	r19, 0x00	; 0
    29c2:	a3 01       	movw	r20, r6
    29c4:	e1 d0       	rcall	.+450    	; 0x2b88 <__ultoa_invert>
    29c6:	88 2e       	mov	r8, r24
    29c8:	86 18       	sub	r8, r6
    29ca:	44 c0       	rjmp	.+136    	; 0x2a54 <vfprintf+0x29c>
    29cc:	85 37       	cpi	r24, 0x75	; 117
    29ce:	31 f4       	brne	.+12     	; 0x29dc <vfprintf+0x224>
    29d0:	23 2d       	mov	r18, r3
    29d2:	2f 7e       	andi	r18, 0xEF	; 239
    29d4:	b2 2e       	mov	r11, r18
    29d6:	2a e0       	ldi	r18, 0x0A	; 10
    29d8:	30 e0       	ldi	r19, 0x00	; 0
    29da:	25 c0       	rjmp	.+74     	; 0x2a26 <vfprintf+0x26e>
    29dc:	93 2d       	mov	r25, r3
    29de:	99 7f       	andi	r25, 0xF9	; 249
    29e0:	b9 2e       	mov	r11, r25
    29e2:	8f 36       	cpi	r24, 0x6F	; 111
    29e4:	c1 f0       	breq	.+48     	; 0x2a16 <vfprintf+0x25e>
    29e6:	18 f4       	brcc	.+6      	; 0x29ee <vfprintf+0x236>
    29e8:	88 35       	cpi	r24, 0x58	; 88
    29ea:	79 f0       	breq	.+30     	; 0x2a0a <vfprintf+0x252>
    29ec:	ae c0       	rjmp	.+348    	; 0x2b4a <vfprintf+0x392>
    29ee:	80 37       	cpi	r24, 0x70	; 112
    29f0:	19 f0       	breq	.+6      	; 0x29f8 <vfprintf+0x240>
    29f2:	88 37       	cpi	r24, 0x78	; 120
    29f4:	21 f0       	breq	.+8      	; 0x29fe <vfprintf+0x246>
    29f6:	a9 c0       	rjmp	.+338    	; 0x2b4a <vfprintf+0x392>
    29f8:	e9 2f       	mov	r30, r25
    29fa:	e0 61       	ori	r30, 0x10	; 16
    29fc:	be 2e       	mov	r11, r30
    29fe:	b4 fe       	sbrs	r11, 4
    2a00:	0d c0       	rjmp	.+26     	; 0x2a1c <vfprintf+0x264>
    2a02:	fb 2d       	mov	r31, r11
    2a04:	f4 60       	ori	r31, 0x04	; 4
    2a06:	bf 2e       	mov	r11, r31
    2a08:	09 c0       	rjmp	.+18     	; 0x2a1c <vfprintf+0x264>
    2a0a:	34 fe       	sbrs	r3, 4
    2a0c:	0a c0       	rjmp	.+20     	; 0x2a22 <vfprintf+0x26a>
    2a0e:	29 2f       	mov	r18, r25
    2a10:	26 60       	ori	r18, 0x06	; 6
    2a12:	b2 2e       	mov	r11, r18
    2a14:	06 c0       	rjmp	.+12     	; 0x2a22 <vfprintf+0x26a>
    2a16:	28 e0       	ldi	r18, 0x08	; 8
    2a18:	30 e0       	ldi	r19, 0x00	; 0
    2a1a:	05 c0       	rjmp	.+10     	; 0x2a26 <vfprintf+0x26e>
    2a1c:	20 e1       	ldi	r18, 0x10	; 16
    2a1e:	30 e0       	ldi	r19, 0x00	; 0
    2a20:	02 c0       	rjmp	.+4      	; 0x2a26 <vfprintf+0x26e>
    2a22:	20 e1       	ldi	r18, 0x10	; 16
    2a24:	32 e0       	ldi	r19, 0x02	; 2
    2a26:	f8 01       	movw	r30, r16
    2a28:	b7 fe       	sbrs	r11, 7
    2a2a:	07 c0       	rjmp	.+14     	; 0x2a3a <vfprintf+0x282>
    2a2c:	60 81       	ld	r22, Z
    2a2e:	71 81       	ldd	r23, Z+1	; 0x01
    2a30:	82 81       	ldd	r24, Z+2	; 0x02
    2a32:	93 81       	ldd	r25, Z+3	; 0x03
    2a34:	0c 5f       	subi	r16, 0xFC	; 252
    2a36:	1f 4f       	sbci	r17, 0xFF	; 255
    2a38:	06 c0       	rjmp	.+12     	; 0x2a46 <vfprintf+0x28e>
    2a3a:	60 81       	ld	r22, Z
    2a3c:	71 81       	ldd	r23, Z+1	; 0x01
    2a3e:	80 e0       	ldi	r24, 0x00	; 0
    2a40:	90 e0       	ldi	r25, 0x00	; 0
    2a42:	0e 5f       	subi	r16, 0xFE	; 254
    2a44:	1f 4f       	sbci	r17, 0xFF	; 255
    2a46:	a3 01       	movw	r20, r6
    2a48:	9f d0       	rcall	.+318    	; 0x2b88 <__ultoa_invert>
    2a4a:	88 2e       	mov	r8, r24
    2a4c:	86 18       	sub	r8, r6
    2a4e:	fb 2d       	mov	r31, r11
    2a50:	ff 77       	andi	r31, 0x7F	; 127
    2a52:	3f 2e       	mov	r3, r31
    2a54:	36 fe       	sbrs	r3, 6
    2a56:	0d c0       	rjmp	.+26     	; 0x2a72 <vfprintf+0x2ba>
    2a58:	23 2d       	mov	r18, r3
    2a5a:	2e 7f       	andi	r18, 0xFE	; 254
    2a5c:	a2 2e       	mov	r10, r18
    2a5e:	89 14       	cp	r8, r9
    2a60:	58 f4       	brcc	.+22     	; 0x2a78 <vfprintf+0x2c0>
    2a62:	34 fe       	sbrs	r3, 4
    2a64:	0b c0       	rjmp	.+22     	; 0x2a7c <vfprintf+0x2c4>
    2a66:	32 fc       	sbrc	r3, 2
    2a68:	09 c0       	rjmp	.+18     	; 0x2a7c <vfprintf+0x2c4>
    2a6a:	83 2d       	mov	r24, r3
    2a6c:	8e 7e       	andi	r24, 0xEE	; 238
    2a6e:	a8 2e       	mov	r10, r24
    2a70:	05 c0       	rjmp	.+10     	; 0x2a7c <vfprintf+0x2c4>
    2a72:	b8 2c       	mov	r11, r8
    2a74:	a3 2c       	mov	r10, r3
    2a76:	03 c0       	rjmp	.+6      	; 0x2a7e <vfprintf+0x2c6>
    2a78:	b8 2c       	mov	r11, r8
    2a7a:	01 c0       	rjmp	.+2      	; 0x2a7e <vfprintf+0x2c6>
    2a7c:	b9 2c       	mov	r11, r9
    2a7e:	a4 fe       	sbrs	r10, 4
    2a80:	0f c0       	rjmp	.+30     	; 0x2aa0 <vfprintf+0x2e8>
    2a82:	fe 01       	movw	r30, r28
    2a84:	e8 0d       	add	r30, r8
    2a86:	f1 1d       	adc	r31, r1
    2a88:	80 81       	ld	r24, Z
    2a8a:	80 33       	cpi	r24, 0x30	; 48
    2a8c:	21 f4       	brne	.+8      	; 0x2a96 <vfprintf+0x2de>
    2a8e:	9a 2d       	mov	r25, r10
    2a90:	99 7e       	andi	r25, 0xE9	; 233
    2a92:	a9 2e       	mov	r10, r25
    2a94:	09 c0       	rjmp	.+18     	; 0x2aa8 <vfprintf+0x2f0>
    2a96:	a2 fe       	sbrs	r10, 2
    2a98:	06 c0       	rjmp	.+12     	; 0x2aa6 <vfprintf+0x2ee>
    2a9a:	b3 94       	inc	r11
    2a9c:	b3 94       	inc	r11
    2a9e:	04 c0       	rjmp	.+8      	; 0x2aa8 <vfprintf+0x2f0>
    2aa0:	8a 2d       	mov	r24, r10
    2aa2:	86 78       	andi	r24, 0x86	; 134
    2aa4:	09 f0       	breq	.+2      	; 0x2aa8 <vfprintf+0x2f0>
    2aa6:	b3 94       	inc	r11
    2aa8:	a3 fc       	sbrc	r10, 3
    2aaa:	10 c0       	rjmp	.+32     	; 0x2acc <vfprintf+0x314>
    2aac:	a0 fe       	sbrs	r10, 0
    2aae:	06 c0       	rjmp	.+12     	; 0x2abc <vfprintf+0x304>
    2ab0:	b2 14       	cp	r11, r2
    2ab2:	80 f4       	brcc	.+32     	; 0x2ad4 <vfprintf+0x31c>
    2ab4:	28 0c       	add	r2, r8
    2ab6:	92 2c       	mov	r9, r2
    2ab8:	9b 18       	sub	r9, r11
    2aba:	0d c0       	rjmp	.+26     	; 0x2ad6 <vfprintf+0x31e>
    2abc:	b2 14       	cp	r11, r2
    2abe:	58 f4       	brcc	.+22     	; 0x2ad6 <vfprintf+0x31e>
    2ac0:	b6 01       	movw	r22, r12
    2ac2:	80 e2       	ldi	r24, 0x20	; 32
    2ac4:	90 e0       	ldi	r25, 0x00	; 0
    2ac6:	1d de       	rcall	.-966    	; 0x2702 <fputc>
    2ac8:	b3 94       	inc	r11
    2aca:	f8 cf       	rjmp	.-16     	; 0x2abc <vfprintf+0x304>
    2acc:	b2 14       	cp	r11, r2
    2ace:	18 f4       	brcc	.+6      	; 0x2ad6 <vfprintf+0x31e>
    2ad0:	2b 18       	sub	r2, r11
    2ad2:	02 c0       	rjmp	.+4      	; 0x2ad8 <vfprintf+0x320>
    2ad4:	98 2c       	mov	r9, r8
    2ad6:	21 2c       	mov	r2, r1
    2ad8:	a4 fe       	sbrs	r10, 4
    2ada:	0f c0       	rjmp	.+30     	; 0x2afa <vfprintf+0x342>
    2adc:	b6 01       	movw	r22, r12
    2ade:	80 e3       	ldi	r24, 0x30	; 48
    2ae0:	90 e0       	ldi	r25, 0x00	; 0
    2ae2:	0f de       	rcall	.-994    	; 0x2702 <fputc>
    2ae4:	a2 fe       	sbrs	r10, 2
    2ae6:	16 c0       	rjmp	.+44     	; 0x2b14 <vfprintf+0x35c>
    2ae8:	a1 fc       	sbrc	r10, 1
    2aea:	03 c0       	rjmp	.+6      	; 0x2af2 <vfprintf+0x33a>
    2aec:	88 e7       	ldi	r24, 0x78	; 120
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	02 c0       	rjmp	.+4      	; 0x2af6 <vfprintf+0x33e>
    2af2:	88 e5       	ldi	r24, 0x58	; 88
    2af4:	90 e0       	ldi	r25, 0x00	; 0
    2af6:	b6 01       	movw	r22, r12
    2af8:	0c c0       	rjmp	.+24     	; 0x2b12 <vfprintf+0x35a>
    2afa:	8a 2d       	mov	r24, r10
    2afc:	86 78       	andi	r24, 0x86	; 134
    2afe:	51 f0       	breq	.+20     	; 0x2b14 <vfprintf+0x35c>
    2b00:	a1 fe       	sbrs	r10, 1
    2b02:	02 c0       	rjmp	.+4      	; 0x2b08 <vfprintf+0x350>
    2b04:	8b e2       	ldi	r24, 0x2B	; 43
    2b06:	01 c0       	rjmp	.+2      	; 0x2b0a <vfprintf+0x352>
    2b08:	80 e2       	ldi	r24, 0x20	; 32
    2b0a:	a7 fc       	sbrc	r10, 7
    2b0c:	8d e2       	ldi	r24, 0x2D	; 45
    2b0e:	b6 01       	movw	r22, r12
    2b10:	90 e0       	ldi	r25, 0x00	; 0
    2b12:	f7 dd       	rcall	.-1042   	; 0x2702 <fputc>
    2b14:	89 14       	cp	r8, r9
    2b16:	30 f4       	brcc	.+12     	; 0x2b24 <vfprintf+0x36c>
    2b18:	b6 01       	movw	r22, r12
    2b1a:	80 e3       	ldi	r24, 0x30	; 48
    2b1c:	90 e0       	ldi	r25, 0x00	; 0
    2b1e:	f1 dd       	rcall	.-1054   	; 0x2702 <fputc>
    2b20:	9a 94       	dec	r9
    2b22:	f8 cf       	rjmp	.-16     	; 0x2b14 <vfprintf+0x35c>
    2b24:	8a 94       	dec	r8
    2b26:	f3 01       	movw	r30, r6
    2b28:	e8 0d       	add	r30, r8
    2b2a:	f1 1d       	adc	r31, r1
    2b2c:	80 81       	ld	r24, Z
    2b2e:	b6 01       	movw	r22, r12
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	e7 dd       	rcall	.-1074   	; 0x2702 <fputc>
    2b34:	81 10       	cpse	r8, r1
    2b36:	f6 cf       	rjmp	.-20     	; 0x2b24 <vfprintf+0x36c>
    2b38:	22 20       	and	r2, r2
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <vfprintf+0x386>
    2b3c:	4e ce       	rjmp	.-868    	; 0x27da <vfprintf+0x22>
    2b3e:	b6 01       	movw	r22, r12
    2b40:	80 e2       	ldi	r24, 0x20	; 32
    2b42:	90 e0       	ldi	r25, 0x00	; 0
    2b44:	de dd       	rcall	.-1092   	; 0x2702 <fputc>
    2b46:	2a 94       	dec	r2
    2b48:	f7 cf       	rjmp	.-18     	; 0x2b38 <vfprintf+0x380>
    2b4a:	f6 01       	movw	r30, r12
    2b4c:	86 81       	ldd	r24, Z+6	; 0x06
    2b4e:	97 81       	ldd	r25, Z+7	; 0x07
    2b50:	02 c0       	rjmp	.+4      	; 0x2b56 <vfprintf+0x39e>
    2b52:	8f ef       	ldi	r24, 0xFF	; 255
    2b54:	9f ef       	ldi	r25, 0xFF	; 255
    2b56:	2b 96       	adiw	r28, 0x0b	; 11
    2b58:	e2 e1       	ldi	r30, 0x12	; 18
    2b5a:	90 c0       	rjmp	.+288    	; 0x2c7c <__epilogue_restores__>

00002b5c <strnlen_P>:
    2b5c:	fc 01       	movw	r30, r24
    2b5e:	05 90       	lpm	r0, Z+
    2b60:	61 50       	subi	r22, 0x01	; 1
    2b62:	70 40       	sbci	r23, 0x00	; 0
    2b64:	01 10       	cpse	r0, r1
    2b66:	d8 f7       	brcc	.-10     	; 0x2b5e <strnlen_P+0x2>
    2b68:	80 95       	com	r24
    2b6a:	90 95       	com	r25
    2b6c:	8e 0f       	add	r24, r30
    2b6e:	9f 1f       	adc	r25, r31
    2b70:	08 95       	ret

00002b72 <strnlen>:
    2b72:	fc 01       	movw	r30, r24
    2b74:	61 50       	subi	r22, 0x01	; 1
    2b76:	70 40       	sbci	r23, 0x00	; 0
    2b78:	01 90       	ld	r0, Z+
    2b7a:	01 10       	cpse	r0, r1
    2b7c:	d8 f7       	brcc	.-10     	; 0x2b74 <strnlen+0x2>
    2b7e:	80 95       	com	r24
    2b80:	90 95       	com	r25
    2b82:	8e 0f       	add	r24, r30
    2b84:	9f 1f       	adc	r25, r31
    2b86:	08 95       	ret

00002b88 <__ultoa_invert>:
    2b88:	fa 01       	movw	r30, r20
    2b8a:	aa 27       	eor	r26, r26
    2b8c:	28 30       	cpi	r18, 0x08	; 8
    2b8e:	51 f1       	breq	.+84     	; 0x2be4 <__ultoa_invert+0x5c>
    2b90:	20 31       	cpi	r18, 0x10	; 16
    2b92:	81 f1       	breq	.+96     	; 0x2bf4 <__ultoa_invert+0x6c>
    2b94:	e8 94       	clt
    2b96:	6f 93       	push	r22
    2b98:	6e 7f       	andi	r22, 0xFE	; 254
    2b9a:	6e 5f       	subi	r22, 0xFE	; 254
    2b9c:	7f 4f       	sbci	r23, 0xFF	; 255
    2b9e:	8f 4f       	sbci	r24, 0xFF	; 255
    2ba0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ba2:	af 4f       	sbci	r26, 0xFF	; 255
    2ba4:	b1 e0       	ldi	r27, 0x01	; 1
    2ba6:	3e d0       	rcall	.+124    	; 0x2c24 <__ultoa_invert+0x9c>
    2ba8:	b4 e0       	ldi	r27, 0x04	; 4
    2baa:	3c d0       	rcall	.+120    	; 0x2c24 <__ultoa_invert+0x9c>
    2bac:	67 0f       	add	r22, r23
    2bae:	78 1f       	adc	r23, r24
    2bb0:	89 1f       	adc	r24, r25
    2bb2:	9a 1f       	adc	r25, r26
    2bb4:	a1 1d       	adc	r26, r1
    2bb6:	68 0f       	add	r22, r24
    2bb8:	79 1f       	adc	r23, r25
    2bba:	8a 1f       	adc	r24, r26
    2bbc:	91 1d       	adc	r25, r1
    2bbe:	a1 1d       	adc	r26, r1
    2bc0:	6a 0f       	add	r22, r26
    2bc2:	71 1d       	adc	r23, r1
    2bc4:	81 1d       	adc	r24, r1
    2bc6:	91 1d       	adc	r25, r1
    2bc8:	a1 1d       	adc	r26, r1
    2bca:	20 d0       	rcall	.+64     	; 0x2c0c <__ultoa_invert+0x84>
    2bcc:	09 f4       	brne	.+2      	; 0x2bd0 <__ultoa_invert+0x48>
    2bce:	68 94       	set
    2bd0:	3f 91       	pop	r19
    2bd2:	2a e0       	ldi	r18, 0x0A	; 10
    2bd4:	26 9f       	mul	r18, r22
    2bd6:	11 24       	eor	r1, r1
    2bd8:	30 19       	sub	r19, r0
    2bda:	30 5d       	subi	r19, 0xD0	; 208
    2bdc:	31 93       	st	Z+, r19
    2bde:	de f6       	brtc	.-74     	; 0x2b96 <__ultoa_invert+0xe>
    2be0:	cf 01       	movw	r24, r30
    2be2:	08 95       	ret
    2be4:	46 2f       	mov	r20, r22
    2be6:	47 70       	andi	r20, 0x07	; 7
    2be8:	40 5d       	subi	r20, 0xD0	; 208
    2bea:	41 93       	st	Z+, r20
    2bec:	b3 e0       	ldi	r27, 0x03	; 3
    2bee:	0f d0       	rcall	.+30     	; 0x2c0e <__ultoa_invert+0x86>
    2bf0:	c9 f7       	brne	.-14     	; 0x2be4 <__ultoa_invert+0x5c>
    2bf2:	f6 cf       	rjmp	.-20     	; 0x2be0 <__ultoa_invert+0x58>
    2bf4:	46 2f       	mov	r20, r22
    2bf6:	4f 70       	andi	r20, 0x0F	; 15
    2bf8:	40 5d       	subi	r20, 0xD0	; 208
    2bfa:	4a 33       	cpi	r20, 0x3A	; 58
    2bfc:	18 f0       	brcs	.+6      	; 0x2c04 <__ultoa_invert+0x7c>
    2bfe:	49 5d       	subi	r20, 0xD9	; 217
    2c00:	31 fd       	sbrc	r19, 1
    2c02:	40 52       	subi	r20, 0x20	; 32
    2c04:	41 93       	st	Z+, r20
    2c06:	02 d0       	rcall	.+4      	; 0x2c0c <__ultoa_invert+0x84>
    2c08:	a9 f7       	brne	.-22     	; 0x2bf4 <__ultoa_invert+0x6c>
    2c0a:	ea cf       	rjmp	.-44     	; 0x2be0 <__ultoa_invert+0x58>
    2c0c:	b4 e0       	ldi	r27, 0x04	; 4
    2c0e:	a6 95       	lsr	r26
    2c10:	97 95       	ror	r25
    2c12:	87 95       	ror	r24
    2c14:	77 95       	ror	r23
    2c16:	67 95       	ror	r22
    2c18:	ba 95       	dec	r27
    2c1a:	c9 f7       	brne	.-14     	; 0x2c0e <__ultoa_invert+0x86>
    2c1c:	00 97       	sbiw	r24, 0x00	; 0
    2c1e:	61 05       	cpc	r22, r1
    2c20:	71 05       	cpc	r23, r1
    2c22:	08 95       	ret
    2c24:	9b 01       	movw	r18, r22
    2c26:	ac 01       	movw	r20, r24
    2c28:	0a 2e       	mov	r0, r26
    2c2a:	06 94       	lsr	r0
    2c2c:	57 95       	ror	r21
    2c2e:	47 95       	ror	r20
    2c30:	37 95       	ror	r19
    2c32:	27 95       	ror	r18
    2c34:	ba 95       	dec	r27
    2c36:	c9 f7       	brne	.-14     	; 0x2c2a <__ultoa_invert+0xa2>
    2c38:	62 0f       	add	r22, r18
    2c3a:	73 1f       	adc	r23, r19
    2c3c:	84 1f       	adc	r24, r20
    2c3e:	95 1f       	adc	r25, r21
    2c40:	a0 1d       	adc	r26, r0
    2c42:	08 95       	ret

00002c44 <__prologue_saves__>:
    2c44:	2f 92       	push	r2
    2c46:	3f 92       	push	r3
    2c48:	4f 92       	push	r4
    2c4a:	5f 92       	push	r5
    2c4c:	6f 92       	push	r6
    2c4e:	7f 92       	push	r7
    2c50:	8f 92       	push	r8
    2c52:	9f 92       	push	r9
    2c54:	af 92       	push	r10
    2c56:	bf 92       	push	r11
    2c58:	cf 92       	push	r12
    2c5a:	df 92       	push	r13
    2c5c:	ef 92       	push	r14
    2c5e:	ff 92       	push	r15
    2c60:	0f 93       	push	r16
    2c62:	1f 93       	push	r17
    2c64:	cf 93       	push	r28
    2c66:	df 93       	push	r29
    2c68:	cd b7       	in	r28, 0x3d	; 61
    2c6a:	de b7       	in	r29, 0x3e	; 62
    2c6c:	ca 1b       	sub	r28, r26
    2c6e:	db 0b       	sbc	r29, r27
    2c70:	0f b6       	in	r0, 0x3f	; 63
    2c72:	f8 94       	cli
    2c74:	de bf       	out	0x3e, r29	; 62
    2c76:	0f be       	out	0x3f, r0	; 63
    2c78:	cd bf       	out	0x3d, r28	; 61
    2c7a:	09 94       	ijmp

00002c7c <__epilogue_restores__>:
    2c7c:	2a 88       	ldd	r2, Y+18	; 0x12
    2c7e:	39 88       	ldd	r3, Y+17	; 0x11
    2c80:	48 88       	ldd	r4, Y+16	; 0x10
    2c82:	5f 84       	ldd	r5, Y+15	; 0x0f
    2c84:	6e 84       	ldd	r6, Y+14	; 0x0e
    2c86:	7d 84       	ldd	r7, Y+13	; 0x0d
    2c88:	8c 84       	ldd	r8, Y+12	; 0x0c
    2c8a:	9b 84       	ldd	r9, Y+11	; 0x0b
    2c8c:	aa 84       	ldd	r10, Y+10	; 0x0a
    2c8e:	b9 84       	ldd	r11, Y+9	; 0x09
    2c90:	c8 84       	ldd	r12, Y+8	; 0x08
    2c92:	df 80       	ldd	r13, Y+7	; 0x07
    2c94:	ee 80       	ldd	r14, Y+6	; 0x06
    2c96:	fd 80       	ldd	r15, Y+5	; 0x05
    2c98:	0c 81       	ldd	r16, Y+4	; 0x04
    2c9a:	1b 81       	ldd	r17, Y+3	; 0x03
    2c9c:	aa 81       	ldd	r26, Y+2	; 0x02
    2c9e:	b9 81       	ldd	r27, Y+1	; 0x01
    2ca0:	ce 0f       	add	r28, r30
    2ca2:	d1 1d       	adc	r29, r1
    2ca4:	0f b6       	in	r0, 0x3f	; 63
    2ca6:	f8 94       	cli
    2ca8:	de bf       	out	0x3e, r29	; 62
    2caa:	0f be       	out	0x3f, r0	; 63
    2cac:	cd bf       	out	0x3d, r28	; 61
    2cae:	ed 01       	movw	r28, r26
    2cb0:	08 95       	ret

00002cb2 <_exit>:
    2cb2:	f8 94       	cli

00002cb4 <__stop_program>:
    2cb4:	ff cf       	rjmp	.-2      	; 0x2cb4 <__stop_program>
